{"version":3,"sources":["Auth/MsgBox.js","Auth/TogglePassword.js","Auth/apiCalls.js","Auth/Login.js","Auth/BackToLogin.js","utilComp/Dummy.js","Auth/Register.js","Auth/VerifyEmail.js","Auth/ForgotPassword.js","utilComp/PrivateRoute.js","responsive/utilResponsive.js","responsive/Responsive.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","util/Color.js","util/BinSearch.js","global/requests.js","chatData/apiCalls.js","chatData/user.js","global/globalData.js","Home/chatView/chatContainer/message/NormalMessage.js","Home/chatView/chatContainer/message/StatusMessage.js","Home/chatView/chatContainer/message/Message.js","chatData/message/statusMessage.js","chatData/message/message.js","util/Event.js","chatData/chat/chat.js","chatData/chat/normalChat.js","chatData/chat/groupChat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/apiCalls.js","Home/chatView/chatContainer/MessageForm.js","Home/chatView/chatContainer/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/chatViewErrorMessages.js","Home/chatView/NormalChatView.js","utilComp/Modal.js","Home/selectUsers/UserItem.js","Home/selectUsers/UserList.js","Home/selectUsers/SelectUsers.js","Home/chatView/groupChatInfo/apiCalls.js","Home/chatView/groupChatInfo/AddUsers.js","Home/chatView/groupChatInfo/UserOptions.js","Home/chatView/groupChatInfo/ChatOptions.js","utilComp/EditableLabel.js","Home/chatView/groupChatInfo/edit/editDescription.js","Home/chatView/groupChatInfo/edit/editChatName.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/groupChatInfo/ModalRouterGroupChatInfo.js","Home/chatView/GroupChatView.js","Home/selectChat/UserItem.js","Home/selectChat/SelectChat.js","Home/newChat/apiCalls.js","Home/newChat/chooseUser/ChooseUser.js","img/placeholder.png","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/userInfoApiCalls.js","Home/userInfo/UserOptions.js","Home/userInfo/UserInfo.js","Home/settings/apiCalls.js","global/push.js","Home/settings/Permissions.js","Home/settings/Settings.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","About/About.js","global/apiCalls.js","global/authTokens.js","Auth/ResetPassword.js","App.js","global/global.js","global/initChats.js","global/chats.js","index.js"],"names":["ErrorMsg","className","this","props","children","Component","SuccessMsg","TogglePassword","state","showPassword","onClick","setState","type","login","username","password","a","config","method","headers","body","JSON","stringify","fetch","register","email","verifyEmail","verificationCode","requestPasswordResetLink","isVerificationCodeValid","setPassword","code","Login","changeHandler","event","nam","target","name","val","value","submitHandler","preventDefault","errorMessage","valConstraints","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","valResult","validate","replace","error","valid","uNameErr","pwErr","then","response","status","json","data","dispatch","setUserSelf","uid","setAuthTokens","tokens","history","push","catch","err","redirect","style","display","overflowY","maxWidth","onSubmit","htmlFor","placeholder","onChange","to","withRouter","BackToLogin","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","Register","passwordRepeat","equality","usernameTaken","accountCreated","emailSet","goToChatHome","VerifyEmail","componentDidMount","loading","success","ForgotPassword","sentMail","successMessage","PrivateRoute","component","rest","useGlobal","global","render","loaded","authTokens","pathname","referer","location","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","width","window","innerWidth","document","documentElement","clientWidth","height","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","addEventListener","removeEventListener","React","PureComponent","infoHeaderCenter","HeaderLeft","id","goBack","newMessages","HeaderCenter","ihcData","data-toggle","title","gcid","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","setTimeout","clickDocument","changeChecked","logout","deleteAuthTokens","checked","userSelf","BottomToolTip","text","placement","trigger","overlay","ChatSearchBox","searchChanged","onSearch","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","right","k","floor","i","getIndex","splice","getNearestKey","Array","makeRequest","tokensP","getGlobal","configI","getDispatch","Error","selectChats","createNormalChat","selectUser","loadMessages","UserErrorCode","chatSocket","users","get","normalChat","user","temporaryChat","createNew","doesExist","ok","userExists","blocked","User","_normalChat","_groupChats","color","groupChats","add","remove","userInfo","chats","normal","chat","blockedByOther","blockedBySelf","updateChat","r","_uid","_username","_color","globalData","fetchData","NormalMessage","msg","bySelf","userTop","UsernameSpan","MessageText","content","mDateString","linkRegex","httpRegex","getHref","word","test","words","split","map","href","rel","StatusMessage","StatusMsgContent","getStatusMessageString","Message","messageTypes","normalMessage","statusMessage","middleStringD","statusMessagesD","useReact","passiveUsers","statusMessageTypes","chatCreated","renderStringD","usersAdded","usersRemoved","usersJoined","usersLeft","usersMadeAdmin","usersRemovedAdmin","getStatusMessageStringD","middle","getMiddleString","getPassiveUsers","getTString","mid","date","Date","now","userTopShown","getMessageViewDateString","dateString","getDateString","getUserTop","isBySelf","isDateToday","getTimeString","isDateYesterday","msgString","substr","getMessageObject","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_date","_chat","_type","_content","EventHandler","events","Map","fn","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","isBlockedBySelf","isBlockedByOther","messageData","undefined","canBeShown","empty","messages","latestMsgDate","reachedTopMessages","num","getLastMsgId","getLastMessage","chatType","chatId","lastMsgId","lMessages","showUserInfoMessage","rMessages","newMsg","unreadMessages","latestMessage","getLatestMessageObject","isStillMember","lm","getFirstMessage","getChatViewMsgString","getChatViewDateString","isCurrentChat","selectNoChat","reloadMessages","selectChat","_id","_chatName","_latestMsgDate","NormalChat","_isTyping","otherUser","isTyping","_otherUser","_blockedBySelf","_blockedByOther","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","_isStillMember","TempChatLoader","_isShown","chatNow","isShown","showTempChat","updateTempChat","hideTempChat","otherUid","otherUsername","mentions","media","newChat","ncid","addChat","hide","_chatNow","ChatSocket","_userSelf","_chats","group","_finishedLoading","_temporaryChat","_initCalled","socket","removeAllListeners","disconnect","initCalled","io","connect","secure","emit","on","initChats","getChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","removedGroupChat","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","initFirstMessage","firstMessage","member","addGroupChat","_socket","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","found","tempChat","includes","ChatViewLoader","borderWidth","role","loadGroupChat","sendMessage","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","position","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","isChatSelected","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","renderDateContainer","date1","onScroll","ref","_messagesNode","TempChatContainer","show","update","AddressNotValid","CannotWriteYourself","BlockedByThisUser","UserNotExisting","NoMemberInPublicChat","NoAuthorization","ChatNotExisting","GeneralError","NormalChatView","userChanged","parseInt","getUserNormalChat","res","selectNormalChat","selectTempChat","renderLoader","isNaN","Modal","ModalHeader","ModalMain","UserItem","clicked","deselectUser","index","errorCode","lastRequest","searchResult","hasMore","loadUsers","concat","scrollParentRef","pageStart","loadMore","loader","useWindow","getScrollParent","item","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","addMembers","fetchUsersNotInGroup","leaveChat","removeSelfAdmin","AddUsers","useHistory","submitUsers","numAlreadyLoaded","search","limit","start","UserOptions","isSelfAdmin","memberSelf","isAdmin","removeMemberFromChat","makeMemberAdmin","removeMemberAdmin","isMemberSelf","ChatOptions","useLocation","console","log","EditableLabel","startEdit","isEditing","cancelEdit","submitEdit","onDoubleClick","DescriptionEdit","description","ChatNameEdit","GroupChatInfo","uidSelf","animation","alignPoint","ModalRouterGroupChatInfo","path","useRouteMatch","groupChatInfo","groupChatErrorCode","groupChatTabs","GroupChatView","loadGroupChatInfo","chatData","chatExists","selectGroupChat","reloadChatInfo","setChatUpdated","removeChatUpdated","tab","renderChat","elementClicked","SelectChat","loadChats","showOptions","showSearchBar","requestUsersNoChat","createGroupChat","fetchUsers","ChooseUser","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","options","GroupInfoForm","groupNameChanged","groupName","descriptionChanged","isPublicChanged","isPublic","formSubmitted","submitGroup","src","alt","minLength","rows","NewGroup","showEnterChatInfo","currentTab","chooseUser","NewChat","newTab","getHeader","router","fetchUserInfo","blockUser","unblockUser","onBlockedBySelfChanged","UserInfo","isBlocked","updateChatBlockInfo","setUser","groups","getUserSelf","setEmail","subscribePush","vapidPublicKey","convertedVapidKey","urlBase64ToUint8Array","navigator","serviceWorker","ready","registration","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscription","unsubscribePush","getSubscription","unsubscribe","base64String","base64","repeat","rawData","atob","outputArray","Uint8Array","charCodeAt","Permissions","setNotifications","permissions","notifications","Notification","requestPermission","permiss","setPermissions","subscribed","localStorage","setItem","permissionsString","getItem","parse","Settings","changeEmail","userDataSelf","emailTaken","emailChangeRequested","setEmailError","setEmailErrorMessage","ModalRouterBigScreens","routeProps","match","params","uidInfo","GridBigScreens","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","modal","modalInfo","init","About","reqUserSelf","addReducer","removeItem","deleteUserSelf","resetGlobal","destruct","existingTokens","ResetPassword","passwordResetSuccess","linkValid","App","useDispatch","useEffect","initAuthTokens","exact","NoMatch","chatsLoaded","element","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initChatReducers","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d04934df.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\nclass ErrorMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-danger p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\nclass SuccessMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-success p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\n\nexport {ErrorMsg,SuccessMsg};","import React,{Component} from \"react\";\n\nimport \"./TogglePassword.scss\"\n\nexport default class TogglePassword extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        }\n    }\n    render() {\n        return(\n            <div className=\"psw-group\">\n                <i className={(this.state.showPassword ? \"fa-eye-slash\" : \"fa-eye\") + \" fas psw-toggle-icon\"}\n                   onClick={() => this.setState(state => ({showPassword: !state.showPassword}))}\n                />\n                <input type={this.state.showPassword ? \"text\" : \"password\"}\n                       {...this.props}\n                />\n            </div>\n        )\n    }\n\n\n}","export const login = async (username,password) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: username,\n            password: password\n        })\n    };\n    return  await fetch('/auth/login', config);\n};\n\nexport const register = async(username,password,email) => {\n    let body;\n    if(email === '')\n        body = {\n            username: username,\n            password: password\n        };\n    else\n        body = {\n            username: username,\n            password: password,\n            email: email\n        };\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return await fetch('/auth/register', config);\n};\n\nexport const verifyEmail = async(verificationCode) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n    return await fetch('/user/verifyEmail/' + verificationCode, config);\n};\n\nexport const requestPasswordResetLink = async (username,email) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: username,\n            email: email\n        })\n    };\n    return await fetch('/pwReset/requestLink',config);\n}\n\nexport const isVerificationCodeValid = async(verificationCode) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n    return await fetch('/pwReset/isValid/' + verificationCode, config);\n};\n\nexport const setPassword = async (code,password) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            code: code,\n            password: password\n        })\n    };\n    return await fetch('/pwReset/set',config);\n}","import React,{Component} from \"reactn\";\nimport {\n    Link,\n    withRouter\n} from \"react-router-dom\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport TogglePassword from \"./TogglePassword\";\nimport {login} from \"./apiCalls\";\n\nclass Login extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            password: '',\n            redirect: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\"){\n\n            let errorMessage;\n\n            if(typeof(valResult.username) != \"undefined\") {\n                errorMessage = valResult.username[0];\n            }else if(typeof(valResult.password) != \"undefined\") {\n                errorMessage = valResult.password[0];\n            }\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: ''\n            });\n           /*\n                request to server\n            */\n           login(this.state.username,this.state.password)\n               .then(async response => {\n                   // success\n                   if(response.status === 200){\n                       const data = await response.json();\n                       await this.dispatch.setUserSelf(data.uid,this.state.username);\n                       // set auth tokens\n                       await this.dispatch.setAuthTokens(data.tokens);\n                       // go to chat home\n                       this.props.history.push('/chat');\n                   // wrong password\n                   }else if(response.status === 403){\n                       this.setState({\n                           error: true,\n                           errorMessage: 'Falsches Passwort!'\n                       });\n                   // user does not exit\n                   }else if(response.status === 404){\n                       this.setState({\n                           error: true,\n                           errorMessage: 'Falscher Benutzername E-Mail Addresse'\n                       });\n                   }else {\n                       this.setState({\n                           error: true,\n                           errorMessage: 'ein Fehler ist aufgetreten'\n                       });\n                   }\n               })\n               .catch(err => {\n                   this.setState({\n                       error: true,\n                       errorMessage: 'ein Fehler ist aufgetreten'\n                   });\n               });\n        }\n\n    };\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return(\n            <div className=\"h-100\" style={{display: \"flex\",overflowY: \"auto\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Login</h1>\n                        {this.errorMessage()}\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                <TogglePassword\n                                       name=\"password\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\n                            </div>\n                            <div className=\"form-group\">\n                                Passwort vergessen? <Link to=\"/forgotPassword\">Jetzt zurücksetzen</Link>\n                            </div>\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Login\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./BackToLogin.scss\";\n\nexport default function BackToLogin(){\n    return(\n        <h5 className={\"back-to-login\"}>\n            <Link to={\"/login\"}>\n                <i className=\"fas fa-arrow-left\"/>\n                &nbsp;\n                zurück zu login\n            </Link>\n        </h5>\n    )\n}","import {Component} from \"react\";\n\nexport default class Dummy extends Component {\n\n    componentDidMount() {\n        if(typeof(this.props.didMount) === 'function')\n            this.props.didMount();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(typeof(this.props.didUpdate) === 'function')\n            this.props.didUpdate();\n    }\n\n    render() {\n        if(this.props.children)\n            return this.props.children;\n        return null;\n    }\n}","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {ErrorMsg, SuccessMsg} from \"./MsgBox\";\nimport {withRouter} from \"react-router-dom\";\nimport TogglePassword from \"./TogglePassword\";\nimport {register} from \"./apiCalls\";\nimport BackToLogin from \"./BackToLogin\";\nimport Dummy from \"../utilComp/Dummy\";\n\nclass Register extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            email: '',\n            password: '',\n            passwordRepeat: '',\n            redirect: false,\n            emailSet: false,\n            accountCreated: false\n        }\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password,\n            passwordRepeat: this.state.passwordRepeat\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\"){\n\n            let errorMessage;\n\n            if(typeof(valResult.username) != \"undefined\") {\n                errorMessage = valResult.username[0];\n            }else if(typeof(valResult.password) != \"undefined\") {\n                errorMessage = valResult.password[0];\n            }else if(typeof(valResult.passwordRepeat)!=\"undefined\") {\n                errorMessage = \"Passwörter stimmen nicht überein!\"\n            }\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n\n        }else {\n            this.setState({\n                error: false,\n                errorMessage: ''\n            });\n            /*\n                request to server\n             */\n            register(this.state.username,this.state.password,this.state.email)\n                .then(async response => {\n                    if(response.status === 200){\n\n                        const data = await response.json();\n                        // if username taken --> show error message\n                        if(data.usernameTaken){\n                            this.setState({\n                                error: true,\n                                errorMessage: 'Benutzername bereits vergeben'\n                            });\n                        }else{\n                            await this.dispatch.setUserSelf(data.uid,this.state.username);\n                            // set auth tokens\n                            await this.dispatch.setAuthTokens(data.tokens);\n                            // account created\n                            this.setState({\n                                accountCreated: true,\n                                emailSet: this.state.email !== ''\n                            })\n                        }\n                    }else {\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                    }\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    };\n    goToChatHome = () => {\n        // go to chat home\n        this.props.history.push('/chat');\n    }\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return (\n            <div className=\"h-100\" style={{display: \"flex\",overflowY: \"auto\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <BackToLogin/>\n                        {!this.state.accountCreated ?\n                            <Dummy>\n                                <h1>Registrieren</h1>\n                                {this.errorMessage()}\n                                <form onSubmit={this.submitHandler}>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"username\">Benutzername: *</label>\n                                        <input type=\"text\"\n                                               name=\"username\"\n                                               className=\"form-control\"\n                                               placeholder=\"Benutzernamen eingeben\"\n                                               onChange={this.changeHandler}\n                                        />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">E-Mail Addresse: (nicht verpflichtend)</label>\n                                        <input type=\"email\"\n                                               name=\"email\"\n                                               className=\"form-control\"\n                                               placeholder=\"E-Mail Addresse eingeben\"\n                                               onChange={this.changeHandler}\n                                        />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"password\">Passwort: *</label>\n                                        <TogglePassword\n                                               name=\"password\"\n                                               className=\"form-control\"\n                                               placeholder=\"Passwort eingeben\"\n                                               onChange={this.changeHandler}\n                                        />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"passwordRepeat\">Passwort wiederholen: *</label>\n                                        <TogglePassword\n                                            name=\"passwordRepeat\"\n                                            className=\"form-control\"\n                                            placeholder=\"Passwort eingeben\"\n                                            onChange={this.changeHandler}\n                                        />\n                                    </div>\n                                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\n                                </form>\n                            </Dummy>\n                            :\n                            <Dummy>\n                                <SuccessMsg>\n                                    Benutzer {this.state.username} wurde erfolgreich angelegt\n                                    {this.state.emailSet ?\n                                        <Dummy>\n                                            <br/>\n                                            E-Mail mit Verifizierungslink wurde versendet!\n                                        </Dummy>\n                                        : null\n                                    }\n                                </SuccessMsg>\n                                <button\n                                    className=\"btn btn-primary\"\n                                    onClick={this.goToChatHome}\n                                >\n                                    weiter\n                                </button>\n                            </Dummy>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Register);","import React,{Component} from \"reactn\";\nimport {verifyEmail} from \"./apiCalls\";\nimport \"./VerifyEmail.scss\";\n\nexport default class VerifyEmail extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            error: false,\n            success: false\n        }\n    }\n\n    render(){\n        if(this.state.loading){\n            return null;\n        } else if(this.state.error){\n            return(\n                <div className=\"h-100 verifyEmail error\">\n                    <h3>\n                        Fehler!\n                    </h3>\n                </div>\n            )\n        } else if(!this.state.success){\n            return(\n                <div className=\"h-100 verifyEmail\">\n                    <h3>\n                        Ungültiger Verifizierungscode!\n                    </h3>\n                </div>\n            )\n        } else{\n            return(\n                <div className=\"h-100 verifyEmail\">\n                    <h3>\n                    E-Mail Addresse erfolgreich verifiziert!\n                    </h3>\n                </div>\n            )\n        }\n    }\n\n    componentDidMount = () => {\n        verifyEmail(this.props.verificationCode)\n            .then(response => {\n                this.setState({\n                    loading: false,\n                    success: response.status === 200\n                });\n            })\n            .catch(err => {\n                this.setState({\n                    loading: false,\n                    error: true\n                });\n            });\n    }\n}","import React,{Component} from \"reactn\";\nimport {requestPasswordResetLink} from \"./apiCalls\";\nimport {ErrorMsg, SuccessMsg} from \"./MsgBox\";\nimport validate from \"validate.js\";\nimport BackToLogin from \"./BackToLogin\";\n\nexport default class ForgotPassword extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            email: '',\n            sentMail: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            email: {\n                presence: true,\n                length: {\n                    minimum: 1,\n                    tooShort: 'E-Mail Addresse benötigt'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            email: this.state.email\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\") {\n\n            let errorMessage;\n\n            if (typeof (valResult.username) != \"undefined\")\n                errorMessage = valResult.username[0];\n            else if (typeof (valResult.email) != \"undefined\")\n                errorMessage = valResult.email[0];\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Email \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n        }else {\n\n            const {username, email} = this.state;\n\n            requestPasswordResetLink(username, email)\n                .then(response => {\n                    if (response.status === 200)\n                        this.setState({\n                            error: false,\n                            sentMail: true\n                        });\n                    else if(response.status === 404)\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Dieser Benutzer scheint nicht zu existieren'\n                        })\n                    else\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    }\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n    successMessage = () => {\n        if(this.state.sentMail)\n            return (\n                <SuccessMsg>\n                    E-Mail zum zurücksetzen des Passwortes wurde versendet!\n                </SuccessMsg>\n            )\n    }\n    render() {\n        return (\n            <div className=\"h-100\" style={{display: \"flex\",overflowY: \"auto\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <BackToLogin/>\n                        <h1>Passwort zurücksetzen</h1>\n                        {this.errorMessage()}\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">E-Mail Addresse:</label>\n                                <input type=\"email\"\n                                       name=\"email\"\n                                       className=\"form-control\"\n                                       placeholder=\"E-Mail Addresse eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            {this.successMessage()}\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Passwort zurücksetzen\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport {useGlobal} from \"reactn\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n    const [global,setGlobal] = useGlobal();\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                global.loaded ? (\n                    global.authTokens ?\n                    (\n                        <Component {...props} />\n                    )\n                    : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    referer: props.location\n                                }\n                            }}\n                        />\n                    )\n                ) : null\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\n\nexport const DeviceWidthObject = {\n\n    MobileSmall      : { max: 320, min: 0 },\n    MobileMedium     : { max: 375, min: 321 },\n    MobileLarge      : { max: 767, min: 376 },\n\n    Tablet           : { max: 991, min: 768 },\n\n    LaptopSmall      : { max: 1024, min: 992 },\n    LaptopLarge      : { max: 1440, min: 1025 },\n\n    LargerThanLaptop : { max: 2560, min: 1441 },\n    LargeScreenMax   : { max: 999999, min: 2561 }\n\n};\n\nexport const IdDeviceBreakpointsByWidth = {\n\n    laptop_max : 1440,\n    laptop_min : 992,\n    tablet_min : 768,\n    tablet_max : 991,\n    mobile_max : 767,\n    default_min : 768 // Unrecognized device\n};\n\nexport const IdMobileHeight = {\n    mobileLandscape_min : 320,\n    mobileLandscape_max : 425\n};\n\nexport const getWindowDimension = () => {\n\n    const width = window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth;\n\n    const height = window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n\n    return {width, height}\n\n};\n\nexport const getDeviceTypeInfo = () => {\n    const { width, height } = getWindowDimension();\n    const buildDeviceDetails = {\n        deviceType: '',\n        deviceTypeVariant: '',\n        orientation: 'Portrait',\n        width,\n        height,\n        isFallback: false\n    };\n//  Edge case\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\n    if (hasEdgeCase) {\n        return hasEdgeCase\n    }\n    if (height < width) {\n        // Orientation is landscape\n        buildDeviceDetails.orientation = 'Landscape';\n\n        if (height <= IdMobileHeight.mobileLandscape_max) {\n            // Mobile (landscape)\n            buildDeviceDetails.deviceType = 'Mobile';\n            for (const devc in DeviceWidthObject) {\n                if (\n                    height <= DeviceWidthObject[devc].max &&\n                    height >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            // Tablet (landscape)\n            buildDeviceDetails.deviceType = 'Tablet';\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            // Laptop (landscape)\n            buildDeviceDetails.deviceType = 'Laptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            // Larger than Laptop (landscape)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc\n                    break\n                }\n            }\n        } else {\n\n            buildDeviceDetails.deviceType = 'Mobile';\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\n            buildDeviceDetails.isFallback = true\n        }\n\n        return buildDeviceDetails\n    } else {\n        // Orientation is portrait\n        buildDeviceDetails.orientation = 'Portrait';\n\n        for (const devc in DeviceWidthObject) {\n            if (\n                width <= DeviceWidthObject[devc].max &&\n                width >= DeviceWidthObject[devc].min\n            ) {\n                buildDeviceDetails.deviceTypeVariant = devc;\n                break\n            }\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            buildDeviceDetails.deviceType = 'Laptop'\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            buildDeviceDetails.deviceType = 'Tablet'\n        }\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\n            buildDeviceDetails.deviceType = 'Mobile'\n        }\n\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n        }\n\n        return buildDeviceDetails\n    }\n};\n\nconst handleExceptions = (buildDeviceDetails, width, height) => {\n    //  iPadPro\n    if (width === 1024 && height === 1366) {\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Portrait';\n\n        return buildDeviceDetails\n    } else if (width === 1366 && height === 1024) {\n        //  Edge case\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Landscape';\n\n        return buildDeviceDetails\n    }\n\n    return undefined\n};","import React from 'react'\nimport {\n    getWindowDimension,\n    IdDeviceBreakpointsByWidth,\n    IdMobileHeight\n} from './utilResponsive';\n\nconst { width, height } = getWindowDimension();\nconst initialState = { width, height };\n\nexport default class Responsive extends React.PureComponent {\n\n    state = initialState;\n    componentDidMount () {\n        window.addEventListener('resize', this.handleResize, false)\n    }\n    componentWillUnmount () {\n        window.removeEventListener('resize', this.handleResize, false)\n    }\n    render = () => {\n        const { children, displayIn } = this.props;\n        const { width, height } = this.state;\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\n        return (\n            <React.Fragment>\n                {shouldRenderChildren ? children : null}\n            </React.Fragment>\n        )\n    };\n    handleResize = () => {\n        const { width, height } = getWindowDimension();\n        this.setState({ width, height })\n    };\n    shouldRender = (display, width, height) => {\n        if (\n            display.indexOf('Laptop') !== -1 &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('Tablet') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\n        ) {\n            return true\n        }\n        // For mobile regardless of orientation\n        if (\n            display.indexOf('Mobile') !== -1 &&\n            width <= IdDeviceBreakpointsByWidth.mobile_max\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('MobilePortrait') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height >= IdMobileHeight.mobileLandscape_max)\n        ) {\n            return true\n        }    return !!(\n            display.indexOf('MobileLandScape') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height <= IdMobileHeight.mobileLandscape_min)\n        )\n    }\n}","import React,{Component} from \"reactn\";\nimport Responsive from \"../../responsive/Responsive\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport \"./headerLeft.scss\";\n\nexport const infoHeaderCenter = {\n    none: 0,\n    normalChat: 1,\n    groupChat: 2\n};\n\nclass HeaderLeft extends Component{\n\n    render() {\n\n        const {pathname} = this.props.location;\n        /*\n            renders number of new messages\n         */\n        const renderNewMsgNumber = () => {\n            if(this.global.newMessages > 0){\n                return (\n                    <div className=\"btnBack-number\">\n                        {this.global.newMessages}\n                    </div>\n                )\n            }\n            return null;\n        };\n\n        const renderBtnBack = () => {\n            /*\n                only small screens\n             */\n            return (\n                <div className=\"float-left left\">\n                    <i id=\"btnBackToChatList\"\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\n                       onClick={() => {this.props.history.goBack()}}\n                    />\n                    {renderNewMsgNumber()}\n                </div>\n            );\n        };\n\n        const renderChatInfo = () => {\n            /*\n                if there is a normal chat open, this info gets displayed\n             */\n            switch(this.global.infoHeaderCenter){\n\n                case infoHeaderCenter.normalChat:\n                    return (\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                case infoHeaderCenter.groupChat:\n                    return(\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                default:\n                    return(\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\n                        </Responsive>\n                    );\n            }\n        };\n\n        return(\n            <Dummy>\n                <Responsive displayIn={[\"Mobile\"]}>\n                    {renderBtnBack()}\n                </Responsive>\n                {renderChatInfo()}\n            </Dummy>\n        )\n    }\n}\nexport default withRouter(HeaderLeft);\n\nfunction HeaderCenter(props){\n    return(\n        <div id=\"chat-info\" className=\"center pt-2\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"reactn\";\nimport HeaderLeft from \"./HeaderLeft\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Tooltip from \"rc-tooltip\";\n\nimport 'rc-tooltip/assets/bootstrap_white.css';\n\nimport './header.scss';\n\nclass Header extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checkBoxClicked: false\n        };\n    }\n    clickCheckBox = event => {\n        if(this.state.checkBoxClicked)\n            event.stopPropagation();\n        else {\n            setTimeout(() => {\n                this.setState(state => ({\n                    checkBoxClicked: true\n                }));\n            }, 20);\n        }\n    };\n    clickDocument = event => {\n        if (this.state.checkBoxClicked)\n            this.changeChecked(event);\n    };\n    changeChecked = event => {\n        this.setState(state => ({\n            checkBoxClicked: !state.checkBoxClicked\n        }));\n    };\n\n    logout = () => {\n        /*\n            authTokens are deleted\n         */\n        this.dispatch.deleteAuthTokens();\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"c-header\">\n\n                <HeaderLeft />\n\n                <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\n\n                    <div className=\"right-l\" />\n\n                    <input type=\"checkbox\"\n                           id=\"btnControlTopRight\"\n                           className=\"btnControl\"\n                           checked={this.state.checkBoxClicked}\n                           onChange={this.changeChecked}\n                    />\n                    <label htmlFor=\"btnControlTopRight\">\n\n                        <div className=\"right-c\">\n                            <div className=\"d-only-when-small\">\n                                <i  id=\"user-info\"\n                                    className=\"fas fa-user fa-2x user-icon\"\n                                    data-toggle=\"tooltip\"\n                                    title=\"Benutzer-Info\"\n                                />\n                            </div>\n                            <div className=\"d-only-when-big top-2right\">\n\n                                <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\n                                    <BottomToolTip text=\"Benutzer-Info\">\n                                        <h4 id=\"username\"\n                                            className=\"p-2 username\"\n                                        >\n                                                {this.global.userSelf.username}\n                                        </h4>\n                                    </BottomToolTip>\n                                </Link>\n                                <div className=\"float-right\">\n                                    <Link to={pathname + \"/settings\"}>\n                                        <BottomToolTip text=\"Einstellungen\">\n                                            <i className=\"fas fa-user-cog fa-2x\"/>\n                                        </BottomToolTip>\n                                    </Link>\n                                    &nbsp;\n                                    <BottomToolTip text=\"logout\">\n                                        <i id=\"user-logout\"\n                                           className=\"fas fa-sign-out-alt fa-2x logout\"\n                                           onClick={this.logout}\n                                        />\n                                    </BottomToolTip>\n                                </div>\n\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        document.addEventListener('click',this.clickDocument,false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click',this.clickDocument,false);\n    }\n}\n\nfunction BottomToolTip(props){\n    return(\n        <Tooltip placement=\"bottom\"\n                 trigger={['hover']}\n                 overlay={\n                     <span>{props.text}</span>\n                 }>\n            {props.children}\n        </Tooltip>\n    )\n}\nexport default withRouter(Header);","import React,{Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\n\nimport \"./chatSearchBox.scss\";\n\nclass ChatSearchBox extends Component{\n\n    searchChanged = event => {\n        this.props.onSearch(event.target.value);\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"chatSearchBox\">\n                <div className=\"chat-select-form\">\n                    <input\n                        type=\"text\"\n                        name=\"chat-search\"\n                        className=\"chat-search\"\n                        placeholder=\"Chat suchen\"\n                        onChange={this.searchChanged}\n                    />\n                    <Link to={pathname + \"/newChat\"}>\n                        <button id=\"btn-newChat\"\n                                className=\"btn-newChat\"\n                        >\n                            <i className=\"fas fa-plus fa-lg\" />\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(ChatSearchBox);","let Colors = {};\nColors.names = {\n    aqua: \"#00ffff\",\n    black: \"#000000\",\n    blue: \"#0000ff\",\n    brown: \"#a52a2a\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgrey: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    fuchsia: \"#ff00ff\",\n    gold: \"#ffd700\",\n    green: \"#008000\",\n    indigo: \"#4b0082\",\n    khaki: \"#f0e68c\",\n    lightblue: \"#add8e6\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lime: \"#00ff00\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    navy: \"#000080\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    pink: \"#ffc0cb\",\n    purple: \"#800080\",\n    violet: \"#800080\",\n    red: \"#ff0000\",\n    silver: \"#c0c0c0\"\n};\nColors.random = function() {\n    let result;\n    let count = 0;\n    for (let prop in this.names)\n        if (Math.random() < 1/++count)\n            result = prop;\n    return result;\n};\nexport default Colors;","\nexport default class BinSearchArray extends Array{\n\n    getIndex(key){\n\n        let left = 0;\n        let right = this.length-1;\n\n        while(left<=right){\n            let k= Math.floor((left+right)/2);\n            if(this[k].key === key)\n                return k;\n            else if(this[k].key < key)\n                left = k+1;\n            else //a[k]>v\n                right = k-1;\n        }\n        return -1;\n    }\n\n    getNearestKey(key){\n        /*\n            besseren Algorithmus finden\n         */\n        let i;\n        ++key;\n\n        while((i = this.getIndex(--key)) === -1){\n            /*\n                wenn key 0 ist, wird vorne eingefügt\n             */\n            if(key === 0) return -1;\n        }\n\n        return i;\n    }\n\n    get(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            return this[i].value;\n\n        return undefined;\n    }\n\n    add(key,value){\n        /*\n            key darf noch nicht vorhanden sein\n         */\n        if(this.getIndex(key) === -1) {\n\n            this.splice(this.getNearestKey(key) + 1, 0, {\n                key: key,\n                value: value\n            });\n        }\n    }\n\n    remove(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            this.splice(i,1);\n    }\n}","import {getGlobal,getDispatch} from 'reactn';\n\nexport async function makeRequest(target,config,tokensP){\n    /*\n        if parameter tokens is defined, this is taken\n        else the one from global\n     */\n    const tokens = tokensP ? tokensP : getGlobal().authTokens;\n\n    const configI = {\n        ...config,\n        method: config.method,\n        headers: {\n            ...config.headers,\n            /*\n                jwt\n             */\n            'Authorization': tokens\n        }\n    };\n\n    const response = await fetch(target,configI);\n    /*\n        http-status 401: jwt timeout\n     */\n    if(response.status === 401){\n        /*\n            autToken is deleted\n         */\n        getDispatch().deleteAuthTokens();\n        /*\n            error is thrown\n         */\n        throw new Error('jwt expired');\n    }\n    return response;\n}","import {makeRequest} from \"../global/requests\";\n\nexport async function selectChats(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    /*\n        chats are requested\n     */\n    return await makeRequest('/chats', config);\n}\nexport async function createNormalChat(body){\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/user/chat', config);\n}\nexport async function selectUser(uid){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/user/' + uid, config);\n}\nexport async function loadMessages(body){\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message/load', config);\n}","import Colors from \"../util/Color\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport chatSocket from \"./chatSocket\";\nimport {selectUser} from \"./apiCalls\";\nimport {getDispatch} from 'reactn';\n\nexport const UserErrorCode = {\n    none: 0,\n    nan: 1,\n    tempChat: 2,\n    userNotExisting: 3,\n    blocked: 4,\n    isSelf: 5,\n    error: 6\n};\n\nexport async function getUserNormalChat(uid){\n    /*\n        does the user exist & does normal chat exist\n     */\n    if(chatSocket.users.getIndex(uid) !== -1){\n        /*\n            does a normalChat exist at the user\n         */\n        if(chatSocket.users.get(uid).normalChat !== 0) {\n\n            return UserErrorCode.none;\n        }else{\n            /*\n                chat does not exist in server\n                it gets created\n             */\n            const user = chatSocket.users.get(uid);\n            chatSocket.temporaryChat.createNew(uid,user.username);\n\n            return UserErrorCode.tempChat;\n        }\n        /*\n            does there exist a temporary chat with this user\n        */\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\n        /*\n            user and chat does not exist in server\n         */\n        return UserErrorCode.tempChat;\n\n    }else{\n        /*\n            request user from server\n         */\n        try {\n            const response = await selectUser(uid);\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok) {\n\n                const data = await response.json();\n\n                if(data.userExists && !data.blocked) {\n\n                    chatSocket.temporaryChat.createNew(uid,data.username);\n                    return UserErrorCode.tempChat;\n\n                }else{\n\n                    if(!data.userExists)\n\n                        return UserErrorCode.userNotExisting;\n\n                    else\n\n                        return UserErrorCode.blocked;\n                }\n\n            }else\n                return UserErrorCode.error;\n\n        }catch(error){\n            return UserErrorCode.error;\n        }\n    }\n}\n\nexport default class User{\n\n    _uid;\n    _username;\n    _color;\n    //ids der chats des Users\n    _normalChat = 0;\n    //ids of the groupchats\n    _groupChats = new BinSearchArray();\n\n    constructor(uid,username) {\n        this.uid = uid;\n        this.username = username;\n        this.color = Colors.random();\n    }\n    /*\n        groupChat is added\n     */\n    addGroupChat(gcid){\n        this.groupChats.add(gcid,gcid);\n    }\n\n    removeGroupChat(gcid){\n        this.groupChats.remove(gcid);\n    }\n\n    updateChatBlockInfo(userInfo){\n        const index = chatSocket.chats.normal.getIndex(this.normalChat);\n        if(index !== -1) {\n            const chat = chatSocket.chats.normal.get(this.normalChat);\n            chat.blockedByOther = userInfo.blockedByOther;\n            chat.blockedBySelf = userInfo.blockedBySelf;\n            getDispatch().updateChat(chat).then(r => {});\n        }\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get username() {\n        return this._username;\n    }\n\n    set username(value) {\n        this._username = value;\n    }\n\n    get color() {\n        return this._color;\n    }\n\n    set color(value) {\n        this._color = value;\n    }\n\n    get normalChat() {\n        return this._normalChat;\n    }\n\n    set normalChat(value) {\n        this._normalChat = value;\n    }\n\n    get groupChats() {\n        return this._groupChats;\n    }\n\n    set groupChats(value) {\n        this._groupChats = value;\n    }\n}","\nexport let globalData = {};\n\n/*\n    is called in isLoggedIn in App.js\n */\nexport async function fetchData(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await fetch('/data.json', config);\n\n    if(response.ok){\n\n        globalData = await response.json();\n    }else{\n        throw new Error();\n    }\n}","import React from \"react\";\nimport {UsernameSpan} from \"./Message\";\n\nexport default function NormalMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            {msg.userTop ?\n                <div className=\"w-100\">\n                    <strong className=\"header\">\n                        <UsernameSpan user={msg.userTop}/>\n                    </strong>\n                </div>\n                : null}\n            <div className=\"content\">\n                <MessageText\n                    text={msg.content.text}\n                />\n            </div>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    )\n}\nfunction MessageText(props){\n\n    const linkRegex = new RegExp(/(\\b(?:https?:\\/\\/)?(?:(?:[a-z]+\\.)+)[^\\s,]+\\b)/g)\n    const httpRegex = new RegExp(/(https?:\\/\\/)/igm);\n\n    function getHref(word){\n        if(httpRegex.test(word))\n            return word;\n        else {\n            return \"https://\" + word\n        }\n    }\n    // split text\n    const words = props.text.split(linkRegex)\n\n    return (\n        <p>\n            {words.map((word) => {\n                if(linkRegex.test(word))\n                    return <a href={getHref(word)} target={\"_blank\"} rel={\"noreferrer\"}>{word}</a>\n                else\n                    return word\n            })}\n        </p>\n    )\n}","import React from \"react\";\nimport Dummy from \"../../../../utilComp/Dummy\";\nimport {getStatusMessageString} from \"../../../../chatData/message/statusMessage\";\n\nexport default function StatusMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            <StatusMsgContent msg={msg}/>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    );\n}\nfunction StatusMsgContent(props) {\n\n    const msg = props.msg;\n\n    return(\n        <Dummy>\n            {getStatusMessageString(msg,true)}\n        </Dummy>\n    );\n}","import React from \"react\";\nimport {globalData} from \"../../../../global/globalData\";\nimport NormalMessage from \"./NormalMessage\";\nimport StatusMessage from \"./StatusMessage\";\nimport Colors from \"../../../../util/Color\";\n\nimport './message.scss'\n\nexport default function Message(props){\n\n    const msg = props.msg;\n\n    switch (msg.type) {\n\n        case globalData.messageTypes.normalMessage: {\n\n            return (\n                <NormalMessage msg={msg}/>\n            )\n        }\n\n        case globalData.messageTypes.statusMessage: {\n\n            return (\n                <StatusMessage msg={msg}/>\n            );\n        }\n\n        default:\n            return <span />;\n    }\n}\n\nexport function UsernameSpan(props){\n\n    return(\n        <span\n            style={{\n                color: Colors.names[props.user.color]\n            }}>\n                {props.user.username}\n        </span>\n    );\n}","import {UsernameSpan} from \"../../Home/chatView/chatContainer/message/Message\";\nimport {globalData} from \"../../global/globalData\";\nimport React from \"react\";\nimport chatSocket from \"../chatSocket\";\n\nexport const middleStringD = {\n    hatHast: 0,\n    ist: 1\n};\n\nexport const statusMessagesD = [\n    \"den chat erstellt\",\n    \"hinzugefügt\",\n    \"entfernt\",\n    \"dem chat beigetreten\",\n    \"den chat verlassen\",\n    \"zum Admin gemacht\",\n    \"nicht mehr Admin\"\n];\n\nexport function getStatusMessageString(msg,useReact){\n\n    return getStatusMessageStringD();\n\n    function getStatusMessageStringD() {\n\n        const userTop = msg.userTop;\n        const passiveUsers = msg.content.passiveUsers;\n\n        switch (msg.content.type) {\n\n            case globalData.statusMessageTypes.chatCreated:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.chatCreated\n                );\n\n            case globalData.statusMessageTypes.usersAdded:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersAdded\n                );\n\n            case globalData.statusMessageTypes.usersRemoved:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersRemoved\n                );\n\n            case globalData.statusMessageTypes.usersJoined:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersJoined\n                );\n\n            case globalData.statusMessageTypes.usersLeft:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    [],\n                    globalData.statusMessageTypes.usersLeft\n                );\n\n            case globalData.statusMessageTypes.usersMadeAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersMadeAdmin\n                );\n\n            case globalData.statusMessageTypes.usersRemovedAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersRemovedAdmin\n                );\n\n            default:\n                break;\n        }\n    }\n\n    function renderStringD(userTop,middle,passiveUsers,statusMessage){\n\n        function getMiddleString(){\n\n            // eslint-disable-next-line default-case\n            switch (middle) {\n\n                case middleStringD.hatHast:\n                    return msg.bySelf ? \" hast \" : \" hat \";\n\n                case middleStringD.ist:\n                    return ' ist';\n            }\n        }\n\n        function getPassiveUsers(){\n\n            if(passiveUsers.length < 1 ){\n                return \"\";\n            }else if(passiveUsers.length === 1){\n\n                const user = chatSocket.users.get(passiveUsers[0]);\n\n                if(user)\n                    if(useReact)\n                        return(\n                            <UsernameSpan user={user}/>\n                        );\n                    else\n                        return user.username;\n                else\n                    return \"1 Benutzer\";\n\n            }else{\n                return passiveUsers.length + \" Benutzer\";\n            }\n        }\n\n        function getTString(){\n            return \" \" + statusMessagesD[statusMessage];\n        }\n\n        if(useReact)\n            return(\n                <span>\n                    <UsernameSpan user={msg.userTop}/>\n                    {getMiddleString()}\n                    {getPassiveUsers()}\n                    {getTString()}\n                </span>\n            );\n        else\n            return msg.userTop.username + getMiddleString() + getPassiveUsers() + getTString();\n    }\n\n}","import chatSocket from \"../chatSocket\";\nimport {globalData} from \"../../global/globalData\";\nimport {getStatusMessageString} from \"./statusMessage\";\n\nexport function isDifferentDay(date1,date2){\n    return date1.getDay() !== date2.getDay()\n        || date1.getMonth() !== date2.getMonth()\n        || date1.getFullYear() !== date2.getFullYear();\n}\n\nexport default class Message {\n\n    _mid;\n    _uid;\n    _date;\n    _chat;\n    _type;\n    _content;\n\n    constructor(\n        mid,\n        uid,\n        chat,\n        date = new Date(Date.now()),\n        type,\n        content\n    ) {\n        this.mid = mid;\n        this.uid = uid;\n        this.date = date;\n        //type: object of Chat\n        this.chat = chat;\n        this.type = type;\n        this.content = content;\n    }\n    /*\n        a object representing the message is returned\n     */\n    getMessageObject(userTopShown){\n\n        const message = {\n            mDateString: this.getMessageViewDateString(),\n            dateString: this.getDateString(),\n            date: this.date,\n            bySelf: this.uid === chatSocket.userSelf.uid,\n            type: this.type,\n            content: this.content\n        };\n        /*\n            if the user top should be shown, the property is added\n         */\n        if(userTopShown)\n            message.userTop = this.getUserTop();\n\n        return message;\n    }\n    /*\n        a object for the userinfo at the top of the message is returned\n     */\n    getUserTop(){\n        /*\n            is the message written by the user self?\n         */\n        if(this.isBySelf())\n            return {\n                uid: this.uid,\n                username: 'Du',\n                color: chatSocket.userSelf.color\n            };\n        /*\n            if the user is not self\n         */\n        const user = chatSocket.users.get(this.uid);\n        return {\n            uid: this.uid,\n            username: user.username,\n            color: user.color\n        };\n    }\n    /*\n        is the message by the client self?\n     */\n    isBySelf(){\n        return this.uid === chatSocket.userSelf.uid;\n    }\n\n    getChatViewDateString(){\n        /*\n            Wenn weniger als 1 Tag her: Uhrzeit\n         */\n        if(this.isDateToday()){\n\n            return 'heute ' + this.getTimeString();\n        }\n        /*\n            Wenn gestern: gestern\n         */\n        else if(this.isDateYesterday()){\n\n            return 'gestern';\n        }\n        /*\n            sonst: Datum\n         */\n        else{\n            return this.getDateString();\n        }\n    }\n\n    getChatViewMsgString(){\n\n        // eslint-disable-next-line default-case\n        switch(this.type) {\n\n            case globalData.messageTypes.normalMessage: {\n\n                let msgString = this.content.text;\n                /*\n                    Wenn string länger als 18 Zeichen, wird verkürzt\n                 */\n                if(msgString.length > 18)\n                msgString = msgString.substr(0, 18) + '...';\n                /*\n                    wenn selbst geschrieben, steht Du: davor\n                 */\n                if(this.uid === chatSocket.userSelf.uid)\n                    return`Du: ${msgString}`;\n\n                else if (this.chat.type === 'normalchat')\n                    return this.content.text;\n\n                else\n                    return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\n            }\n            case globalData.messageTypes.statusMessage: {\n\n                return getStatusMessageString(\n                    this.getMessageObject(true),\n                    false\n                );\n            }\n        }\n    }\n\n    getMessageViewDateString(){\n        if(this.isDateToday()){\n\n            return this.getTimeString();\n        }\n        else if(this.isDateYesterday()){\n\n            return 'gestern ' + this.getTimeString();\n        }else{\n\n            return this.getDateString() + ' ' + this.getTimeString();\n        }\n    }\n\n    isDateToday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    isDateYesterday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() - 1 &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    getDateString(){\n        const d = this.date.getDate();\n        let ds;\n        if(d<10)\n            ds = '0'+d;\n        else\n            ds = d;\n        const m = this.date.getMonth();\n        let ms;\n        if(m+1<10)\n            ms = '0'+(m+1);\n        else\n            ms = m+1;\n        const y = this.date.getFullYear();\n\n        return `${ds}.${ms}.${y}`;\n    }\n\n    getTimeString(){\n        const h = this.date.getHours();\n        let hs;\n        if(h<10)\n            hs = '0'+h;\n        else\n            hs = h;\n        const m = this.date.getMinutes();\n        let ms;\n        if(m<10)\n            ms = '0'+m;\n        else\n            ms = m;\n\n        return `${hs}:${ms}`;\n    }\n    /*\n        es wird überprüft, ob date2 an einem anderen Tag war\n     */\n    isDifferentDay(date2){\n        return this.date.getDay() !== date2.getDay()\n            || this.date.getMonth() !== date2.getMonth()\n            || this.date.getFullYear() !== date2.getFullYear();\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    set mid(value) {\n        this._mid = value;\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(value) {\n        this._date = value;\n    }\n\n    get chat() {\n        return this._chat;\n    }\n\n    set chat(value) {\n        this._chat = value;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(value) {\n        this._content = value;\n    }\n}","export default class EventHandler{\n\n    _events;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    /*\n        event-handler wird hinzugefügt\n     */\n    on(event,fn){\n        /*\n            wenn event in Map vorhanden, wird event hinzugefügt\n         */\n        if(this.events.has(event))\n            this.events.get(event).push(fn);\n        /*\n            wenn event in map noch nicht vorhanden,\n            wird entry in map hinzugefügt\n         */\n        else\n            this.events.set(event,[fn]);\n    }\n    /*\n        event-handler wird entfernt\n     */\n    rm(event,fn){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            const e = this.events.get(event)\n            for(let i=0;i<e.length;i++)\n                //wenn element die gesuchte function, wird sie gelöscht\n                if(e[i] === fn)\n                    e.splice(i,1);\n        }\n    }\n    /*\n        alle registrierten functions eines events werden ausgelöst\n     */\n    trigger(event,...rest){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            /*\n                es werden alle functions aufgerufen\n             */\n            const e = this.events.get(event)\n            for(let i = 0;i < e.length;i++)\n                e[i](...rest);\n        }\n    }\n\n    get events() {\n        return this._events;\n    }\n\n    set events(value) {\n        this._events = value;\n    }\n}","import BinSearchArray from \"../../util/BinSearch\";\nimport Message from \"../message/message\";\nimport EventHandler from \"../../util/Event\";\nimport {getDispatch} from 'reactn';\nimport {loadMessages} from \"../apiCalls\";\nimport chatSocket from \"../chatSocket\";\n\nexport class Chat {\n\n    _type;\n    _id;\n    _chatName;\n    _messages = new BinSearchArray();\n    _event = new EventHandler();\n    _unreadMessages = 0;\n    /*\n        are all messages already loaded?\n     */\n    _reachedTopMessages = false;\n    _latestMsgDate;\n\n    constructor(type, id,chatName) {\n        this.type = type;\n        this.id = id;\n        this.chatName = chatName;\n    }\n    /*\n        the first message of the object is initialized\n     */\n    initFirstMessage(messageData){\n\n        if(messageData.canBeShown === undefined)\n            messageData.canBeShown = true;\n\n        if(!messageData.empty && messageData.canBeShown)\n            this.messages.add(\n                messageData.mid,\n                new Message(\n                    messageData.mid,\n                    messageData.uid,\n                    this,\n                    new Date(messageData.date),\n                    messageData.type,\n                    messageData.content\n                )\n            );\n        else if(messageData.date){\n            this.latestMsgDate = new Date(messageData.date);\n        }\n    }\n    /*\n        reload messages\n     */\n    async reloadMessages(){\n        // override messages with empty array\n        this.messages = new BinSearchArray();\n        this.reachedTopMessages = false;\n        // load messages\n        await this.loadMessages(10);\n    }\n    /*\n        messages are loaded\n     */\n    async loadMessages(num){\n        /*\n            messages are only loaded, if top not already reached\n         */\n        if(!this.reachedTopMessages) {\n\n            const getLastMsgId = () => {\n                const msg = this.getLastMessage();\n                if (msg !== null)\n                    return msg.mid;\n                return -1;\n            };\n            /*\n                messages are loaded from server\n             */\n            const response = await loadMessages({\n                chatType: this.type,\n                chatId: this.id,\n                lastMsgId: getLastMsgId(),\n                num: num\n            });\n\n            if (response.ok) {\n\n                const data = await response.json();\n                /*\n                    is top already reached?\n                 */\n                this.reachedTopMessages = data.status === 'reached top';\n\n                const lMessages = data.messages;\n                /*\n                    the array that will be returned\n                 */\n                const messages = new Array(lMessages.length);\n                const userTopShown = this.showUserInfoMessage();\n\n                for (let i = lMessages.length - 1; i >= 0; i--) {\n\n                    const messageData = lMessages[i];\n                    /*\n                        message is created\n                     */\n                    const message =\n                        new Message(\n                            messageData.mid,\n                            messageData.uid,\n                            this,\n                            new Date(messageData.date),\n                            messageData.type,\n                            messageData.content\n                        );\n                    /*\n                        message is added to chat\n                     */\n                    this.messages.add(\n                        messageData.mid,\n                        message\n                    );\n                    messages[i] = message.getMessageObject(userTopShown);\n                }\n                return messages;\n            }\n            throw new Error();\n        }\n    }\n    /*\n        gibt die Nachricht, die am längsten zurück liegt, zurück\n     */\n    getLastMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[0].value;\n        return null;\n    }\n    /*\n        gibt die neueste Nachricht im chat zurück\n     */\n    getFirstMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[this.messages.length - 1].value;\n        return null;\n    }\n    /*\n        returns all messages in an array\n            userTopShown    should the user at the top be shown?\n     */\n    getMessages(){\n\n        const userTopShown = this.showUserInfoMessage();\n        const rMessages = new Array(this.messages.length);\n\n        for(let i=0;i<this.messages.length;i++){\n\n            const message = this.messages[i].value;\n            rMessages[i] = message.getMessageObject(userTopShown);\n        }\n\n        return rMessages;\n    }\n    /*\n        neue Nachricht wird hinzugefügt\n     */\n    addMessage(uid,mid,type,content){\n        const message =\n            new Message(\n                mid,\n                uid,\n                this,\n                new Date(Date.now()),\n                type,\n                content\n            );\n        this.messages.add(mid,message);\n        getDispatch().newMsg(\n            this,\n            this.unreadMessages,\n            message.getMessageObject(\n                this.showUserInfoMessage()\n            ));\n    }\n    /*\n        should the userInfo at the messages be shown (--> only in groupChats)\n     */\n    showUserInfoMessage(){\n        return(this.type === 'groupChat')\n    }\n    /*\n        an object of this chat is returned\n     */\n    getChatObject(){\n        return {\n            type: this.type,\n            id: this.id,\n            chatName: this.chatName,\n            latestMessage: this.getLatestMessageObject(),\n            unreadMessages: this.unreadMessages,\n            isStillMember: this.type !== 'groupChat' || this.isStillMember,\n            blockedBySelf: this.isBlockedBySelf(),\n            blockedByOther: this.isBlockedByOther()\n        };\n    }\n    isBlockedBySelf = () => {\n        if(this.type !== 'normalChat')\n            return false;\n        return this.blockedBySelf\n    }\n    isBlockedByOther = () => {\n        if(this.type !== 'normalChat')\n            return false;\n        return this.blockedByOther\n    }    /*\n        an object with the latest message is returned\n     */\n    getLatestMessageObject(){\n        // get first message\n        const lm = this.getFirstMessage();\n        // does it return something else than null\n        if(lm) {\n            return {\n                msgString: lm.getChatViewMsgString(),\n                dateString: lm.getChatViewDateString(),\n                date: lm.date\n            };\n        }\n        else if(this.latestMsgDate) {\n            return {\n                msgString: \"\",\n                dateString: \"\",\n                date: this.latestMsgDate\n            };\n        }\n        else return null;\n    }\n    /*\n        reload the messages of the chat\n        // TODO update members\n     */\n    async updateChat(data,isStillMember){\n        // if the chat is the current chat, select none\n        const isCurrentChat = chatSocket.isCurrentChat(data.type,data.id);\n        if(isCurrentChat)\n            await getDispatch().selectNoChat();\n        this.isStillMember = isStillMember;\n        // reload all messages\n        await this.reloadMessages();\n        // select chat again\n        if(isCurrentChat) {\n            await getDispatch().selectChat(this);\n        }\n        const message = this.getFirstMessage();\n        await getDispatch().updateChat(this);\n        await getDispatch().newMsg(this, 1, message.getMessageObject(true));\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get chatName() {\n        return this._chatName;\n    }\n\n    set chatName(value) {\n        this._chatName = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get unreadMessages() {\n        return this._unreadMessages;\n    }\n\n    set unreadMessages(value) {\n        this._unreadMessages = value;\n    }\n\n    get reachedTopMessages() {\n        return this._reachedTopMessages;\n    }\n\n    set reachedTopMessages(value) {\n        this._reachedTopMessages = value;\n    }\n\n    get latestMsgDate() {\n        return this._latestMsgDate;\n    }\n\n    set latestMsgDate(value) {\n        this._latestMsgDate = value;\n    }\n}\n","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class NormalChat extends Chat{\n\n    _otherUser;\n    _isTyping = false;\n    // block info\n    _blockedBySelf;\n    _blockedByOther;\n\n    constructor(id,chatName,uid,unreadMessages = 0,blockedBySelf,blockedByOther) {\n        super('normalChat',id,chatName);\n        this.otherUser = uid;\n        this.unreadMessages = unreadMessages;\n        this.blockedBySelf = blockedBySelf;\n        this.blockedByOther = blockedByOther;\n    }\n\n    getUsersTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return [\n                {\n                    uid: user.uid,\n                    username: user.username\n                }\n            ];\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\n     */\n    getLatestUserTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = true;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = false;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n\n    get otherUser() {\n        return this._otherUser;\n    }\n\n    set otherUser(value) {\n        this._otherUser = value;\n    }\n\n    get isTyping() {\n        return this._isTyping;\n    }\n\n    set isTyping(value) {\n        this._isTyping = value;\n    }\n\n    get blockedBySelf() {\n        return this._blockedBySelf;\n    }\n\n    set blockedBySelf(value) {\n        this._blockedBySelf = value;\n    }\n\n    get blockedByOther() {\n        return this._blockedByOther;\n    }\n\n    set blockedByOther(value) {\n        this._blockedByOther = value;\n    }\n}","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class GroupChat extends Chat{\n    //array with uids\n    _users = [];\n    //Array mit uids von den usern, die gerade schreibem\n    _usersTyping = [];\n    _isStillMember;\n\n    constructor(id,chatName,uids,unreadMessages = 0,isStillMember) {\n        super('groupChat',id,chatName);\n        this.users = uids;\n        this.unreadMessages = unreadMessages;\n        this.isStillMember = isStillMember;\n    }\n\n    getUsersTyping(){\n        if(this.usersTyping.length > 0) {\n\n            let rc = [];\n            for(let i=0;i<this.usersTyping.length;i++){\n                const user = chatSocket.users.get(this.usersTyping[i]);\n                rc.push({\n                    uid: user.uid,\n                    username: user.username\n                });\n            }\n            return rc;\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der am neuestem schriebt\n     */\n    getLatestUserTyping(){\n        if(this.usersTyping.length > 0) {\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(this.isMember(uid)){\n            if(!this.isTyping(uid)){\n                /*\n                    the user is added to the currently typing users\n                 */\n                this.usersTyping.push(uid);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(this.isMember(uid)){\n            if(this.isTyping(uid)){\n                /*\n                    user is removed from the array of currently typing users\n                 */\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        returns true if the uid is member of the chat and not self\n     */\n    isMember(uid){\n        if(uid === chatSocket.userSelf.uid)\n            return false;\n        return this.users.find(e => e === uid);\n    }\n    /*\n        returns true if the user is currently typing\n     */\n    isTyping(uid){\n        return this.usersTyping.find(e => e === uid);\n    }\n    /*\n        returns the index of a currently typing user\n     */\n    getIndexOfTyping(uid){\n        return this.usersTyping.findIndex(e => e === uid);\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get usersTyping() {\n        return this._usersTyping;\n    }\n\n    set usersTyping(value) {\n        this._usersTyping = value;\n    }\n\n    get isStillMember() {\n        return this._isStillMember;\n    }\n\n    set isStillMember(value) {\n        this._isStillMember = value;\n    }\n}","import {NormalChat} from \"./chat/normalChat\";\nimport chatSocket from \"./chatSocket\";\nimport User from \"./user\";\nimport Message from \"./message/message\";\nimport {getDispatch} from 'reactn';\nimport {globalData} from \"../global/globalData\";\nimport {createNormalChat} from \"./apiCalls\";\n\nexport default class TempChatLoader{\n\n    _isShown = false;\n    _chatNow;\n    /*\n        a new temporary chat gets created.\n        parameters uid and username required\n     */\n    createNew(uid,username){\n        this.chatNow = new NormalChat(0, username, uid);\n    }\n    /*\n        is the current tempChat already the one with this uid?\n     */\n    doesExist(uid){\n        if(this.chatNow === undefined)\n            return false;\n        return this.chatNow.otherUser === uid;\n    }\n    /*\n        tempChat gets shown\n     */\n    show(){\n        this.isShown = true;\n        getDispatch().showTempChat(this.chatNow);\n    }\n\n    update(){\n        getDispatch().updateTempChat(this.chatNow);\n    }\n\n    hide(){\n        this.isShown = false;\n        getDispatch().hideTempChat();\n    }\n    /*\n        a new normalChat is created out of the current tempChat\n     */\n    async createNewNormalChat(msg){\n\n        /*\n            the request gets sent to the server\n         */\n        const otherUid = this.chatNow.otherUser;\n        const otherUsername = this.chatNow.chatName;\n\n        const response = await createNormalChat({\n            uid: otherUid,\n            username: otherUsername,\n            message: {\n                type: globalData.messageTypes.normalMessage,\n                content: {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            }\n        });\n\n        if(response.ok){\n\n            const data = await response.json();\n\n            if(chatSocket.users.getIndex(otherUid) === -1){\n                chatSocket.users.add(otherUid,new User(otherUid,otherUsername));\n            }\n            const otherUser = chatSocket.users.get(otherUid);\n\n            const newChat = new NormalChat(data.ncid,otherUsername,otherUid);\n            /*\n                chat gets added to user\n             */\n            otherUser.normalChat = newChat.id;\n            /*\n                chat is added in binsearchArray\n             */\n            chatSocket.chats.normal.add(data.ncid,newChat);\n            /*\n                message is added to chat\n             */\n            const message = new Message(\n                data.mid,\n                chatSocket.userSelf.uid,\n                newChat,\n                new Date(Date.now()),\n                globalData.messageTypes.normalMessage,\n                {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            );\n            newChat.messages.add(message.mid,message);\n\n            //args: chat\n            getDispatch().addChat(newChat);\n            /*\n                currentChat gets changed\n             */\n            getDispatch().selectChat(newChat);\n            /*\n                tempChat is hidden\n             */\n            this.hide();\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    get isShown() {\n        return this._isShown;\n    }\n\n    set isShown(value) {\n        this._isShown = value;\n    }\n\n    get chatNow() {\n        return this._chatNow;\n    }\n\n    set chatNow(value) {\n        this._chatNow = value;\n    }\n}\n\n","import io from 'socket.io-client';\nimport User from \"./user\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport {NormalChat} from './chat/normalChat';\nimport {GroupChat} from \"./chat/groupChat\";\nimport EventHandler from \"../util/Event\";\nimport TempChatLoader from \"./tempChatLoader\";\nimport {getGlobal,getDispatch} from 'reactn';\nimport {selectChats} from \"./apiCalls\";\n\nclass ChatSocket{\n\n    _socket;\n    _userSelf = {\n        uid: 0,\n        username: \"\"\n    };\n    _users = new BinSearchArray();\n    _chats = {\n        normal: new BinSearchArray(),\n        group: new BinSearchArray()\n    };\n    _event = new EventHandler();\n    _finishedLoading = false;\n    /*\n        normalchat not saved in the database\n     */\n    _temporaryChat = new TempChatLoader();\n    _initCalled = false;\n\n    destruct(){\n\n        if(this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.disconnect();\n        }\n        this.initCalled = false;\n    }\n\n    async init(){\n\n        const {uid,username} = getGlobal().userSelf;\n        /*\n            user-Object is created\n         */\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.initCalled = true;\n\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.socket = io.connect('/', {secure: true});\n        /*\n            authTokens are sent to client\n         */\n        this.socket.emit('auth', getGlobal().authTokens);\n        /*\n            is called when user is initialized\n         */\n        this.socket.on('initialized',() => {\n\n            this.initChats();\n        });\n        /*\n            msg-handler\n         */\n        this.socket.on('chat message',data => {\n            /*\n                gets chat of msg\n                adds this message to chat\n            */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            if(chat !== null) {\n                const isCurrentChat = this.isCurrentChat(\n                    chat.type,\n                    chat.id\n                );\n                chat.addMessage(\n                    data.uid,\n                    data.mid,\n                    data.type,\n                    data.content\n                );\n                /*\n                    hasNewMsg gets updated\n                    if current chat --> false\n                 */\n                chat.hasNewMsg = !isCurrentChat;\n                /*\n                    if chat is not currentChat, unreadMessages gets incremented\n                 */\n                chat.unreadMessages ++;\n                /*\n                    new message event is triggered\n                 */\n                this.event.trigger(\n                    'new message',\n                    data.chat.type,\n                    data.chat.id\n                );\n            }\n        });\n        /*\n            started typing\n         */\n        this.socket.on('started typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.startedTyping(data.uid);\n        });\n        /*\n            stopped typing\n         */\n        this.socket.on('stopped typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.stoppedTyping(data.uid);\n        });\n        /*\n            the user has been added to a new chat\n         */\n        this.socket.on('new chat',async data => {\n            await this.addNewChat({\n                // isStillMember is always true\n                isStillMember: true,\n                ...data\n            });\n        });\n        /*\n            user has been removed from groupChat\n         */\n        this.socket.on('removed chat',async data => {\n            await this.removedGroupChat(data);\n        });\n        /*\n            groupChat has been updated\n         */\n        this.socket.on('groupChat updated',() => {\n           this.event.trigger('groupChat updated');\n        });\n        /*\n            Bei disconnect wird Seite neu geladen\n         */\n        this.socket.on('disconnect',() => {\n            setTimeout(function() {\n\n                alert('Verbindung verloren! Seite wird neu geladen');\n                // eslint-disable-next-line no-restricted-globals\n                location.reload();\n            },1000);\n        });\n    }\n\n    async initChats(){\n        // select all chats of the user\n        const response = await selectChats();\n\n        if(response.status === 200) {\n\n            const data = await response.json();\n            for (let i = 0; i < data.length; i++) {\n                if (data[i].type === 'normalChat') {\n                    /*\n                        normalChat is added\n                     */\n                    this.addNewNormalChat(data[i]);\n                } else if (data[i].type === 'groupChat') {\n                    /*\n                        groupChat is added\n                     */\n                    this.addNewGroupChat(data[i]);\n                }\n            }\n        }\n        this.finishedLoading = true;\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\n    }\n\n    getChatArraySortedByDate(){\n\n        function getMessageTime (chat) {\n            const c = chat.latestMessage;\n            if(c !== null)\n                return c.date.getTime();\n            return new Date(0).getTime();\n        }\n\n        function getMaxDate (chats,iFrom) {\n            let max = iFrom;\n            for(let i = iFrom+1;i<chats.length;i++){\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\n                    max = i;\n            }\n            return max;\n        }\n        function swap (items, firstIndex, secondIndex) {\n            let temp = items[firstIndex];\n            items[firstIndex] = items[secondIndex];\n            items[secondIndex] = temp;\n        }\n        /*\n            Array is cloned\n         */\n        function cloneArr (arr) {\n            const clone = new Array(arr.length);\n            for(let i=0;i<arr.length;i++){\n                const chat = arr[i].value;\n                clone[i] = chat.getChatObject();\n            }\n            return clone;\n        }\n        /*\n            es wird ein sortiertes Array zurückgegeben\n         */\n        function getSorted (chats) {\n            //Array wird erzeugt\n            const sorted = cloneArr(chats);\n            /*\n                es wird immer das höchste eingefügt, um Array zu sortieren\n             */\n            for(let i=0;i<sorted.length-1;i++){\n                let max = getMaxDate(sorted,i);\n                swap(sorted,i,max);\n            }\n            return sorted;\n        }\n        /*\n            Arrays werden gemerged\n         */\n        function mergeArr (arr1,arr2) {\n\n            const merged = new Array(arr1.length + arr2.length);\n            let p1 = 0;\n            let p2 = 0;\n            for(let i=0;i<merged.length;i++){\n                if(! (p2 < arr2.length)){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else if (! (p1 < arr1.length)){\n                    merged[i] = arr2[p2];\n                    p2++;\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else{\n                    merged[i] = arr2[p2];\n                    p2++;\n                }\n            }\n            return merged;\n        }\n        const ncSorted = getSorted(this.chats.normal);\n        const gcSorted = getSorted(this.chats.group);\n\n        return mergeArr(ncSorted, gcSorted);\n    }\n\n    isCurrentChat(type,id){\n        const currentChat = getGlobal().currentChat;\n        return currentChat.type === type && currentChat.id === id;\n    };\n\n    getChat(type,id){\n        /*\n            type can be:\n                normalChat\n                tempChat\n                groupChat\n         */\n        if(type === 'normalChat')\n            return this.chats.normal.get(id);\n        else if(type === 'tempChat') {\n            return this.temporaryChat.chatNow;\n        }\n        else if(type === 'groupChat')\n            return this.chats.group.get(id);\n    }\n    /*\n        a new chat gets added\n     */\n    async addNewChat(data){\n\n        let newChat;\n\n        if(data.type === 'normalChat'){\n            /*\n                new normalChat gets created\n             */\n            newChat = this.addNewNormalChat(data);\n\n        }else if(data.type === 'groupChat'){\n            /*\n                does group already exist?\n                    --> member has been added again\n             */\n            if(this.chats.group.getIndex(data.id) === -1) {\n                newChat = this.addNewGroupChat((data));\n            }else {\n                newChat = this.chats.group.get(data.id);\n                // update chat\n                await newChat.updateChat(data,true);\n                return;\n            }\n        }\n        newChat.unreadMessages = 1;\n        /*\n            event gets triggered\n         */\n        await getDispatch().addChat(newChat);\n    }\n    /*\n        groupChat has been removed\n     */\n    async removedGroupChat(data){\n        if(this.chats.group.getIndex(data.id) !== -1) {\n            const chat = this.chats.group.get(data.id);\n            await chat.updateChat(data,false);\n        }\n    }\n    /*\n        a new normalChat gets added\n     */\n    addNewNormalChat(data){\n        /*\n            check if the other user does already exist\n                if not --> gets created\n         */\n        let otherUser;\n        if(this.users.getIndex(data.members[0].uid) === -1){\n            otherUser = new User(\n                data.members[0].uid,\n                data.members[0].username\n            );\n            this.users.add(otherUser.uid,otherUser);\n        }else{\n            otherUser = this.users.get(data.members[0].uid);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat = new NormalChat(\n            data.id,\n            data.chatName,\n            otherUser.uid,\n            data.unreadMessages,\n            data.blockedBySelf,\n            data.blockedByOther\n        );\n        /*\n            normalChat is set at other user\n         */\n        otherUser.normalChat = newChat.id;\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.normal.add(data.id,newChat);\n\n        return newChat;\n    }\n    /*\n        a new groupChat gets added\n     */\n    addNewGroupChat(data){\n        /*\n            check which do not exist already --> get added\n         */\n        const members = [];\n\n            for (let i = 0; i < data.members.length; i++) {\n\n            const member = data.members[i];\n            /*\n                does the user already exist?\n             */\n            let user;\n            if (this.users.getIndex(member.uid) === -1) {\n                user = new User(\n                    member.uid,\n                    member.username\n                );\n                this.users.add(user.uid, user);\n            } else {\n                user = this.users.get(member.uid);\n            }\n            /*\n                member gets added\n             */\n            members.push(user.uid);\n            /*\n                chat is added at user\n             */\n            user.addGroupChat(data.id);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat =\n            new GroupChat(\n                data.id,\n                data.chatName,\n                members,\n                data.unreadMessages,\n                data.isStillMember\n            );\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.group.add(data.id,newChat);\n\n        return newChat;\n    }\n\n    get socket() {\n        return this._socket;\n    }\n\n    set socket(value) {\n        this._socket = value;\n    }\n\n    get userSelf() {\n        return this._userSelf;\n    }\n\n    set userSelf(value) {\n        this._userSelf = value;\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get chats() {\n        return this._chats;\n    }\n\n    set chats(value) {\n        this._chats = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get finishedLoading() {\n        return this._finishedLoading;\n    }\n\n    set finishedLoading(value) {\n        this._finishedLoading = value;\n    }\n\n    get temporaryChat() {\n        return this._temporaryChat;\n    }\n\n    set temporaryChat(value) {\n        this._temporaryChat = value;\n    }\n\n    get initCalled() {\n        return this._initCalled;\n    }\n\n    set initCalled(value) {\n        this._initCalled = value;\n    }\n}\n\nlet chatSocket = new ChatSocket();\n\nexport function resetChatSocket(){\n    chatSocket.destruct();\n    chatSocket = new ChatSocket();\n}\n\nexport default chatSocket;\n","import React,{Component} from \"reactn\";\nimport {Link} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class ChatItem extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastMsg: undefined,\n            typeMsg: ''\n        }\n    }\n    /*\n        is this chat selected?\n     */\n    isSelected = () => {\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\n    };\n    /*\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\n        um die typeMsg zu aktualisieren\n     */\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        let typeMsg = '';\n        /*\n            wenn latestuserTyping = null, schreibt gerade keiner\n         */\n        const userTyping = chat.getLatestUserTyping();\n        if(userTyping !== null){\n            typeMsg = userTyping.username + \" schreibt...\";\n        }\n        //state wird aktualisiert\n        this.setState({\n            typeMsg: typeMsg\n        });\n    };\n\n    render() {\n\n        const renderUnreadMsg = () => {\n            if(this.props.unreadMessages === 0 || !this.props.isStillMember)\n                return null;\n            else\n                return(\n                    <div className=\"newMsg-number\">\n                        {this.props.unreadMessages}\n                    </div>\n                );\n        };\n        /*\n            in der unteren Hälfte wird angezeigt wer schreibt\n            schreibt keiner, wird letzte Nachricht angezeigt\n         */\n        const renderLowerHalf = () => {\n            if(this.state.typeMsg === '')\n                return (\n                    <div className=\"w-100 lastMsg\">\n                        {renderMsg()}\n                        {renderDate()}\n                    </div>\n                );\n            else{\n                return (\n                    <div className=\"w-100 typeMsg\">\n                        {this.state.typeMsg}\n                    </div>\n                );\n            }\n        };\n\n        const renderMsg = () => {\n            if(!this.props.isStillMember)\n                return(\n                    <span>\n                        Du bist nicht mehr Mitglied\n                    </span>\n                );\n            else if(this.props.blockedByOther)\n                return (\n                    <span>\n                        Du wurdest von {this.props.name} blockiert\n                    </span>\n                );\n            else if(this.props.blockedBySelf)\n                return (\n                    <span>\n                        Du hast {this.props.name} blockiert\n                    </span>\n                );\n            else if(this.props.latestMessage)\n                return(\n                    <span>\n                        {this.props.latestMessage.msgString}\n                    </span>\n                );\n            else\n                return(\n                    <span>\n                        Noch keine Nachrichten vorhanden\n                    </span>\n                );\n        };\n\n        const renderDate = () => {\n            if(!this.props.isStillMember)\n                return null;\n            else if(this.props.latestMessage)\n                return(\n                    <div className=\"lastMsg-date\">\n                        {this.props.latestMessage.dateString}\n                    </div>\n                );\n            else\n                return null;\n        };\n\n        const getLink = () => {\n            if(this.props.type === 'normalChat'){\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\n            }else if(this.props.type === 'groupChat'){\n                return '/chat/group/' + this.props.id;\n            }else if(this.props.type === 'tempChat'){\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\n            }\n        };\n\n        return(\n            <li className={\"chat-item\" + (this.isSelected() ? \" selected \" : \"\")}>\n                <Link to={getLink()}>\n                    <div className=\"w-100\">\n                        <strong className=\"chatItem-username\">\n                            {this.props.name}\n                        </strong>\n                        {renderUnreadMsg()}\n                    </div>\n                    {renderLowerHalf()}\n                </Link>\n            </li>\n        )\n    }\n\n    componentDidMount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden angelegt\n         */\n        //if(chat)\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n        /*else{\n            console.log('error',chatSocket.chats.group,this.props.type,this.props.id)\n        }*/\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did component update?\n         */\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\n            //Listeners get replaced\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n\n            //typeMsg gets deleted\n            this.setState({\n                typeMsg: ''\n            });\n        }\n\n    }\n    componentWillUnmount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden entfernt\n         */\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React,{Component} from \"reactn\";\nimport ChatSearchBox from \"./ChatSearchBox\";\nimport ChatItem from \"./ChatItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './chatList.scss';\n\nexport default class ChatList extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //the current searchValue at the chatlist\n            searchValue: ''\n        };\n    }\n\n    render() {\n\n        let found = 0;\n\n        const showNothingFoundMsg = () => {\n            if(found === 0)\n                return(\n                    <span>\n                        Nichts gefunden\n                    </span>\n                );\n            return null;\n        };\n\n        const renderTempChat = () => {\n            /*\n                is tempChat not null?\n             */\n            //TODO block info\n            if(this.global.tempChat){\n                return(\n                    <ChatItem\n                        key={-1}\n                        id={0}\n                        type={'tempChat'}\n                        name={this.global.tempChat.chatName}\n                        unreadMessages={0}\n                        isStillMember={true}\n                        latestMessage={null}\n                    />\n                );\n            }\n            return null;\n        };\n\n        return(\n                <Dummy>\n                    <ChatSearchBox\n                        onSearch={searchValue => {\n                            this.setState({\n                                searchValue: searchValue\n                            })\n                        }}\n                    />\n\n                    <ul className=\"chat-list\">\n                        {renderTempChat()}\n                        {this.global.chats.map((chat,i) => {\n                            if(chat.chatName.includes(this.state.searchValue)) {\n                                found++;\n                                return (\n                                    <ChatItem\n                                        key={i}\n                                        id={chat.id}\n                                        type={chat.type}\n                                        name={chat.chatName}\n                                        unreadMessages={chat.unreadMessages}\n                                        latestMessage={chat.latestMessage}\n                                        isStillMember={chat.isStillMember}\n                                        blockedBySelf={chat.blockedBySelf}\n                                        blockedByOther={chat.blockedByOther}\n                                    />\n                                );\n                            }\n                            return null;\n                        })}\n                    </ul>\n                    {showNothingFoundMsg()}\n                </Dummy>\n        )\n    }\n}","import React from \"react\";\n\nimport './chatViewLoader.scss';\n\nexport default function ChatViewLoader (props){\n    return(\n        <div className=\"loader-init\">\n            <div className=\"col-sm-12 my-auto\">\n                <div className=\"init-container border rounded\">\n                    <div className=\"spinner-border text-secondary\"\n                         style={{\n                             width: '15rem',\n                             height: '15rem',\n                             borderWidth: '0.5rem'\n                         }}\n                         role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                    <div className=\"loader-text\">{props.msg}</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import {makeRequest} from \"../../global/requests\";\nimport {globalData} from \"../../global/globalData\";\n\nexport async function loadGroupChat(gcid){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/group/' + gcid + '/', config);\n}\nexport async function sendMessage(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message', config);\n}","import React,{Component} from \"react\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport {withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {globalData} from \"../../../global/globalData\";\nimport {sendMessage} from \"../apiCalls\";\n\nimport './messageForm.scss';\n\nclass MessageForm extends Component{\n\n    _userTyping = false;\n    _typeEventEmitted = false;\n    _typeTimeout;\n    /*\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\n     */\n    _isTempChat;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            showEmoji: false\n        }\n    }\n\n    onTyping = event => {\n\n        this.setState({\n           message: event.target.value\n        });\n\n        this.handleTypeMessage();\n    };\n\n    handleTypeMessage = () => {\n        /*\n            type message get only handled if the chat is not temporary\n         */\n        if(!this.isTempChat) {\n\n            if (this.userTyping) {\n                clearTimeout(this.typeTimeout);\n            }\n            this.userTyping = true;\n            if (!this.typeEventEmitted) {\n                this.typeEventEmitted = true;\n                chatSocket.socket.emit('started typing');\n            }\n            this.typeTimeout = setTimeout(() => {\n                this.userTyping = false;\n                if (this.typeEventEmitted) {\n                    this.typeEventEmitted = false;\n                    chatSocket.socket.emit('stopped typing');\n                }\n            }, 1000);\n        }\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        /*\n            es kann keine leere Nachricht geschickt werden\n         */\n        if(this.state.message !== ''){\n            const message = this.state.message;\n            /*\n                input wird geleert\n             */\n            this.setState({\n                message: ''\n            });\n            if(this.isTempChat) {\n\n                const {pathname} = this.props.location;\n                /*\n                    the chat is created\n                 */\n                chatSocket.temporaryChat.createNewNormalChat(message)\n                    .then(redirect => {\n                        if(redirect) {\n                            this.props.history.replace(\"/chat\");\n                            this.props.history.replace(pathname);\n                        }\n                    });\n            }else{\n\n                this.sendMessage(message)\n                    .then(mid => {\n                        /*\n                            message is added to chat\n                         */\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\n                        chat.addMessage(\n                            chatSocket.userSelf.uid,\n                            mid,\n                            globalData.messageTypes.normalMessage,\n                            {\n                                text: message,\n                                mentions: [],\n                                media: []\n                            }\n                        );\n                    })\n                    .catch(err => {});\n            }\n        }\n    };\n\n    sendMessage = async msg => {\n        /*\n            message is sent to server\n         */\n        const response = await sendMessage({\n            type: globalData.messageTypes.normalMessage,\n            content: {\n                text: msg,\n                mentions: [],\n                media: []\n            }\n        });\n\n        if (response.ok) {\n\n            const data = await response.json();\n            /*\n                mid is returned\n             */\n            return data.mid;\n        }\n        return new Error();\n    };\n\n    onEmojiInput = emoji => {\n\n        this.setState({\n            message: this.state.message + emoji.native\n        });\n        this.handleTypeMessage();\n    };\n\n    toggleEmoji = event => {\n        this.setState(state => ({\n            showEmoji: !state.showEmoji\n        }))\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form onSubmit={this.onSubmit}\n                      className=\"msg-form\">\n                    <div className=\"message-input\">\n                        <input autoComplete=\"off\"\n                               placeholder=\"Nachricht:\"\n                               name=\"message-input-text\"\n                               value={this.state.message}\n                               onChange={this.onTyping}\n                        />\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\n                           onClick={this.toggleEmoji}\n                        />\n                    </div>\n                    <button className=\"btn-submit\" type=\"submit\">\n                        <i className=\"far fa-paper-plane fa-2x\"\n                           data-toggle=\"tooltip\"\n                           title=\"send message\" />\n                    </button>\n                </form>\n                {this.state.showEmoji ?\n                    <div style={{\n                        position: 'absolute',\n                        bottom: '60px',\n                        right: '50px',\n                        width: '350px',\n                        height: '425px'\n                    }}>\n                        <Picker\n                            onSelect={this.onEmojiInput}\n                            native={true}\n                        />\n                    </div>\n                : null}\n            </Dummy>\n        )\n    }\n\n    componentDidMount() {\n        /*\n            isTempChat gets set\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            isTempChat gets updated\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    get userTyping() {\n        return this._userTyping;\n    }\n\n    set userTyping(value) {\n        this._userTyping = value;\n    }\n\n    get typeEventEmitted() {\n        return this._typeEventEmitted;\n    }\n\n    set typeEventEmitted(value) {\n        this._typeEventEmitted = value;\n    }\n\n    get typeTimeout() {\n        return this._typeTimeout;\n    }\n\n    set typeTimeout(value) {\n        this._typeTimeout = value;\n    }\n\n    get isTempChat() {\n        return this._isTempChat;\n    }\n\n    set isTempChat(value) {\n        this._isTempChat = value;\n    }\n}\n\nexport default withRouter(MessageForm);","import React,{Component} from \"reactn\";\nimport ReactDOM from 'react-dom';\nimport MessageForm from \"./MessageForm\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Message from \"./message/Message\";\nimport {isDifferentDay} from '../../../chatData/message/message'\n\nimport './chatContainer.scss';\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default class ChatContainer extends Component{\n\n    _isMounted = false;\n    _messages;\n    _messagesNode;\n\n    constructor(props) {\n        super(props);\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\n        this.state = {\n            msgLoading: false,\n            scrollToBottom: 0\n        };\n    }\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\n    scrollHandler = event => {\n        this.setState({\n            scrollToBottom: this.getScrollToBottom()\n        });\n        /*\n            wenn oben angelangt, werden Nachrichten geladen\n         */\n        if (this.messagesNode.scrollTop === 0 && this.isChatSelected())\n            this.loadMessages();\n    };\n\n    setScrollToBottom = val => {\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\n    };\n\n    getScrollToBottom  = () => {\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\n    };\n\n    assignMessagesRef = target => {\n        this.messages = target;\n    };\n\n    loadMessages = () => {\n\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\n        /*\n            loader is only shown, if top not reached\n         */\n        if(!chat.reachedTopMessages)\n            this.setState({\n                msgLoading: true\n            });\n        /*\n            messages are loaded\n         */\n        chat.loadMessages(10)\n            .then(messages => {\n                /*\n                    loader is hidden\n                    messages are added\n                 */\n                this.dispatch.addLoadedMessages(messages);\n                this.setState(state => ({\n                    msgLoading: false\n                }));\n                this.setScrollToBottom(this.state.scrollToBottom);\n            })\n            .catch(err => this.setState({\n                msgLoading: false\n            }));\n    };\n    /*\n        is called when the selected chat changed\n     */\n    chatChanged = () => {\n        /*\n            if scrollToBottom is 0, the messages are loaded\n         */\n        if (this.messagesNode.scrollTop === 0 && this.isChatSelected())\n            this.loadMessages();\n    };\n\n    isChatSelected = () => {\n        return !(this.global.currentChat.type === '' && this.global.currentChat.id === 0);\n    }\n\n    componentDidMount() {\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\n\n        this.chatChanged();\n\n        this.isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn das der Fall ist:\n                wird messages loaded listener auf neuen chat angewandt\n                scrollToBottom wird auf 0 gesetzt\n                scrolltop wird überprüft\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            //scrollToBottom wird auf 0 gesetzt\n            this.setScrollToBottom(0);\n\n            this.chatChanged();\n        }\n        /*\n            wenn scrollToBottom 0 wird zu bottom gescrollt\n         */\n        if(this.state.scrollToBottom === 0) {\n            this.setScrollToBottom(0);\n            /*\n                newMessages is set to 0\n             */\n            if(this.global.currentChat.newMessages > 0)\n                this.setGlobal(global => ({\n                   currentChat: {\n                       ...global.currentChat,\n                       newMessages: 0\n                   }\n                }));\n        }\n\n    }\n\n    render() {\n\n        const showLoaderTop = () => {\n            if(this.state.msgLoading)\n                return(\n                    <div className=\"messageLoader-top\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderNewMessages = () => {\n\n            if(this.global.currentChat.newMessages > 0)\n                return(\n                    <div id=\"scroll-down-number\" className=\"number\">\n                        {this.global.currentChat.newMessages}\n                    </div>\n                );\n            return null;\n        };\n\n        const renderBtnToBottom = () => {\n            if(this.isMounted) {\n                if (this.getScrollToBottom() > 10) {\n                    return (\n                        <div id=\"messages-bottom\"\n                             className=\"messages-bottom\"\n                             onClick={() => {\n                                 this.setState({\n                                     scrollToBottom: 0\n                                 })\n                             }}\n                        >\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\n                            </div>\n                            {renderNewMessages()}\n                        </div>\n                    )\n                }\n            }\n            return null;\n        };\n\n        let lastDate = new Date(0);\n        /*\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\n            wird ein Container mit Datum gerendert\n         */\n        const renderDateContainer = msg => {\n            if(isDifferentDay(msg.date,lastDate)){\n                lastDate = msg.date;\n                return(\n                    <div className = \"date-container\">\n                        <div>\n                            {msg.dateString}\n                        </div>\n                    </div>\n                )\n            }\n            lastDate = msg.date;\n            return null;\n        };\n\n        const renderAlertNoMessages = () => {\n            if(this.global.currentChat.messages.length === 0)\n                return(\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                );\n            return null;\n        };\n\n        const renderAlertNotInChat = () => {\n            if(!this.global.currentChat.isStillMember)\n                return(\n                    <div className=\"error-container\">\n                        <div>\n                            Du bist nicht mehr im chat\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderAlertBlockedBySelf = () => {\n            if(this.global.currentChat.blockedBySelf)\n                return(\n                    <div className=\"error-container\">\n                        <div>\n                            Du hast {this.global.currentChat.chatName} blockiert\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderAlertBlockedByOther = () => {\n            if(this.global.currentChat.blockedByOther)\n                return(\n                    <div className=\"error-container\">\n                        <div>\n                            Du wurdest von {this.global.currentChat.chatName} blockiert\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderMessageForm = () => {\n            /*\n                render MessageForm only if:\n                    member is still in chat\n                    user is not blocked\n                    user did not bliock other user\n             */\n            if(this.global.currentChat.isStillMember\n                && !this.global.currentChat.blockedBySelf\n                && !this.global.currentChat.blockedByOther\n            )\n                return(\n                    <MessageForm\n                        chatType={this.props.chatType}\n                        chatId={this.props.chatId}\n                    />\n                )\n            return null;\n        }\n\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\"\n                     onScroll={this.scrollHandler}\n                     ref={this.assignMessagesRef}\n                >\n                    {showLoaderTop()}\n                    {this.global.currentChat.messages.map((msg,i) => {\n                        return (\n                            <Dummy key={i}>\n                                {renderDateContainer(msg)}\n                                <Message\n                                    msg={msg}\n                                />\n                            </Dummy>\n                        );\n                    })}\n                    {renderAlertNoMessages()}\n                    {renderAlertNotInChat()}\n                    {renderAlertBlockedByOther()}\n                    {renderAlertBlockedBySelf()}\n                    {renderBtnToBottom()}\n                </div>\n                {renderMessageForm()}\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    get isMounted() {\n        return this._isMounted;\n    }\n\n    set isMounted(value) {\n        this._isMounted = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get messagesNode() {\n        return this._messagesNode;\n    }\n\n    set messagesNode(value) {\n        this._messagesNode = value;\n    }\n}","import React,{Component} from \"react\";\nimport MessageForm from \"./chatContainer/MessageForm\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class TempChatContainer extends Component{\n\n    render() {\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\">\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                </div>\n                <MessageForm\n                    chatType={'tempChat'}\n                    chatId={0}\n                />\n            </div>\n        );\n    }\n    componentDidMount() {\n        chatSocket.temporaryChat.show();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.uid !== this.props.uid)\n            chatSocket.temporaryChat.update();\n    }\n    componentWillUnmount() {\n        chatSocket.temporaryChat.hide();\n    }\n}","import React from \"react\";\n\nexport function AddressNotValid() {\n    return(\n        <div>\n            <h2>ungültige Addresse</h2>\n        </div>\n    );\n}\nexport function CannotWriteYourself(){\n    return(\n        <div>\n            <h2>Du kannst dir selbst nicht schreiben</h2>\n        </div>\n    );\n}\nexport function BlockedByThisUser(){\n    return(\n        <div>\n            <h2>Dieser User hat dich blockiert</h2>\n        </div>\n    );\n}\nexport function UserNotExisting(){\n    return(\n        <div>\n            <h2>Dieser User existiert nicht</h2>\n        </div>\n    );\n}\nexport function NoMemberInPublicChat(){\n    return (\n        <div>\n            <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\n        </div>\n    );\n}\nexport function NoAuthorization(){\n    return (\n        <div>\n            <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\n        </div>\n    );\n}\nexport function ChatNotExisting(){\n    return (\n        <div>\n            <h2>Dieser Chat existiert nicht</h2>\n        </div>\n    );\n}\nexport function GeneralError(){\n    return (\n        <div>\n            <h2>Fehler</h2>\n        </div>\n    );\n}","import React, {Component} from \"reactn\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport TempChatContainer from \"./TempChatContainer\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/user\";\nimport {\n    AddressNotValid,\n    BlockedByThisUser,\n    CannotWriteYourself,\n    UserNotExisting\n} from \"./chatViewErrorMessages\";\n\nexport default class NormalChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: UserErrorCode.none\n        }\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if(this.state.error === UserErrorCode.nan){\n                return(\n                    <AddressNotValid/>\n                );\n            }\n            else if(this.state.error === UserErrorCode.isSelf){\n                return(\n                    <CannotWriteYourself/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if(this.state.loaded){\n\n                if(this.state.error === UserErrorCode.none){\n\n                    return(\n                        <ChatContainer\n                            chatType={this.global.currentChat.type}\n                            chatId={this.global.currentChat.id}\n                        />\n                    )\n                }else if(this.state.error === UserErrorCode.tempChat){\n                    return(\n                        <TempChatContainer uid={this.state.uid}/>\n                    )\n                }else if(this.state.error === UserErrorCode.blocked){\n                    return(\n                        <BlockedByThisUser/>\n                    )\n                }else{\n                    return(\n                        <UserNotExisting/>\n                    )\n                }\n            }\n        };\n\n        return <div className=\"h-100\">\n            {renderLoader()}\n            {renderChat()}\n        </div>;\n    }\n\n    componentDidMount() {\n        this.userChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did uid change?\n         */\n        if(prevProps.uid !== this.props.uid){\n            /*\n                is props.uid a number?\n             */\n            if(isNaN(this.props.uid)){\n                this.setState({\n                    error: UserErrorCode.nan\n                });\n            }\n            else{\n                this.userChanged();\n            }\n\n        }\n    }\n    /*\n        is called when the user changed and when the component mounted\n            this is checked after each update\n     */\n    userChanged = () => {\n\n        const uid = parseInt(this.props.uid);\n\n        /*\n            is the user self?\n         */\n        if(this.global.userSelf.uid === uid){\n            this.setState({\n                error: UserErrorCode.isSelf,\n                loaded: true\n            });\n        }else {\n\n            const userExists = () => {\n\n                getUserNormalChat(uid)\n                    .then(res => {\n                        /*\n                            no error\n                                checks if existing or tempChat\n                         */\n                        if (res === UserErrorCode.none) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.users.get(uid).username,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                normalChat is selected\n                             */\n                            this.selectNormalChat(uid);\n                            /*\n                                tempChat\n                             */\n                        } else if (res === UserErrorCode.tempChat) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                the temporary chat is selected\n                             */\n                            this.selectTempChat();\n                        }\n                        /*\n                            some error has occured, state is set\n                         */\n                        else{\n                           this.setState({\n                               error: UserErrorCode.error\n                           })\n                        }\n                        this.setState({\n                            loaded: true\n                        });\n\n                    })\n                    .catch(err => this.setState({\n                        error: UserErrorCode.error\n                    }));\n            };\n\n            if (chatSocket.finishedLoading) {\n                userExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    userExists();\n                });\n            }\n\n            this.setState({\n                uid: parseInt(this.props.uid)\n            });\n        }\n    };\n    /*\n        the tempChat is selected\n     */\n    selectTempChat(){\n        this.dispatch.showTempChat();\n    }\n    /*\n        a normalCHat is selected\n     */\n    selectNormalChat(uid){\n        /*\n            does the user exist?\n         */\n        if (chatSocket.users.getIndex(uid) === -1) {\n\n            this.setState({\n                error: UserErrorCode.userNotExisting\n            });\n        }else {\n            /*\n                chat is pulled from chatSocket\n             */\n            const id = chatSocket.users.get(uid).normalChat;\n            const chat = chatSocket.getChat('normalChat', id);\n\n            this.dispatch.selectChat(chat);\n        }\n    }\n    /*\n        property- display normalChat is removed from global\n     */\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\n\nimport './modal.scss';\n\nclass Modal extends Component{\n\n    render() {\n        const clickedOutside = () => {\n            this.props.history.goBack();\n        };\n        return(\n            <div\n                className=\"modal-outer\"\n                onClick={clickedOutside}>\n                <div className=\"h-100\" style={{display: \"flex\"}}>\n\n                        <div\n                            className=\"modal-inner\"\n                            onClick={event => {event.stopPropagation()}}>\n                            <div\n                                className=\"btn-close\"\n                                onClick={() => {this.props.history.goBack()}}>\n                                &times;\n                            </div>\n                            {this.props.children}\n                        </div>\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Modal);\n\nexport function ModalHeader(props){\n    return(\n        <div className=\"m-header\">\n            {props.children}\n        </div>\n    )\n}\n\nexport function ModalMain(props){\n    return(\n        <div className=\"m-main\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"react\";\n\nexport default class UserItem extends Component{\n\n    clicked = event => {\n        if(this.props.isSelected){\n            this.props.deselectUser(this.props.index);\n        }else\n            this.props.selectUser(this.props.index);\n    };\n\n    render() {\n        return(\n            <li key={this.props.index}\n                onClick={this.clicked}\n            >\n                <div className=\"username\">\n                    {this.props.username}\n                </div>\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\n                    <i className=\"fas fa-check\" />\n                </div>\n            </li>\n        );\n    }\n}","import React,{Component} from \"react\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class extends Component {\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            error: errorCode.none,\n            /*\n                are there items left?\n             */\n            hasMore: true\n        }\n    }\n\n    searchChanged = event => {\n        this.setState({\n            searchValue: event.target.value,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more users are loaded\n     */\n    loadUsers = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const data = await this.props.loadUsers(\n                    searchValue,\n                    length\n                );\n\n                if (data.length === 0) {\n                    this.setState({\n                        hasMore: false,\n                        error: errorCode.none\n                    })\n                } else {\n                    this.setState(state => ({\n                        searchResult: state.searchResult.concat(data),\n                        error: errorCode.none\n                    }));\n                }\n\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n    /*\n        is called when an user is selected\n     */\n    selectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.selectUser(user.uid,user.username);\n    };\n\n    deselectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.deselectUser(user.uid);\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\n                    <input type=\"text\"\n                           className=\"form-control p-2 m-2\"\n                           placeholder=\"Benutzer suchen\"\n                           value={this.state.searchValue}\n                           onChange={this.searchChanged}\n                    />\n                </form>\n                <div\n                    className=\"selectUsers\"\n                    ref={ref => this.scrollParentRef = ref}\n                >\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={this.loadUsers}\n                        hasMore={this.state.hasMore}\n                        loader={\n                            <div className=\"loader\" key={-1}>\n                                <div\n                                    className=\"spinner-border text-secondary\"\n                                    role=\"status\"\n                                >\n                                    <span className=\"sr-only\">\n                                        Loading...\n                                    </span>\n                                </div>\n                            </div>\n                        }\n                        useWindow={false}\n                        getScrollParent={() => this.scrollParentRef}\n                    >\n                        <ul className=\"selectUsers\">\n                            {this.state.searchResult.map((item, index) => (\n                                <UserItem\n                                    key={index}\n                                    index={index}\n                                    uid={item.uid}\n                                    username={item.username}\n                                    selectUser={this.selectUser}\n                                    deselectUser={this.deselectUser}\n                                    isSelected={this.props.isUserSelected(item.uid)}\n                                />\n                            ))}\n                            {this.state.searchResult.length === 0 ?\n                                <div key={-1} className=\"nothingFound\">\n                                    Nichts gefunden!\n                                </div>\n                                :\n                                null\n                            }\n                        </ul>\n                    </InfiniteScroll>\n                </div>\n            </Dummy>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport UserList from \"./UserList\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './selectUsers.scss';\n\nexport default class SelectUsers extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the users already selected\n             */\n            selectedUsers: [],\n            showOnlySelected: false\n        }\n    }\n    /*\n        gets called when a user gets selected\n     */\n    selectUser = (uid,username) => {\n        this.setState(state => ({\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\n        }));\n    };\n\n    deselectUser = (uid) => {\n        this.setState(state => {\n            const arrClone = [...state.selectedUsers];\n            const index = arrClone.findIndex(item => {\n                return item.uid === uid;\n            });\n            arrClone.splice(index,1);\n            return {\n                selectedUsers: arrClone\n            }\n        });\n    };\n\n    deselectIndex = index => {\n        this.deselectUser(this.state.selectedUsers[index].uid);\n    };\n\n    isUserSelected = (uid) => {\n        return this.state.selectedUsers.find(item => {\n            return item.uid === uid;\n        });\n    };\n    /*\n        an Array with the uids of the users gets returned to the parent component\n     */\n    btnNextClicked = event => {\n\n        this.props.onNext(this.state.selectedUsers);\n    };\n\n    render() {\n\n        const renderSelectedUsers = () => {\n            if(this.state.selectedUsers.length === 0){\n                return (\n                    <h4>\n                        Noch niemand ausgewählt\n                    </h4>);\n            }else{\n                return(\n                    <h4 className=\"w-100\">\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\n                              onClick={event => {\n                                  this.setState(state => ({\n                                      showOnlySelected: !state.showOnlySelected\n                                  }));\n                              }}\n                        >\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\n                        </span>\n                        &nbsp;ausgewählt\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\n                           onClick={this.btnNextClicked}\n                        />\n                    </h4>\n                )\n            }\n        };\n        /*\n            selected users cannot be shown if there is no one selected.\n                --> showOnlySelected = false\n         */\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\n            this.setState({\n                showOnlySelected: false\n            });\n\n        return(\n            <Dummy>\n                <div className=\"select-users\">\n                    {renderSelectedUsers()}\n                </div>\n                    {!this.state.showOnlySelected ?\n                        <UserList selectUser={this.selectUser}\n                                  deselectUser={this.deselectUser}\n                                  isUserSelected={this.isUserSelected}\n                                  loadUsers={this.props.loadUsers}\n                        />\n                        :\n                        <div className=\"selectUsers\">\n                            <ul className=\"selectUsers only-selected\">\n                                {this.state.selectedUsers.map((item,index) => (\n                                    <UserItem\n                                        key={index}\n                                        index={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        selectUser={() => {}}\n                                        deselectUser={this.deselectIndex}\n                                        isSelected={true}\n                                    />\n                                ))}\n                            </ul>\n                        </div>\n                    }\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../../global/requests\";\n\n/*\n    the specified members will be added to the chat\n        gcid: groupChat -  id\n        users: the users\n            [\n                {uid:(num),username:(str)}\n                {uid:(num),username:(str)}\n            ]\n */\nexport const addMembers = async(gcid,users) => {\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            users: users\n        })\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/members',\n            config\n        );\n    if(!response.ok){\n        throw new Error(\"Error adding members\");\n    }\n}\n/*\n    all users who are not in the group\n        gcid: groupChat -  id\n        body: the body of the request\n            {\n                search: a search can be specified,\n                limit: 10,\n                start: the number of users who are already loaded\n            }\n */\nexport const fetchUsersNotInGroup = async(gcid,body) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest(\n        '/user/notInGroup/' + gcid,\n        config\n    );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}\n/*\n    the user leaves the chat\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const leaveChat = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/leave',\n            config\n        );\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error leaving chat\");\n        }\n    }else{\n        throw new Error(\"Error leaving chat\");\n    }\n}\n/*\n    the admin status of the user is removed\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const removeSelfAdmin = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/removeAdmin',\n            config\n        );\n\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error removing admin\");\n        }\n    }else{\n        throw new Error(\"Error removing admin\");\n    }\n}","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport {ModalHeader, ModalMain} from \"../../../utilComp/Modal\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {addMembers, fetchUsersNotInGroup} from \"./apiCalls\";\n/*\n    props:\n        gcid: id of the groupChat\n */\nexport default function AddUsers(props){\n\n    let history = useHistory();\n\n    const submitUsers = async (selectedUsers) => {\n        /*\n            addMembers call returns nothing\n         */\n        try{\n            await addMembers(props.gcid,selectedUsers);\n            /*\n                if ok, modal is closed\n             */\n            history.goBack();\n        }catch (e){\n            //TODO: error message\n        }\n    };\n\n    const loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        return await fetchUsersNotInGroup(\n            props.gcid,{\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            }\n        )\n    };\n\n    return(\n        <Dummy>\n            <ModalHeader>\n                <h2>\n                    Benutzer hinzufügen\n                </h2>\n            </ModalHeader>\n            <ModalMain>\n                <div className={\"addMembers\"}>\n                    <SelectUsers\n                        onNext={submitUsers}\n                        loadUsers={loadUsers}\n                    />\n                </div>\n            </ModalMain>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\n\nclass UserOptions extends Component {\n\n    isSelfAdmin = () => {\n        return this.props.memberSelf.isAdmin;\n    };\n\n    isMemberSelf(){\n        return this.props.member.uid === this.global.userSelf.uid;\n    };\n\n    removeMemberFromChat = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid,\n                    config\n                );\n        }\n    };\n\n    makeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/giveAdmin',\n                    config\n                );\n\n        }\n    };\n\n    removeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/removeAdmin',\n                    config\n                );\n        }\n    };\n\n    render(){\n\n        const {pathname} = this.props.location;\n\n        return (\n            <ul className=\"userOptions\">\n                <li key={0}>\n                    <Link to={pathname + \"/userInfo/\" + this.props.member.uid}>\n                        zeige {this.props.member.username} an\n                    </Link>\n                </li>\n                <li key={1}>\n                    <Link to={\"/chat/user/\" + this.props.member.uid}>\n                        Nachricht an {this.props.member.username}\n                    </Link>\n                </li>\n                {/*\n                    if the member is admin, he has more options\n                    */\n                    this.isSelfAdmin() && ! this.isMemberSelf() ?\n                        <Dummy>\n                            <li\n                                key={2}\n                                className=\"noLink\"\n                                onClick={this.removeMemberFromChat}\n                            >\n                                aus chat entfernen\n                            </li>\n                            {this.props.member.isAdmin ?\n                                <li\n                                    key={3}\n                                    className=\"noLink\"\n                                    onClick={this.removeMemberAdmin}\n                                >\n                                    admin status entfernen\n                                </li>\n                                :\n                                <li\n                                    key={4}\n                                    className=\"noLink\"\n                                    onClick={this.makeMemberAdmin}\n                                >\n                                    zu admin machen\n                                </li>\n                            }\n                        </Dummy>\n                        : null\n                }\n            </ul>\n        )\n    }\n}\n\nexport default withRouter(UserOptions);","import React from \"react\";\nimport {Link,useLocation} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {leaveChat, removeSelfAdmin} from \"./apiCalls\";\n\nexport default function ChatOptions(props) {\n\n    const {pathname} = useLocation();\n\n    const isSelfAdmin = () => {\n        return props.memberSelf.isAdmin;\n    };\n\n    return(\n        <ul className=\"chatOptions\">\n            {isSelfAdmin() ?\n                <Dummy>\n                    <li key={0} className=\"addUsers\">\n                        <Link to={pathname + \"/addUsers\"}>\n                            Benutzer hinzufügen\n                        </Link>\n                    </li>\n                    <li\n                        key={1}\n                        className=\"removeSelfAdmin noLink\"\n                        onClick={() => {\n                            removeSelfAdmin(props.gcid)\n                                .then(() => {})\n                                .catch(err => {console.log(err)})\n                        }}\n                    >\n                        admin status entfernen\n                    </li>\n                </Dummy>\n                : null}\n            <li\n                key={2}\n                className=\"leaveChat noLink\"\n                onClick={() => {\n                    leaveChat(props.gcid)\n                        .then(() => {})\n                        .catch(err => {console.log(err)})\n                }}\n            >\n                Chat verlassen\n            </li>\n        </ul>\n    )\n}","import React,{Component} from \"react\";\nimport \"./editableLabel.scss\";\n\nexport default class EditableLabel extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            value: this.props.value\n        }\n    }\n\n    startEdit = () => {\n        this.setState({\n            isEditing: true\n        });\n    }\n\n    cancelEdit = () => {\n        this.setState({\n            isEditing: false,\n            value: this.props.value\n        });\n    }\n\n    submitEdit = event => {\n        event.preventDefault();\n        this.setState({\n            isEditing: false\n        });\n        // did really something change?\n        if(this.props.value !== this.state.value)\n            if(typeof this.props.onChange === \"function\")\n                this.props.onChange(this.state.value)\n    }\n\n    render() {\n        return (\n            <span className={\"label-edit \" + this.props.className}>\n                {this.state.isEditing ?\n                    <form\n                        onSubmit={this.submitEdit}\n                    >\n                        <input\n                            type=\"text\"\n                            value={this.state.value}\n                            style={{width: this.state.value.length + \"ch\"}}\n                            onChange={(event) => {\n                                this.setState({\n                                    value: event.target.value\n                                })\n                            }}\n                        />\n                        &nbsp;&nbsp;\n                        <i\n                            className=\"fas fa-check fa-lg edit-submit\"\n                            onClick={this.submitEdit}\n                        />\n                        &nbsp;&nbsp;\n                        <i\n                            className=\"fas fa-times fa-lg edit-cancel\"\n                            onClick={this.cancelEdit}\n                        />\n                    </form>\n                    :\n\n                    <span\n                        onDoubleClick={this.startEdit}\n                        className={\"value-noEdit\"}\n                    >\n                        {this.props.children != null ?\n                            this.props.children\n                            :\n                            this.state.value\n                        }\n                        &nbsp;\n                        <i\n                            className=\"fas fa-pen edit-start\"\n                            onClick={this.startEdit}\n                        />\n                    </span>\n                }\n            </span>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {makeRequest} from \"../../../../global/requests\";\nimport EditableLabel from \"../../../../utilComp/EditableLabel\";\n\nexport default class DescriptionEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                description: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/description\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <EditableLabel\n                className={\"description\"}\n                value={this.props.description}\n                onChange={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {makeRequest} from \"../../../../global/requests\";\nimport EditableLabel from \"../../../../utilComp/EditableLabel\";\n\nexport default class ChatNameEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                chatName: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/chatName\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <EditableLabel\n                className={\"chatName\"}\n                value={this.props.chatName}\n                onChange={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Dropdown from \"rc-dropdown\";\nimport UserOptions from \"./UserOptions\";\nimport ChatOptions from \"./ChatOptions\";\nimport DescriptionEdit from \"./edit/editDescription\";\nimport ChatNameEdit from \"./edit/editChatName\";\n\nimport'./groupChatInfo.scss';\n\nclass GroupChatInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false\n        }\n    }\n\n    render() {\n\n        if(this.state.error)\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Ein Fehler ist aufgetreten!\n                </div>\n            );\n        const uidSelf = chatSocket.userSelf.uid;\n\n        return(\n            <div className=\"groupChatInfo\">\n                {this.props.data.memberSelf.isAdmin ?\n                    <h1 className=\"chatName\">\n                        <ChatNameEdit\n                            gcid={this.props.gcid}\n                            chatName={this.props.data.chatName}\n                        />\n                    </h1>\n                    :\n                    <div className=\"chatName\">\n                        <h1>\n                            {this.props.data.chatName}\n                        </h1>\n                    </div>\n                }\n                {this.props.data.memberSelf.isAdmin ?\n                    <DescriptionEdit\n                        gcid={this.props.gcid}\n                        description={this.props.data.description}\n                    />\n                    :\n                    <div className=\"description\">\n                        {this.props.data.description}\n                    </div>\n                }\n                <Dropdown\n                    trigger={['click']}\n                    overlay={\n                        <ChatOptions\n                            gcid={this.props.gcid}\n                            memberSelf={this.props.data.memberSelf}\n                        />\n                    }\n                    >\n                    <i\n                        className=\"fas fa-ellipsis-v fa-lg chat-options-btn fa-2x\"\n                        role=\"button\"\n                    />\n                </Dropdown>\n                {this.props.data.memberSelf.isStillMember ?\n                    null\n                    :\n                    <div className={\"error\"}>\n                        Du bist nicht mehr im chat\n                    </div>\n                }\n                <h4>\n                    {this.props.data.members.length}\n                    &nbsp;Mitglieder:\n                </h4>\n                <ul className=\"userList\">\n                    {this.props.data.members.map((item,index) => (\n                        <li key={index}>\n                            <div className=\"userItem\">\n                            {uidSelf === item.uid ?\n                                <span>Du</span>\n                            :\n                                item.username\n                            }\n                            <div className=\"right\">\n                                {item.isAdmin ?\n                                    <span className=\"user-admin\">\n                                        Admin&nbsp;&nbsp;\n                                    </span>\n                                : null}\n                                <Dropdown\n                                    trigger={['click']}\n                                    overlay={\n                                        <UserOptions\n                                            gcid={this.props.gcid}\n                                            memberSelf={this.props.data.memberSelf}\n                                            member={item}\n                                        />\n                                    }\n                                    animation=\"slide-up\"\n                                    alignPoint\n                                >\n                                    <i\n                                        className=\"fas fa-ellipsis-v fa-lg\"\n                                        role=\"button\"\n                                    />\n                                </Dropdown>\n                            </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default withRouter(GroupChatInfo);","import React from \"react\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport Modal from \"../../../utilComp/Modal\";\nimport AddUsers from \"./AddUsers\";\nimport GroupChatInfo from \"./GroupChatInfo\";\nimport Responsive from \"../../../responsive/Responsive\";\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default function ModalRouterGroupChatInfo(props){\n\n    let { path } = useRouteMatch();\n\n    const groupChatInfo = (\n        <GroupChatInfo\n            gcid={props.gcid}\n            data={props.data}\n        />\n    );\n\n    return(\n        <Dummy>\n            <Responsive displayIn={[\"Mobile\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <AddUsers\n                            gcid={props.gcid}\n                        />\n                    </Route>\n                    <Route path={\"*\"}>\n                        {groupChatInfo}\n                    </Route>\n                </Switch>\n            </Responsive>\n            <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <Modal>\n                                <AddUsers\n                                    gcid={props.gcid}\n                                />\n                        </Modal>\n                    </Route>\n                </Switch>\n                {groupChatInfo}\n            </Responsive>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport ModalRouterGroupChatInfo from \"./groupChatInfo/ModalRouterGroupChatInfo\";\nimport {\n    AddressNotValid,\n    ChatNotExisting,\n    NoAuthorization,\n    NoMemberInPublicChat,\n    GeneralError\n} from \"./chatViewErrorMessages\";\nimport {loadGroupChat} from \"./apiCalls\";\n\nexport const groupChatErrorCode = {\n    none: 0,\n    nan: 1,\n    chatNotExisting: 2,\n    notPartOfChat: 3,\n    private: 4,\n    general: 5\n};\n\nexport const groupChatTabs = {\n    chat: 0,\n    info: 1\n};\n\nexport default class GroupChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gcid: 0,\n            loaded: false,\n            chatData: null,\n            error: groupChatErrorCode.none\n        }\n    }\n\n    loadGroupChatInfo = async(gcid) => {\n\n        try {\n            const response = await loadGroupChat(this.props.gcid);\n\n            if(response.status === 403)\n                return groupChatErrorCode.private;\n\n            else if(response.status === 404)\n                return groupChatErrorCode.chatNotExisting;\n\n            else if (response.ok) {\n\n                let data = await response.json();\n\n                this.setState({\n                    chatData: data\n                });\n\n                if(data.error) {\n\n                    if (data.error === 'not part of chat')\n                        return groupChatErrorCode.notPartOfChat;\n\n                    else\n                        return groupChatErrorCode.general\n\n                }else if(chatSocket.chats.group.getIndex(gcid) !== -1){\n\n                    return groupChatErrorCode.none;\n                }\n            }\n            else {\n                return groupChatErrorCode.general\n            }\n        } catch (err) {\n            return groupChatErrorCode.general\n        }\n    };\n    /*\n        is called after the chatId changed\n     */\n    chatChanged = () => {\n        /*\n            is props.gcid a number?\n         */\n        if(isNaN(this.props.gcid)){\n            this.setState({\n                error: groupChatErrorCode.nan,\n                loaded: true\n            });\n        }else{\n\n            const chatExists = () => {\n\n                const gcid = parseInt(this.props.gcid);\n\n                this.loadGroupChatInfo(gcid)\n                    .then(r => {\n                        if (r === groupChatErrorCode.none) {\n\n                            this.selectGroupChat(gcid);\n                            this.setState({\n                                loaded: true,\n                                error: groupChatErrorCode.none,\n                                gcid: gcid\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\n                                ihcData: {\n                                    name: chatSocket.chats.group.get(gcid).chatName,\n                                    gcid: gcid\n                                }\n                            }).then();\n                        } else {\n                            this.setState({\n                                loaded: true,\n                                error: r\n                            });\n                        }\n                    })\n                    .catch();\n            };\n\n            if (chatSocket.finishedLoading) {\n                chatExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    chatExists();\n                });\n            }\n        }\n    };\n    /*\n        groupChat is selected\n     */\n    selectGroupChat(gcid){\n        /*\n            does the chat exist?\n         */\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\n\n            this.setState({\n                error: groupChatErrorCode.chatNotExisting\n            })\n        } else {\n\n            const chat = chatSocket.chats.group.get(gcid)\n            this.dispatch.selectChat(chat);\n        }\n    }\n    reloadChatInfo = () => {\n        if(this.state.error === groupChatErrorCode.none) {\n            const gcid = parseInt(this.props.gcid);\n            this.loadGroupChatInfo(gcid).then(() => {\n            });\n        }\n    }\n    /*\n        set socket listener for groupChat updated\n     */\n    setChatUpdated = () => {\n        chatSocket.event.on('groupChat updated',this.reloadChatInfo);\n    }\n    // remove socket listener\n    removeChatUpdated = () => {\n        chatSocket.event.rm('groupChat updated',this.reloadChatInfo)\n    }\n\n    componentDidMount = () => {\n        this.chatChanged();\n        this.setChatUpdated();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did gcid change?\n         */\n        if(prevProps.gcid !== this.props.gcid){\n            this.chatChanged();\n        }\n    }\n\n    componentWillUnmount() {\n        this.removeChatUpdated();\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if (this.state.error === groupChatErrorCode.nan) {\n                return (\n                    <AddressNotValid/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if (this.state.loaded) {\n\n                switch(this.state.error){\n\n                    case groupChatErrorCode.none:\n\n                        switch(this.props.tab){\n                            case(groupChatTabs.chat):\n                                return (\n                                    <ChatContainer\n                                        chatType={this.global.currentChat.type}\n                                        chatId={this.global.currentChat.id}\n                                    />\n                                );\n\n                            case(groupChatTabs.info):\n                                return(\n                                    <ModalRouterGroupChatInfo\n                                        gcid={this.state.gcid}\n                                        data={this.state.chatData}\n                                    />\n                                );\n\n                            default:\n                                return null;\n                        }\n\n                    case groupChatErrorCode.notPartOfChat:\n                        return (\n                            <NoMemberInPublicChat/>\n                        );\n\n                    case groupChatErrorCode.private:\n                        return (\n                            <NoAuthorization/>\n                        );\n\n                    case groupChatErrorCode.chatNotExisting:\n                        return (\n                            <ChatNotExisting/>\n                        );\n\n                    case groupChatErrorCode.general:\n                        return(\n                            <GeneralError/>\n                        );\n\n                    default:\n                        return null;\n                }\n            }\n        };\n\n        return (\n            <div className=\"h-100\">\n                {renderLoader()}\n                {renderChat()}\n            </div>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nclass UserItem extends Component{\n\n    elementClicked = event => {\n\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\n    };\n\n    render() {\n        return(\n            <li>\n                <Link to={\"/chat/user/\" + this.props.uid}\n                      onClick={this.elementClicked}\n                      replace={true}\n                >\n                {this.props.username}\n                </Link>\n            </li>\n        )\n    }\n}\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport UserItem from \"./UserItem\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './selectChat.scss';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n/*\n    props:\n        showSearchBar: boolean\n            if false: searchValue comes as prop\n        searchValue\n        loadChats: function(searchValue,numAlreadyLoaded)\n */\nexport default class SelectChat extends Component{\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            showOptions: false,\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            /*\n                are there items left?\n             */\n            hasMore: true\n        };\n    }\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = (searchValue) => {\n\n        this.setState({\n            searchValue: searchValue,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more chats are loaded\n     */\n    loadChats = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const response = await this.props.loadChats(\n                    searchValue,\n                    length\n                );\n\n                if (response.ok) {\n                    //return json\n                    let data = await response.json();\n\n                    if (data.length === 0) {\n                        this.setState({\n                            hasMore: false\n                        })\n                    } else {\n                        this.setState(state => ({\n                            searchResult: state.searchResult.concat(data)\n                        }));\n                    }\n                    this.setState({\n                        error: errorCode.none\n                    });\n                } else {\n                    this.setState({\n                        error: errorCode.error\n                    });\n                }\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            is searchBar is not shown,\n                it is checked if searchValue has changed\n         */\n        if(!this.props.showSearchBar){\n            if(this.props.searchValue !== prevProps.searchValue){\n                this.searchChanged(this.props.searchValue);\n            }\n        }\n    }\n\n    render() {\n\n        if(this.state.error === errorCode.error){\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\" key={0}>\n                    Ein Fehler ist aufgetreten!\n                </div>\n            )\n        }\n            return (\n                <Dummy>\n                    {/*\n                        if showSearchBar is true, it gets shown\n                         */\n                        this.props.showSearchBar ?\n                            <div className=\"user-top\">\n                                <div className=\"searchUser\">\n                                    <input type=\"text\"\n                                           name=\"newChat-searchUser\"\n                                           className=\"form-control\"\n                                           placeholder=\"Benutzer suchen\"\n                                           onChange={(event) => {\n                                               this.searchChanged()\n                                           }}\n                                    />\n                                </div>\n                            </div>\n                            : null\n                    }\n                    <div\n                        className=\"selectChat\"\n                        ref={ref => this.scrollParentRef = ref}\n                    >\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={this.loadChats}\n                            hasMore={this.state.hasMore}\n                            loader={\n                                <div className=\"loader\" key={-1}>\n                                    <div\n                                        className=\"spinner-border text-secondary\"\n                                        role=\"status\"\n                                    >\n                                        <span className=\"sr-only\">\n                                            Loading...\n                                        </span>\n                                    </div>\n                                </div>\n                            }\n                            useWindow={false}\n                            getScrollParent={() => this.scrollParentRef}\n                            >\n                            <ul\n                                className=\"selectChat\">\n                                {this.state.searchResult.map((item, index) => (\n                                    <UserItem\n                                        key={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        hide={this.props.hide}\n                                    />\n                                ))}\n                                {this.state.searchResult.length === 0 ?\n                                    <div key={-1} className=\"nothingFound\">\n                                        Nichts gefunden!\n                                    </div>\n                                    :\n                                    null\n                                }\n                            </ul>\n                        </InfiniteScroll>\n                    </div>\n                </Dummy>\n            );\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport async function requestUsersNoChat(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    /*\n        response is returned\n     */\n    return await makeRequest('/user/noChat', config);\n}\nexport async function createGroupChat(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return await makeRequest('/group/', config);\n}\nexport async function fetchUsers(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest('/user/', config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}","import React,{Component} from \"react\";\nimport {tabs} from \"../NewChat\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport SelectChat from \"../../selectChat/SelectChat\";\nimport Dropdown from 'rc-dropdown';\n\nimport 'rc-dropdown/assets/index.css';\n\nimport './chooseUser.scss';\nimport {requestUsersNoChat} from \"../apiCalls\";\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class ChooseUser extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            /*\n                the value of the search input\n             */\n            searchValue: ''\n        };\n    }\n    /*\n        when new group gets clicked\n     */\n    newGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.newGroup);\n    };\n    /*\n        when join group is clicked\n     */\n    joinGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.chooseGroup);\n    };\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = event => {\n        const searchValue = event.target.value;\n\n        const searchValid = true;\n\n        this.setState({\n            searchValue: searchValue,\n            searchValid: searchValid\n        });\n    };\n\n    loadChats = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        /*\n            response is returned\n         */\n        return await requestUsersNoChat({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        });\n    };\n\n    render() {\n\n        const options = (\n            <div className=\"options\">\n                <ul>\n                    <li onClick={this.newGroupClick}>\n                        neue Gruppe\n                    </li>\n                    <li onClick={this.joinGroupClick}>\n                        einer Gruppe beitreten\n                    </li>\n                </ul>\n            </div>\n        );\n\n        return(\n            <Dummy>\n                <div className=\"user-top\">\n                    <div className=\"searchUser\">\n                        <input type=\"text\"\n                               name=\"newChat-searchUser\"\n                               className=\"form-control\"\n                               placeholder=\"Benutzer suchen\"\n                               onChange={this.searchChanged}\n                        />\n                    </div>\n                    <div className=\"user-more\">\n                        <Dropdown\n                            trigger={['click']}\n                            overlay={options}\n                            animation=\"slide-up\"\n                            alignPoint\n                        >\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\n                               role=\"button\"\n                            />\n                        </Dropdown>\n                    </div>\n                </div>\n                <SelectChat\n                    showSearchBar={false}\n                    searchValue={this.state.searchValue}\n                    loadChats={this.loadChats}\n                />\n            </Dummy>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/placeholder.3c40b139.png\";","import React,{Component} from \"react\";\n\nimport './groupInfoForm.scss';\nimport placeholder from '../../../img/placeholder.png';\n\nexport default class GroupInfoForm extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            groupName: '',\n            description: '',\n            isPublic: false\n        }\n    }\n\n    groupNameChanged = event => {\n        this.setState({\n            groupName: event.target.value\n        })\n    };\n\n    descriptionChanged = event => {\n        this.setState({\n            description: event.target.value\n        })\n    };\n\n    isPublicChanged = () => {\n        this.setState(state => ({\n           isPublic: !state.isPublic\n        }));\n    };\n\n    formSubmitted = event => {\n\n        event.preventDefault();\n\n        if(this.state.groupName !== '')\n            this.props.submitGroup({\n                name: this.state.groupName,\n                description: this.state.description,\n                isPublic: this.state.isPublic\n            });\n    };\n\n    render() {\n\n        return(\n            <div className=\"groupInfoForm\">\n                <form onSubmit={this.formSubmitted}>\n                    <img\n                        style={{\n                            display: 'none'\n                        }}\n                        id=\"groupImgInput1\"\n                        src={placeholder}\n                        alt=\"Placeholder\"\n                    />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleFormControlInput1\">\n                            Gruppenname\n                        </label>\n                        <input type=\"text\"\n                               name=\"groupName\"\n                               className=\"form-control\"\n                               id=\"input-groupName\"\n                               placeholder=\"Gruppenname\"\n                               value={this.state.name}\n                               onChange={this.groupNameChanged}\n                               minLength={1}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label\n                            htmlFor=\"description1\"\n                        >\n                            Beschreibung\n                        </label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"description1\"\n                            rows=\"3\"\n                            value={this.state.description}\n                            onChange={this.descriptionChanged}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"check-container\">\n                            öffentlicher chat\n                            <input\n                                type=\"checkbox\"\n                                checked={this.state.isPublic}\n                                onChange={this.isPublicChanged}\n                            />\n                            <span className=\"checkmark\">\n                                <i className=\"fas fa-check\" />\n                            </span>\n                        </label>\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            type=\"submit\"\n                            className=\"float-right btn btn-primary m-3\"\n                        >\n                            Gruppe erstellen\n                        </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport GroupInfoForm from \"./GroupInfoForm\";\nimport {createGroupChat, fetchUsers} from \"../apiCalls\";\n\nconst tabs = {\n    selectUsers: 0,\n    enterChatInfo: 1\n};\n\nclass NewGroup extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.selectUsers,\n            selectedUsers: []\n        }\n    }\n\n    showEnterChatInfo = selectedUsers => {\n\n        this.setState({\n            currentTab: tabs.enterChatInfo,\n            selectedUsers: selectedUsers\n        });\n    };\n\n    submitGroup = data => {\n\n        const users = new Array(this.state.selectedUsers.length);\n        for(let i=0;i<this.state.selectedUsers.length;i++){\n            users[i] = {\n                uid: this.state.selectedUsers[i].uid,\n                username: this.state.selectedUsers[i].username,\n                isAdmin: false\n            };\n        }\n\n        this.createGroupChat(data,users).then(r => {});\n    };\n\n    createGroupChat = async (data,users) => {\n        try {\n            const response = await createGroupChat({\n                data: data,\n                users: users\n            });\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok)\n                this.props.history.goBack();\n\n        }catch(error){\n\n        }\n    };\n\n    loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n        /*\n            response is returned\n         */\n        return await fetchUsers({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        })\n    };\n\n    render() {\n\n        switch(this.state.currentTab){\n\n            case tabs.selectUsers:\n                return (\n                    <SelectUsers\n                        onNext={this.showEnterChatInfo}\n                        loadUsers={this.loadUsers}\n                    />\n                );\n\n            case tabs.enterChatInfo:\n                return(\n                    <GroupInfoForm\n                        submitGroup={this.submitGroup}\n                    />\n                );\n\n            default:\n                return null;\n        }\n    }\n}\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\nimport ChooseUser from \"./chooseUser/ChooseUser\";\nimport NewGroup from \"./newGroup/NewGroup\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\n\nimport './newChat.scss';\n\nexport const tabs = {\n    chooseUser: 0,\n    newGroup: 1,\n    chooseGroup: 2\n};\n\nexport default class NewChat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.chooseUser\n        }\n    }\n\n    setCurrentTab = newTab => {\n        this.setState({\n            currentTab: newTab\n        });\n    };\n\n    render() {\n\n        const router = () => {\n\n            switch (this.state.currentTab) {\n\n                case tabs.chooseUser:{\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n\n                }\n\n                case tabs.newGroup:{\n                    return(\n                        <NewGroup />\n                    );\n                }\n\n                case tabs.chooseGroup:{\n                    return(\n                        <div>\n                            <h4>chooseGroup</h4>\n                        </div>\n                    );\n                }\n\n\n                default: {\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n                }\n            }\n        };\n\n        const getHeader = () => {\n\n            switch(this.state.currentTab){\n\n                case tabs.chooseUser:\n                    return 'Neuer Chat';\n\n                case tabs.newGroup:\n                    return 'Neue Gruppe';\n\n                case tabs.chooseGroup:\n                    return 'Gruppe auswählen';\n\n                default:\n                    return 'Neuer Chat';\n\n            }\n        };\n\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>{getHeader()}</h1>\n                </ModalHeader>\n                <ModalMain>\n                    <div className=\"newChat\">\n                        {router()}\n                    </div>\n                </ModalMain>\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport const fetchUserInfo = async (uid) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await makeRequest('/user/' + uid, config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching UserInfo\");\n    }\n}\nexport const blockUser = async (uid) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/user/block/' + uid, config);\n}\nexport const unblockUser = async (uid) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/user/unblock/' + uid, config);\n}","import React,{Component} from 'react';\nimport {blockUser,unblockUser} from \"./userInfoApiCalls\";\n\nexport default class UserOptions extends Component {\n\n    blockUser = () => {\n        blockUser(this.props.uid)\n            .then(response => {\n                if(response.ok)\n                    this.props.onBlockedBySelfChanged(true);\n            })\n            .catch(() => {});\n    }\n\n    unblockUser = () => {\n        unblockUser(this.props.uid)\n            .then(response => {\n                if(response.ok)\n                    this.props.onBlockedBySelfChanged(false);\n            })\n            .catch(() => {});\n    }\n\n    render() {\n        return(\n            <ul className={\"userOptions\"}>\n                {!this.props.userInfo.blockedBySelf ?\n                    <li\n                        className={\"noLink\"}\n                        onClick={this.blockUser}\n                    >\n                        blockieren\n                    </li>\n                    :\n                    <li\n                        className={\"noLink\"}\n                        onClick={this.unblockUser}\n                    >\n                        nicht mehr blockieren\n                    </li>\n                }\n            </ul>\n        )\n    }\n}","import React, {Component} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {fetchUserInfo} from \"./userInfoApiCalls\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport Dropdown from \"rc-dropdown\";\nimport UserOptions from \"./UserOptions\";\n\nimport './userInfo.scss'\n\nexport const errorCode = {\n    none: 0,\n    isSelf: 1,\n    //not a number\n    nan: 2,\n    notExisting: 3,\n    defaultError: 4\n};\n\nexport default class UserInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: errorCode.none,\n            // the loaded data\n            userInfo: null\n        }\n    }\n\n    render() {\n        /*\n            if not already loaded, show nothing\n         */\n        if(!this.state.loaded){\n            return null;\n        }\n        /*\n            if the user self is requested\n         */\n        else if(this.state.error === errorCode.isSelf){\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            Du\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        xx\n                    </ModalMain>\n                </Dummy>\n            )\n        /*\n            if there is a error, show a generic error message\n         */\n        }else if(this.state.error !== errorCode.none){\n            return(\n                <div>Error!</div>\n            )\n        /*\n            no error, show the userInfo\n         */\n        }else{\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            {this.state.userInfo.username}\n                            &nbsp;\n                            <Link to={\"/chat/user/\" + this.state.uid}>\n                                <i className=\"far fa-comment-alt\" />\n                            </Link>\n                            &nbsp;&nbsp;\n                            <Dropdown\n                                trigger={['hover','click']}\n                                overlay={\n                                    <UserOptions\n                                        uid={this.state.uid}\n                                        userInfo={this.state.userInfo}\n                                        onBlockedBySelfChanged={blockedBySelf => {\n                                            this.setState(state => ({\n                                                userInfo: {\n                                                    ...state.userInfo,\n                                                    blockedBySelf: blockedBySelf\n                                                }\n                                            }))\n                                            this.updateChat();\n                                        }}\n                                    />\n                                }\n                            >\n                                <i\n                                    className=\"fas fa-ellipsis-v user-options-btn \"\n                                    role=\"button\"\n                                />\n                            </Dropdown>\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        <div className=\"userInfo\">\n                            {this.state.userInfo.blockedByOther ?\n                                <div className={\"error\"}>\n                                    Du wurdest von {this.state.userInfo.username} blockiert\n                                </div>\n                                :\n                                null\n                            }\n                            {this.state.userInfo.blockedBySelf ?\n                                <div className={\"error\"}>\n                                    Du hast {this.state.userInfo.username} blockiert\n                                </div>\n                                :\n                                null\n                            }\n                            {!this.isBlocked() ?\n                                this.state.userInfo.groups.length > 0 ?\n                                    <Dummy>\n                                        <h3>{this.state.userInfo.groups.length} gemeinsame Gruppen:</h3>\n                                        <ul className={\"groupList\"}>\n                                            {this.state.userInfo.groups.map((item,index) => (\n                                                <li key={index}>\n                                                    <Link to={\"/chat/groupInfo/\" + item.id}>\n                                                        {item.chatName}\n                                                    </Link>\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </Dummy>\n                                    :\n                                    <h3>\n                                        keine gemeinsamen Gruppen\n                                    </h3>\n                            :\n                                null}\n                        </div>\n                    </ModalMain>\n                </Dummy>\n            )\n        }\n    }\n\n    isBlocked = () => {\n        return this.state.userInfo.blockedBySelf || this.state.userInfo.blockedByOther;\n    }\n\n    updateChat = () => {\n        // update the chat in global\n        if(chatSocket.users.getIndex(this.state.uid) !== -1)\n            chatSocket.users.get(this.state.uid).updateChatBlockInfo(this.state.userInfo);\n    }\n\n    setUser = async() => {\n\n        if(isNaN(this.props.uid)){\n            this.setState({\n                error: errorCode.nan\n            });\n        }else{\n            const uid = parseInt(this.props.uid);\n            this.setState({\n                uid: uid,\n                error: errorCode.none,\n                loaded: false\n            });\n            try {\n                const data = await fetchUserInfo(uid)\n                const uidSelf = chatSocket.userSelf.uid;\n\n                if (uidSelf === uid) {\n                    this.setState({\n                        error: errorCode.isSelf,\n                        loaded: true\n                    });\n                }else if(!data.userExists){\n                    this.setState({\n                        error: errorCode.notExisting,\n                        loaded: true\n                    });\n                }else {\n                    this.setState({\n                        userInfo: data,\n                        loaded: true\n                    });\n                }\n            }catch(err){\n                this.setState({\n                    error: errorCode.defaultError,\n                    loaded: true\n                });\n            }\n        }\n    };\n\n    async componentDidMount() {\n        try {\n            await this.setUser();\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        try{\n            /*\n                check if uid changed\n             */\n            if(prevProps.uid !== this.props.uid){\n                await this.setUser();\n            }\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport const getUserSelf = async () => {\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n\n    const response =\n        await makeRequest(\n            '/user/self',\n            config\n        );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error requesting user info!\");\n    }\n}\n\nexport const setEmail = async (body) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n\n    return await makeRequest(\n        '/user/setEmail',\n        config\n    );\n}","import {makeRequest} from \"./requests\";\n\nexport async function subscribePush(tokens) {\n    // Get the server's public key\n    const response = await makeRequest('/push/vapidPublicKey', {method: 'get'}, tokens);\n    const vapidPublicKey = await response.text();\n    // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet\n    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n\n    await navigator.serviceWorker.register('/push-service-worker.js');\n\n    navigator.serviceWorker.ready.then(registration => {\n        if (!registration.pushManager) {\n            console.log(\"Push Unsupported\")\n            return\n        }\n\n        registration.pushManager\n            .subscribe({\n                userVisibleOnly: true, //Always display notifications\n                applicationServerKey: convertedVapidKey\n            })\n            .then(subscription => {\n                return makeRequest('/push/register', {\n                    method: 'post',\n                    headers: {\n                        'Content-type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        subscription: subscription\n                    }),\n                }, tokens)\n            })\n            .catch(err => console.error(\"Push subscription error: \", err))\n    }).catch(err => {\n        console.error(err.message, err)\n    });\n}\nexport function unsubscribePush() {\n    if(navigator.serviceWorker)\n        navigator.serviceWorker.ready.then(registration => {\n            //Find the registered push subscription in the service worker\n            registration.pushManager\n                .getSubscription()\n                .then(subscription => {\n                    if (!subscription) {\n                        return\n                        //If there isn't a subscription, then there's nothing to do\n                    }\n            subscription\n              .unsubscribe()\n              .then(() => {})\n              .catch(err => console.error(err))\n          })\n          .catch((err) => console.error(err))\n  });\n}\n// This function is needed because Chrome doesn't accept a base64 encoded string\n// as value for applicationServerKey in pushManager.subscribe yet\n// https://bugs.chromium.org/p/chromium/issues/detail?id=802280\nfunction urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding)\n        .replace(/\\-/g, '+')\n        .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n        outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n}","import React,{Component} from \"reactn\";\nimport {subscribePush, unsubscribePush} from \"../../global/push\";\n\nexport default class Permissions extends Component {\n\n    subscribed;\n\n    constructor(props) {\n        super(props);\n\n        const permissionsString = localStorage.getItem('permissions');\n        let permissions;\n        if(permissionsString === null){\n            permissions = {\n                notifications: false\n            }\n            localStorage.setItem('permissions',JSON.stringify(permissions));\n        }else{\n            permissions = JSON.parse(permissionsString);\n        }\n\n        this.state = {\n            permissions: permissions\n        }\n        this.subscribed =  permissions.notifications;\n    }\n\n    setNotifications = () => {\n        this.setState(state => {\n            let res = {\n                permissions: {\n                    ...state.permissions,\n                    notifications: !state.permissions.notifications\n                }\n            }\n            // subscribe / unsubscribe push\n            if(res.permissions.notifications) {\n                Notification.requestPermission().then(permiss => {\n                    if(permiss !== 'granted')\n                        this.setState(state => {\n                            let res = {\n                                permissions: {\n                                    ...state.permissions,\n                                    notifications: false\n                                }\n                            }\n                            this.setPermissions(res.permissions);\n                            return res;\n                        })\n                })\n                if(!this.subscribed) {\n                    subscribePush(this.global.authTokens).then(() => {});\n                    this.subscribed = true;\n                }\n            }else {\n                this.subscribed = false;\n                unsubscribePush()\n            }\n            this.setPermissions(res.permissions);\n            return res;\n        })\n    }\n\n    setPermissions = (permissions) => {\n        localStorage.setItem('permissions',JSON.stringify(permissions));\n    }\n\n    render() {\n        return(\n            <div>\n                <h4>Berechtigungen</h4>\n\n                <span>Benachrichtigungen</span>\n                &nbsp;\n                <label className=\"switch\">\n                    <input\n                        type=\"checkbox\"\n                        checked={this.state.permissions.notifications}\n                        onChange={this.setNotifications}\n                    />\n                    <span className=\"slider round\"/>\n                </label>\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./settings.scss\";\nimport {getUserSelf, setEmail} from \"./apiCalls\";\nimport EditableLabel from \"../../utilComp/EditableLabel\";\nimport Permissions from \"./Permissions\";\n\nexport default class Settings extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state  = {\n            userDataSelf: null,\n            loaded: false,\n            error: false,\n            emailChangeRequested: false,\n            setEmailError: false,\n            setEmailErrorMessage: ''\n        }\n    }\n\n    changeEmail = value => {\n        //did the mail address change?\n        if(this.state.userDataSelf.email !== value)\n            setEmail({\n                email: value\n            }).then(async response => {\n                if(response.status === 200) {\n                    const data = await response.json();\n                    // check email taken\n                    if(data.emailTaken){\n                        this.setState({\n                            emailChangeRequested: false,\n                            setEmailError: true,\n                            setEmailErrorMessage: 'E-Mail wird bereits verwendet!'\n                        });\n                    }else{\n                        this.setState({\n                            setEmailError: false,\n                            emailChangeRequested: true\n                        });\n                    }\n                }else {\n                    this.setState({\n                        setEmailError: true,\n                        setEmailErrorMessage: 'Fehler beim Versenden der E-Mail!',\n                        emailChangeRequested: false\n                    })\n                }\n            }).catch(err => {\n                this.setState({\n                    setEmailError: true,\n                    setEmailErrorMessage: 'Fehler beim Versenden der E-Mail!',\n                    emailChangeRequested: false\n                })\n            });\n    }\n\n    render() {\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>Einstellungen</h1>\n                </ModalHeader>\n                <ModalMain>\n                    {this.state.loaded ?\n                        <div className={\"settings\"}>\n                            <span className=\"settings-header\">\n                                E-Mail Addresse: <br/>\n                            </span>\n                            <EditableLabel\n                                className = \"email\"\n                                value = {this.state.userDataSelf.email}\n                                onChange = {this.changeEmail}\n                            >\n                                {this.state.userDataSelf.email === '' ?\n                                    \"Noch keine E-Mail Addresse!\"\n                                    :\n                                    this.state.userDataSelf.email\n                                }\n                            </EditableLabel>\n                            {this.state.emailChangeRequested ?\n                                <Dummy>\n                                    &nbsp;\n                                    <span className=\"emailChanged\">E-Mail mit Verifizierungslink wurde versendet!</span>\n                                </Dummy>\n                                :\n                                null\n                            }\n                            {this.state.setEmailError ?\n                                <Dummy>\n                                    &nbsp;\n                                    <span className=\"set-email-error\">\n                                        {this.state.setEmailErrorMessage}\n                                    </span>\n                                </Dummy>\n                                :\n                                null\n                            }\n                            <div className={\"settings-about\"}>\n                                <Link to={\"/about\"}>über diese Seite</Link>\n                            </div>\n                            <Permissions/>\n                        </div>\n                    : (!this.state.error ?\n                        <span className=\"loading\">\n                            laden...\n                        </span>\n                    : <span className=\"error\">\n                                ein Fehler ist aufgetreten!\n                    </span>)}\n                </ModalMain>\n            </Dummy>\n        )\n    }\n\n    async componentDidMount() {\n        try {\n            const userDataSelf = await getUserSelf();\n            this.setState({\n                loaded: true,\n                userDataSelf: userDataSelf\n            })\n        }catch (e) {\n            this.setState({error: true})\n        }\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport Modal from \"../utilComp/Modal\";\nimport NewChat from \"./newChat/NewChat\";\nimport Dummy from \"../utilComp/Dummy\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterBigScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                {props.children}\n                <Modal>\n                    <NewChat />\n                </Modal>\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <Dummy>\n                        {props.children}\n                        <Modal>\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\n                        </Modal>\n                    </Dummy>\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                {props.children}\n                <Modal>\n                    <Settings/>\n                </Modal>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\n\nexport default function GridBigScreens(props){\n\n    const { path } = useRouteMatch();\n\n    return(\n        <div className=\"main-container\">\n            <div className=\"mc-left\">\n\n                <ChatList />\n            </div>\n            <div className=\"mc-right\">\n\n                <Switch>\n                    <Route path={`${path}/user/:uid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/group/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/groupInfo/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.info}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={path}>\n                        <ModalRouterBigScreens>\n                            <h1>noch kein chat ausgewählt</h1>\n                        </ModalRouterBigScreens>\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    )\n}\n","import React,{Component} from \"react\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nimport './typeMessageContainer.scss';\n\nexport default class TypeMsgContainer extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersTyping: []\n        };\n    }\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        this.setState({\n            usersTyping: chat.getUsersTyping()\n        });\n    };\n\n    render() {\n\n        return(\n            <div className=\"typeMsg-container\">\n                {this.state.usersTyping.map((user,index) => (\n                    <div key={index} className=\"typeMsg\">\n                        {user.username + \" schreibt...\"}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn ja, werden events neu initialisiert\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n        }\n    }\n\n    componentWillUnmount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport NewChat from \"./newChat/NewChat\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                <NewChat />\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                <Settings/>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React,{useGlobal} from \"reactn\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\n\nexport default function RouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n    const [global,setGlobal] = useGlobal();\n\n    const renderTypeMsgContainer = () => {\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\n            return(\n                <TypeMsgContainer\n                    chatType={global.currentChat.type}\n                    chatId={global.currentChat.id}\n                />\n            )\n        }\n        return null;\n    };\n\n    return(\n            <Switch>\n                <Route path={`${path}/user/:uid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <div className=\"main-container\">\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </div>\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                }>\n                </Route>\n                <Route path={`${path}/group/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <div className=\"main-container\">\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </div>\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={`${path}/groupInfo/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.info}\n                            />\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={path}>\n                    <ModalRouterSmallScreens>\n                        <div className=\"chat-list-outer-small\">\n                            <ChatList/>\n                        </div>\n                    </ModalRouterSmallScreens>\n                </Route>\n                <Route path = \"*\">\n                    <h3>Not found!</h3>\n                </Route>\n            </Switch>\n    )\n\n}","import React,{Component} from \"react\";\nimport Header from \"./Header/Header\";\nimport Responsive from \"../responsive/Responsive\";\nimport GridBigScreens from \"./GridBigScreens\";\nimport RouterSmallScreens from \"./RouterSmallScreens\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nimport './Grid.scss';\n\nexport default class Chat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                which modal is currently open\n                    0: none\n             */\n            modal: 0,\n            /*\n                info about the currently open modal\n             */\n            modalInfo: null,\n            /*\n                is shown at the user-icon\n             */\n            notifications: 0\n        };\n    }\n\n    componentDidMount() {\n        /*\n            if chatsocket is undefined, it gets initialized\n         */\n        if (!chatSocket.initCalled) {\n            chatSocket.init().then(r => {});\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"h-100\">\n\n                <Header/>\n\n                <Responsive displayIn={[\"Mobile\"]}>\n\n                    <RouterSmallScreens />\n                </Responsive>\n\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n\n                    <GridBigScreens/>\n                </Responsive>\n\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nimport \"./About.scss\";\n\nexport default function About(){\n    return(\n        <div className={\"about\"}>\n            <h2>Über diese Seite</h2>\n            <h4>Erstellt von:</h4>\n            Stefan Schlaghuber<br/>\n            2002 Großmugl<br/>\n            stefan.schlaghuber@gmail.com<br/>\n        </div>\n    )\n}","import {makeRequest} from \"./requests\";\n\nexport async function reqUserSelf(tokens){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest(\n        '/user/self',\n        config,\n        tokens\n    );\n}","import {addReducer} from 'reactn';\nimport {fetchData} from \"./globalData\";\nimport {resetChatSocket} from \"../chatData/chatSocket\";\nimport {reqUserSelf} from \"./apiCalls\";\nimport {subscribePush, unsubscribePush} from \"./push\";\n\nexport function authTokens(){\n\n    addReducer('deleteAuthTokens',(global,dispatch) => {\n\n        localStorage.removeItem(\"authTokens\");\n        /*\n            TODO: without reload\n         */\n        unsubscribePush();\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        dispatch.deleteUserSelf();\n        dispatch.resetGlobal();\n        resetChatSocket();\n\n        return {\n            loaded: true,\n            authTokens: undefined\n        };\n    });\n\n    addReducer('initAuthTokens',async(global,dispatch,existingTokens) => {\n\n        try {\n            /*\n                util data is fetched from the server\n             */\n            await fetchData();\n\n            const response = await reqUserSelf(existingTokens);\n            /*\n                not authenticated\n                    --> token is deleted\n                    --> login page\n             */\n            if (response.status === 403) {\n                localStorage.removeItem(\"authTokens\");\n                return {\n                    loaded: true,\n                    authTokens: undefined\n                };\n            }\n            /*\n                userSelf is updated\n             */\n            else {\n                // get permissions\n                const permissions = JSON.parse(localStorage.getItem('permissions'));\n                if(permissions !== null && permissions.notifications)\n                    await subscribePush(existingTokens);\n                else\n                    unsubscribePush();\n\n                const data = await response.json();\n\n                const {uid, username} = data;\n                dispatch.setUserSelf(uid, username);\n\n                return ({\n                    loaded: true,\n                    authTokens: existingTokens\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            return({\n                loaded: false\n            })\n        }\n    });\n\n    addReducer('setAuthTokens',async (global,dispatch,tokens) => {\n\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n\n        await subscribePush(tokens);\n\n        return({\n            loaded: true,\n            authTokens: tokens\n        });\n    });\n}","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {isVerificationCodeValid, setPassword} from \"./apiCalls\";\nimport {ErrorMsg, SuccessMsg} from \"./MsgBox\";\nimport TogglePassword from \"./TogglePassword\";\nimport BackToLogin from \"./BackToLogin\";\n\nexport default class ResetPassword extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            linkValid: true,\n            error: false,\n            errorMessage: '',\n            password: '',\n            passwordRepeat: '',\n            passwordResetSuccess: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const valConstraints = {\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            password: this.state.password,\n            passwordRepeat: this.state.passwordRepeat\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\") {\n\n            let errorMessage;\n\n            if (typeof (valResult.password) != \"undefined\")\n                errorMessage = valResult.password[0];\n            else if (typeof (valResult.passwordRepeat) != \"undefined\")\n                errorMessage = \"Passwörter stimmen nicht überein!\"\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n        }else {\n\n            const {password} = this.state;\n\n            setPassword(this.props.verificationCode, password)\n                .then(response => {\n                    if (response.status === 200)\n                        this.setState({\n                            error: false,\n                            passwordResetSuccess: true\n                        });\n                    else if(response.status === 403)\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Fehler: Dieser Link ist ungültig!'\n                        })\n                    else\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    }\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n    successMessage = () => {\n        if(this.state.passwordResetSuccess)\n            return (\n                <SuccessMsg>\n                    Passwort erfolgreich zurückgesetzt!\n                </SuccessMsg>\n            )\n    }\n    componentDidMount = () => {\n        isVerificationCodeValid(this.props.verificationCode)\n            .then(response => {\n                if(response.status !== 200)\n                    this.setState({\n                        linkValid: false\n                    })\n            })\n            .catch(err => {\n                this.setState({\n                    linkValid: false\n                })\n            });\n    }\n    render() {\n        if(this.state.linkValid)\n            return (\n                <div className=\"h-100\" style={{display: \"flex\",overflowY: \"auto\"}}>\n                    <div className=\"col-sm-12 my-auto\">\n                        <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                            <BackToLogin/>\n                            <h1>neues Passwort eingeben</h1>\n                            {this.errorMessage()}\n                            <form onSubmit={this.submitHandler}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Passwort:</label>\n                                    <TogglePassword\n                                        name=\"password\"\n                                        className=\"form-control\"\n                                        placeholder=\"Passwort eingeben\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"passwordRepeat\">Passwort wiederholen:</label>\n                                    <TogglePassword\n                                        name=\"passwordRepeat\"\n                                        className=\"form-control\"\n                                        placeholder=\"Passwort eingeben\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </div>\n                                {this.successMessage()}\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    value=\"Passwort zurücksetzen\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            );\n        else\n            return (\n                <ErrorMsg>\n                    Ungültiger Link!\n                </ErrorMsg>\n            )\n    }\n}","import React, {useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport VerifyEmail from \"./Auth/VerifyEmail\";\nimport ForgotPassword from \"./Auth/ForgotPassword\";\nimport PrivateRoute from \"./utilComp/PrivateRoute\";\nimport Chat from \"./Home/Home\";\nimport About from \"./About/About\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\nimport ResetPassword from \"./Auth/ResetPassword\";\n\ninitGlobal();\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"authTokens\"));\n        dispatch.initAuthTokens(existingTokens);\n    },[]);\n\n    return (\n        <Router>\n            <Switch>\n                <PrivateRoute path=\"/chat\" component={Chat}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/register\" component={Register}/>\n                <Route path={\"/verifyEmail/:code\"} render={\n                    routeProps => (\n                        <VerifyEmail verificationCode={routeProps.match.params.code}/>\n                    )\n                } />\n                <Route exact path=\"/forgotPassword\" component={ForgotPassword}/>\n                <Route path={\"/resetPassword/:code\"} render={\n                    routeProps => (\n                        <ResetPassword verificationCode={routeProps.match.params.code}/>\n                    )\n                } />\n                <Route path={\"/about\"}>\n                    <About/>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to={\"/chat\"}/>\n                </Route>\n                <Route path=\"*\">\n                    <NoMatch/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\nimport {initChats} from \"./initChats\";\nimport {initChatReducers} from \"./chats\";\nimport {authTokens} from \"./authTokens\";\n\nexport function initGlobal(){\n\n    setGlobal({\n        /*\n            is the page ready to be shown?\n         */\n        loaded: false,\n        /*\n            the authentication token\n         */\n        authTokens: undefined,\n        /*\n            info about the user self\n         */\n        userSelf: {},\n        /*\n            what info should be shown at the left center of the header?\n         */\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        /*\n            the chat that is currently selected\n         */\n        currentChat: {\n            type: '',\n            id: 0,\n            // the name of the chat\n            chatName: '',\n            /*\n                unread messages inside the currentChat\n             */\n            newMessages: 0,\n            /*\n                the messages in the currentChat, displayed in chatContainer\n             */\n            messages: [],\n            isStillMember: true,\n            blockedBySelf: false,\n            blockedByOther: false\n        },\n        /*\n            the shown tempChat\n         */\n        tempChat: null,\n        /*\n            all chats of the user are stored here\n         */\n        chats: [],\n        /*\n            number of chats with new messages\n         */\n        newMessages: 0\n    });\n\n    initChats();\n\n    /*\n        the userSelf gets set\n     */\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\n\n        return {\n            userSelf: {\n                uid: uid,\n                username: username\n            }\n        }\n    });\n    /*\n        userSelf is deleted\n     */\n    addReducer('deleteUserSelf',(global,dispatch) => {\n\n       return {\n           userSelf: {}\n       }\n    });\n    /*\n        // eslint-disable-next-line no-unused-vars\n        global gets reseted\n     */\n    addReducer('resetGlobal',(global,dispatch) => ({\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        currentChat: {\n            type: '',\n            id: 0,\n            chatName: '',\n            newMessages: 0,\n            messages: [],\n            isStillMember: true,\n            blockedBySelf: false,\n            blockedByOther: false\n        },\n        tempChat: null,\n        chats: [],\n        newMessages: 0\n    }));\n    /*\n        chat reducers are initialized\n     */\n    initChatReducers();\n    /*\n        authTokens reducers are initialized\n     */\n    authTokens();\n}","import chatSocket from \"../chatData/chatSocket\";\nimport {setGlobal} from \"reactn\";\n\nexport function initChats(){\n\n    function chatsLoaded(chats){\n        setGlobal({\n            chats: chats\n        });\n    }\n    /*\n       chats get initialized\n       is loading of chats already finished?\n           --> chatArray gets requested immediately\n    */\n    if(chatSocket.finishedLoading){\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\n        /*\n            otherwise --> event handler that gets triggered when loading finished\n         */\n    }else{\n        chatSocket.event.on('chats loaded',chatsLoaded);\n    }\n}","import {addReducer} from \"reactn\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nexport function initChatReducers(){\n\n    /*\n        is the chat the current chat?\n     */\n    function isSelected(global,chat){\n\n        const currentChat = global.currentChat;\n        return currentChat.type === chat.type\n            && currentChat.id === chat.id;\n    }\n    /*\n        index of the chat is searched\n     */\n    function findIndex(global,chat){\n\n        return global.chats.findIndex(\n            element => (\n                element.id === chat.id\n                && element.type === chat.type)\n        );\n    }\n    /*\n        is called when there is a new message\n     */\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1){\n            /*\n                is the chat selected?\n             */\n            if(isSelected(global,chat)) {\n                /*\n                    chat is selected\n                        latestMessageObject is updated\n                        newMessage counter is set to 0\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                chatObject.unreadMessages = 0;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n                /*\n                    message is added to messages in currentChat\n                 */\n                const currentChat = {\n                    ...global.currentChat,\n                    messages: global.currentChat.messages.concat(message),\n                    newMessages: global.currentChat.newMessages + 1\n                };\n                return {\n                    chats: chatsClone,\n                    currentChat: currentChat\n                };\n            }else{\n                /*\n                    chat is not selected\n                        latestMessageObject is updated\n                        newMessage counter gets incremented\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                /*\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\n                 */\n                let newMessages = global.newMessages;\n                if(chatObject.unreadMessages === 0){\n                    newMessages++;\n                }\n\n                chatObject.unreadMessages = unreadMessages + 1;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n\n                return {\n                    chats: chatsClone,\n                    newMessages: newMessages\n                };\n            }\n        }\n    });\n    /*\n        gets called when chat should be updated\n            toTop: should chat be appended at top?\n     */\n    addReducer('updateChat',(global,dispatch,chat) => {\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1) {\n            /*\n                chat is not selected\n                    latestMessageObject is updated\n                    newMessage counter gets incremented\n             */\n            const chatsClone = global.chats.splice(0);\n            /*\n                item is deleted from array\n             */\n            chatsClone.splice(index,1);\n            /*\n                get chat object\n             */\n            const chatObject = chat.getChatObject();\n            /*\n                item is added to start of the array\n             */\n            chatsClone.unshift(chatObject);\n\n            return {\n                chats: chatsClone\n            };\n        }\n    });\n    /*\n        gets called out of changeCurrentChat in chatSocket\n     */\n    addReducer('selectChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1) {\n            /*\n                chats is cloned\n             */\n            const chatsClone = global.chats.splice(0);\n            const item = chatsClone[index];\n            /*\n                if there where unread messages, newMessages counter is decremented by 1\n             */\n            let newMessages = global.newMessages;\n            if(item.unreadMessages > 0){\n                newMessages--;\n            }\n            /*\n                unreadMessages is set to 0\n             */\n            item.unreadMessages = 0;\n            chat.unreadMessages = 0;\n            chatsClone[index] = item;\n            /*\n                change is emitted to server\n             */\n            chatSocket.socket.emit('change chat', {\n                type: chat.type,\n                id: chat.id\n            });\n\n            return {\n                currentChat: {\n                    type: chat.type,\n                    id: chat.id,\n                    chatName: chat.chatName,\n                    messages: chat.getMessages(),\n                    newMessages: 0,\n                    isStillMember: chat.type !== \"groupChat\" || chat.isStillMember,\n                    blockedBySelf: chat.isBlockedBySelf(),\n                    blockedByOther: chat.isBlockedByOther()\n                },\n                chats: chatsClone,\n                tempChat: null,\n                newMessages: newMessages\n            }\n        }\n    });\n    /*\n        is called when no chat should be selected\n     */\n    addReducer('selectNoChat',(global,dispatch) => {\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            currentChat: {\n                type: '',\n                id: 0,\n                chatName: '',\n                messages: [],\n                newMessages: 0,\n                isStillMember: true,\n                blockedBySelf: false,\n                blockedByOther: false\n            },\n        }\n    });\n    /*\n        loaded messages are added\n     */\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\n\n        return {\n            currentChat: {\n                ...global.currentChat,\n                messages: messages ?\n                    messages.concat(global.currentChat.messages)\n                    : global.currentChat.messages\n            }\n        };\n    });\n    /*\n        new chat is added\n     */\n    addReducer('addChat',(global,dispatch,chat) => {\n\n        function isDateBefore(chat1,chat2){\n            /*\n                do latestMessages exist?\n             */\n            if(!chat1.latestMessage)\n                return true;\n            else if(!chat2.latestMessage)\n                return false;\n            else\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\n        }\n        /*\n            place the chat at the right position\n            chats is cloned\n         */\n        const chatsClone = global.chats.splice(0);\n        const chatObject = chat.getChatObject();\n\n        if(chatsClone.length === 0)\n            return {\n                chats: [chatObject]\n            };\n\n        for (let i = 0; i < chatsClone.length; i++) {\n            if (isDateBefore(chatsClone[i], chatObject)) {\n                chatsClone.splice(i, 0, chatObject);\n                break;\n            }\n        }\n\n        return {\n            chats: chatsClone\n        }\n\n    });\n    /*\n        chat is removed\n     */\n    addReducer('removeChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            chats is cloned\n         */\n        const chatsClone = this.state.chats.splice(0);\n        /*\n            item is deleted from array\n         */\n        chatsClone.splice(index,1);\n\n        return {\n            chats: chatsClone\n        }\n    });\n    /*\n        tempChat is shown\n     */\n    addReducer('showTempChat',(global,dispatch) => {\n\n        const chat = chatSocket.temporaryChat.chatNow;\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            tempChat: chat.getChatObject(),\n            currentChat: {\n                type: 'tempChat',\n                id: 0,\n                chatName: '',\n                messages: [],\n                isStillMember: true,\n                // TODO get blockInfo\n                blockedBySelf: false,\n                blockedByOther: false\n            }\n        }\n    });\n    /*\n        tempChat is updated\n     */\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\n        tempChat: chat.getChatObject(),\n        currentChat: {\n            type: 'tempChat',\n            id: 0,\n            chatName: '',\n            messages: [],\n            isStillMember: true,\n            blockedBySelf: false,\n            blockedByOther: false\n        }\n    }));\n    /*\n        tempChat is hidden\n     */\n    addReducer('hideTempChat',(global,dispatch) => ({\n        tempChat: null\n    }));\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}