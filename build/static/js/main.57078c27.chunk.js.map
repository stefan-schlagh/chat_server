{"version":3,"sources":["img/placeholder.png","Auth/MsgBox.js","Auth/TogglePassword.js","Auth/apiCalls.js","Auth/Login.js","Auth/Register.js","utilComp/PrivateRoute.js","responsive/utilResponsive.js","responsive/Responsive.js","utilComp/Dummy.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","util/Color.js","util/BinSearch.js","global/requests.js","chatData/apiCalls.js","chatData/User.js","global/globalData.js","Home/chatView/chatContainer/message/NormalMessage.js","Home/chatView/chatContainer/message/StatusMessage.js","Home/chatView/chatContainer/message/Message.js","chatData/message/statusMessage.js","chatData/message/message.js","util/Event.js","chatData/chat/chat.js","chatData/chat/normalChat.js","chatData/chat/groupChat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/apiCalls.js","Home/chatView/chatContainer/MessageForm.js","Home/chatView/chatContainer/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/chatViewErrorMessages.js","Home/chatView/NormalChatView.js","utilComp/Modal.js","Home/selectUsers/UserItem.js","Home/selectUsers/UserList.js","Home/selectUsers/SelectUsers.js","Home/chatView/groupChatInfo/apiCalls.js","Home/chatView/groupChatInfo/AddUsers.js","Home/chatView/groupChatInfo/UserOptions.js","Home/chatView/groupChatInfo/ChatOptions.js","Home/chatView/groupChatInfo/edit/inlineEdit.js","Home/chatView/groupChatInfo/edit/editDescription.js","Home/chatView/groupChatInfo/edit/editChatName.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/groupChatInfo/ModalRouterGroupChatInfo.js","Home/chatView/GroupChatView.js","Home/selectChat/UserItem.js","Home/selectChat/SelectChat.js","Home/newChat/apiCalls.js","Home/newChat/chooseUser/ChooseUser.js","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/userInfoApiCalls.js","Home/userInfo/UserInfo.js","Home/settings/Settings.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","About/About.js","global/apiCalls.js","global/authTokens.js","App.js","global/global.js","global/initChats.js","global/chats.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorMsg","className","this","props","children","Component","TogglePassword","state","showPassword","onClick","setState","type","login","username","password","a","config","method","headers","body","JSON","stringify","fetch","response","ok","json","data","success","getDispatch","setUserSelf","uid","setAuthTokens","tokens","register","Login","changeHandler","event","nam","target","name","val","value","submitHandler","preventDefault","uNameErr","pwErr","valConstraints","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","valResult","validate","valid","then","history","push","undefined","redirect","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","to","withRouter","Register","pwRepeatErr","passwordRepeat","equality","pwRepeat","PrivateRoute","component","rest","useGlobal","global","render","loaded","authTokens","pathname","referer","location","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","width","window","innerWidth","document","documentElement","clientWidth","height","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","addEventListener","removeEventListener","React","PureComponent","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","infoHeaderCenter","HeaderLeft","id","goBack","newMessages","HeaderCenter","ihcData","data-toggle","title","gcid","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","setTimeout","clickDocument","changeChecked","logout","dispatch","deleteAuthTokens","checked","userSelf","BottomToolTip","text","placement","trigger","overlay","ChatSearchBox","searchChanged","onSearch","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","right","k","floor","i","getIndex","splice","getNearestKey","Array","makeRequest","tokensP","getGlobal","configI","status","Error","selectChats","createNormalChat","selectUser","loadMessages","UserErrorCode","chatSocket","users","get","normalChat","user","temporaryChat","createNew","doesExist","userExists","blocked","User","_normalChat","_groupChats","color","groupChats","add","remove","_uid","_username","_color","globalData","fetchData","NormalMessage","msg","bySelf","userTop","UsernameSpan","content","mDateString","StatusMessage","StatusMsgContent","getStatusMessageString","Message","messageTypes","normalMessage","statusMessage","middleStringD","statusMessagesD","useReact","passiveUsers","statusMessageTypes","chatCreated","renderStringD","usersAdded","usersRemoved","usersJoined","usersLeft","usersMadeAdmin","usersRemovedAdmin","getStatusMessageStringD","middle","getMiddleString","getPassiveUsers","getTString","mid","chat","date","Date","now","userTopShown","getMessageViewDateString","dateString","getDateString","getUserTop","isBySelf","isDateToday","getTimeString","isDateYesterday","msgString","substr","getMessageObject","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_date","_chat","_type","_content","EventHandler","events","Map","fn","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","messageData","empty","messages","num","reachedTopMessages","getLastMsgId","getLastMessage","chatType","chatId","lastMsgId","lMessages","showUserInfoMessage","rMessages","newMsg","unreadMessages","latestMessage","getLatestMessageObject","lm","getFirstMessage","getChatViewMsgString","getChatViewDateString","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","isShown","showTempChat","updateTempChat","hideTempChat","otherUid","otherUsername","mentions","media","newChat","ncid","chats","normal","addChat","selectChat","hide","_chatNow","ChatSocket","_userSelf","_chats","group","_finishedLoading","_temporaryChat","_initCalled","socket","removeAllListeners","disconnect","initCalled","userInfo","io","connect","secure","emit","on","initChats","getChat","isCurrentChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","initFirstMessage","firstMessage","member","addGroupChat","_socket","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","found","tempChat","map","includes","ChatViewLoader","borderWidth","role","loadGroupChat","sendMessage","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","replace","catch","err","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","position","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","typeMessages","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","onScroll","ref","date1","renderDateContainer","_messagesNode","TempChatContainer","show","update","AddressNotValid","CannotWriteYourself","BlockedByThisUser","UserNotExisting","NoMemberInPublicChat","NoAuthorization","ChatNotExisting","GeneralError","NormalChatView","userChanged","parseInt","error","getUserNormalChat","res","selectNormalChat","selectTempChat","renderLoader","isNaN","Modal","ModalHeader","ModalMain","UserItem","clicked","deselectUser","index","errorCode","lastRequest","searchResult","hasMore","loadUsers","concat","scrollParentRef","pageStart","loadMore","loader","useWindow","getScrollParent","item","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","addMembers","fetchUsersNotInGroup","leaveChat","removeSelfAdmin","AddUsers","useHistory","submitUsers","numAlreadyLoaded","search","limit","start","UserOptions","isSelfAdmin","memberSelf","isAdmin","removeMemberFromChat","makeMemberAdmin","removeMemberAdmin","isMemberSelf","ChatOptions","useLocation","console","log","Edit","handleEdit","isEditing","editPressed","class","changeCallback","optClass","DescriptionEdit","description","ChatNameEdit","GroupChatInfo","uidSelf","animation","alignPoint","ModalRouterGroupChatInfo","path","useRouteMatch","groupChatInfo","groupChatErrorCode","groupChatTabs","GroupChatView","loadGroupChatInfo","chatData","chatExists","r","selectGroupChat","tab","renderChat","elementClicked","SelectChat","loadChats","showOptions","showSearchBar","requestUsersNoChat","createGroupChat","fetchUsers","ChooseUser","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","options","GroupInfoForm","groupNameChanged","groupName","descriptionChanged","isPublicChanged","isPublic","formSubmitted","submitGroup","src","alt","minLength","rows","NewGroup","showEnterChatInfo","currentTab","chooseUser","NewChat","newTab","getHeader","router","fetchUserInfo","UserInfo","setUser","none","Settings","ModalRouterBigScreens","routeProps","match","params","uidInfo","GridBigScreens","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","modal","modalInfo","notifications","init","About","reqUserSelf","addReducer","localStorage","removeItem","deleteUserSelf","resetGlobal","destruct","existingTokens","setItem","App","useDispatch","useEffect","parse","getItem","initAuthTokens","exact","NoMatch","chatsLoaded","element","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initChatReducers","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57078c27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.99b71231.png\";","import React,{Component} from \"react\";\n\nclass ErrorMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-danger p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\n\nexport {ErrorMsg};","import React,{Component} from \"react\";\n\nimport \"./TogglePassword.scss\"\n\nexport default class TogglePassword extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        }\n    }\n    render() {\n        return(\n            <div className=\"psw-group\">\n                <i className={(this.state.showPassword ? \"fa-eye-slash\" : \"fa-eye\") + \" fas psw-toggle-icon\"}\n                   onClick={() => this.setState(state => ({showPassword: !state.showPassword}))}\n                />\n                <input type={this.state.showPassword ? \"text\" : \"password\"}\n                       {...this.props}\n                />\n            </div>\n        )\n    }\n\n\n}","import {getDispatch} from \"reactn\";\n\nexport const login = async (username,password) => {\n    try {\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        };\n        const response = await fetch('/auth/login', config);\n\n        if (response.ok) {\n            //return json\n            let data = await response.json();\n\n            if(data.success) {\n                getDispatch().setUserSelf(data.uid, username);\n\n                getDispatch().setAuthTokens(data.tokens);\n            }\n            return data;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        return null;\n    }\n};\n\nexport const register = async(username,password) => {\n    try {\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                username: username,\n                password: password\n            })\n        };\n        const response = await fetch('/auth/register', config);\n        //const json = await response.json()\n        if (response.ok) {\n            //return json\n            let data = await response.json();\n\n            if(data.success) {\n                getDispatch().setUserSelf(data.uid,username);\n\n                getDispatch().setAuthTokens(data.tokens);\n            }\n            return data;\n        }else\n            return null;\n    } catch (error) {\n        return null;\n    }\n};","import React,{Component} from \"reactn\";\nimport {\n    Link,\n    withRouter\n} from \"react-router-dom\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport TogglePassword from \"./TogglePassword\";\nimport {login} from \"./apiCalls\";\n\nclass Login extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uNameErr: '',\n            username: '',\n            pwErr: '',\n            password: '',\n            valid: false,\n            redirect: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'has to be at least 3 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w\\w*$/),\n                    message: 'not valid'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            }\n        };\n        /*\n            es wird validiert\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password\n        },valConstraints);\n\n        if(typeof(valResult)!=\"undefined\"){\n\n            let uNameErr;\n            let pwErr;\n\n            if(typeof(valResult.username)!=\"undefined\") {\n                uNameErr = valResult.username[0];\n            }else{\n                uNameErr = '';\n            }\n            if(typeof(valResult.password)!=\"undefined\") {\n                pwErr = valResult.password[0];\n            }else{\n                pwErr = '';\n            }\n\n            this.setState({\n                valid: false,\n                uNameErr: uNameErr,\n                pwErr: pwErr\n            });\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: ''\n            });\n           /*\n                request to server\n            */\n           login(this.state.username,this.state.password).then(data => {\n               if(data.success) {\n                   this.props.history.push('/chat');\n               }else{\n\n                   if(data.username !== undefined)\n                       this.setState({\n                           valid: false,\n                           uNameErr: data.username\n                       });\n                   if(data.password !== undefined)\n                       this.setState({\n                           valid: false,\n                           pwErr: data.password\n                       });\n               }\n           });\n        }\n\n    };\n    uNameErr = () => {\n        if(this.state.uNameErr !== '')\n            return (\n                <ErrorMsg>\n                    {this.state.uNameErr}\n                </ErrorMsg>\n            )\n    };\n    pwErr = () => {\n        if(this.state.pwErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwErr}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return(\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Login</h1>\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                {this.uNameErr()}\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                {this.pwErr()}\n                                <TogglePassword\n                                       name=\"password\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\n                            </div>\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Login\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login);","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport {withRouter} from \"react-router-dom\";\nimport TogglePassword from \"./TogglePassword\";\nimport {register} from \"./apiCalls\";\n\nclass Register extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uNameErr: '',\n            username: '',\n            pwErr: '',\n            password: '',\n            pwRepeatErr: '',\n            pwRepeat: '',\n            valid: false,\n            redirect: false\n        }\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'has to be at least 3 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w\\w*$/),\n                    message: 'not valid'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            }\n        };\n        /*\n            es wird validiert\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password,\n            passwordRepeat: this.state.pwRepeat\n        },valConstraints);\n\n        if(typeof(valResult)!=\"undefined\"){\n\n            let uNameErr;\n            let pwErr;\n            let pwRepeatErr;\n\n            if(typeof(valResult.username)!=\"undefined\") {\n                uNameErr = valResult.username[0];\n            }else{\n                uNameErr = '';\n            }\n\n            if(typeof(valResult.password)!=\"undefined\") {\n                pwErr = valResult.password[0];\n            }else{\n                pwErr = '';\n            }\n\n            if(typeof(valResult.passwordRepeat)!=\"undefined\") {\n                pwRepeatErr = valResult.passwordRepeat[0];\n            }else{\n                pwRepeatErr = '';\n            }\n\n            this.setState({\n                valid: false,\n                uNameErr: uNameErr,\n                pwErr: pwErr,\n                pwRepeatErr: pwRepeatErr\n            });\n\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: '',\n                pwRepeatErr: ''\n            });\n            /*\n                request to server\n             */\n            register(this.state.username,this.state.password).then(data => {\n                if(data.success) {\n                    this.props.history.push('/chat');\n                }else{\n                    if (data.username !== undefined)\n                        this.setState({\n                            valid: false,\n                            uNameErr: data.username\n                        });\n                }\n            });\n        }\n    };\n    uNameErr = () => {\n        if(this.state.uNameErr !== '')\n            return (\n                <ErrorMsg>\n                    {this.state.uNameErr}\n                </ErrorMsg>\n            )\n    };\n    pwErr = () => {\n        if(this.state.pwErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwErr}\n                </ErrorMsg>\n            )\n    };\n    pwRepeatErr = () => {\n        if(this.state.pwRepeatErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwRepeatErr}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return (\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Registrieren</h1>\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                {this.uNameErr()}\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                {this.pwErr()}\n                                <TogglePassword\n                                       name=\"password\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort wiederholen:</label>\n                                {this.pwRepeatErr()}\n                                <TogglePassword\n                                       name=\"pwRepeat\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Register);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport {useGlobal} from \"reactn\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n    const [global,setGlobal] = useGlobal();\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                global.loaded ? (\n                    global.authTokens ?\n                    (\n                        <Component {...props} />\n                    )\n                    : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    referer: props.location\n                                }\n                            }}\n                        />\n                    )\n                ) : null\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\n\nexport const DeviceWidthObject = {\n\n    MobileSmall      : { max: 320, min: 0 },\n    MobileMedium     : { max: 375, min: 321 },\n    MobileLarge      : { max: 767, min: 376 },\n\n    Tablet           : { max: 991, min: 768 },\n\n    LaptopSmall      : { max: 1024, min: 992 },\n    LaptopLarge      : { max: 1440, min: 1025 },\n\n    LargerThanLaptop : { max: 2560, min: 1441 },\n    LargeScreenMax   : { max: 999999, min: 2561 }\n\n};\n\nexport const IdDeviceBreakpointsByWidth = {\n\n    laptop_max : 1440,\n    laptop_min : 992,\n    tablet_min : 768,\n    tablet_max : 991,\n    mobile_max : 767,\n    default_min : 768 // Unrecognized device\n};\n\nexport const IdMobileHeight = {\n    mobileLandscape_min : 320,\n    mobileLandscape_max : 425\n};\n\nexport const getWindowDimension = () => {\n\n    const width = window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth;\n\n    const height = window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n\n    return {width, height}\n\n};\n\nexport const getDeviceTypeInfo = () => {\n    const { width, height } = getWindowDimension();\n    const buildDeviceDetails = {\n        deviceType: '',\n        deviceTypeVariant: '',\n        orientation: 'Portrait',\n        width,\n        height,\n        isFallback: false\n    };\n//  Edge case\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\n    if (hasEdgeCase) {\n        return hasEdgeCase\n    }\n    if (height < width) {\n        // Orientation is landscape\n        buildDeviceDetails.orientation = 'Landscape';\n\n        if (height <= IdMobileHeight.mobileLandscape_max) {\n            // Mobile (landscape)\n            buildDeviceDetails.deviceType = 'Mobile';\n            for (const devc in DeviceWidthObject) {\n                if (\n                    height <= DeviceWidthObject[devc].max &&\n                    height >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            // Tablet (landscape)\n            buildDeviceDetails.deviceType = 'Tablet';\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            // Laptop (landscape)\n            buildDeviceDetails.deviceType = 'Laptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            // Larger than Laptop (landscape)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc\n                    break\n                }\n            }\n        } else {\n\n            buildDeviceDetails.deviceType = 'Mobile';\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\n            buildDeviceDetails.isFallback = true\n        }\n\n        return buildDeviceDetails\n    } else {\n        // Orientation is portrait\n        buildDeviceDetails.orientation = 'Portrait';\n\n        for (const devc in DeviceWidthObject) {\n            if (\n                width <= DeviceWidthObject[devc].max &&\n                width >= DeviceWidthObject[devc].min\n            ) {\n                buildDeviceDetails.deviceTypeVariant = devc;\n                break\n            }\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            buildDeviceDetails.deviceType = 'Laptop'\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            buildDeviceDetails.deviceType = 'Tablet'\n        }\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\n            buildDeviceDetails.deviceType = 'Mobile'\n        }\n\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n        }\n\n        return buildDeviceDetails\n    }\n};\n\nconst handleExceptions = (buildDeviceDetails, width, height) => {\n    //  iPadPro\n    if (width === 1024 && height === 1366) {\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Portrait';\n\n        return buildDeviceDetails\n    } else if (width === 1366 && height === 1024) {\n        //  Edge case\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Landscape';\n\n        return buildDeviceDetails\n    }\n\n    return undefined\n};","import React from 'react'\nimport {\n    getWindowDimension,\n    IdDeviceBreakpointsByWidth,\n    IdMobileHeight\n} from './utilResponsive';\n\nconst { width, height } = getWindowDimension();\nconst initialState = { width, height };\n\nexport default class Responsive extends React.PureComponent {\n\n    state = initialState;\n    componentDidMount () {\n        window.addEventListener('resize', this.handleResize, false)\n    }\n    componentWillUnmount () {\n        window.removeEventListener('resize', this.handleResize, false)\n    }\n    render = () => {\n        const { children, displayIn } = this.props;\n        const { width, height } = this.state;\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\n        return (\n            <React.Fragment>\n                {shouldRenderChildren ? children : null}\n            </React.Fragment>\n        )\n    };\n    handleResize = () => {\n        const { width, height } = getWindowDimension();\n        this.setState({ width, height })\n    };\n    shouldRender = (display, width, height) => {\n        if (\n            display.indexOf('Laptop') !== -1 &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('Tablet') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\n        ) {\n            return true\n        }\n        // For mobile regardless of orientation\n        if (\n            display.indexOf('Mobile') !== -1 &&\n            width <= IdDeviceBreakpointsByWidth.mobile_max\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('MobilePortrait') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height >= IdMobileHeight.mobileLandscape_max)\n        ) {\n            return true\n        }    return !!(\n            display.indexOf('MobileLandScape') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height <= IdMobileHeight.mobileLandscape_min)\n        )\n    }\n}","import {Component} from \"react\";\n\nexport default class Dummy extends Component {\n\n    componentDidMount() {\n        if(typeof(this.props.didMount) === 'function')\n            this.props.didMount();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(typeof(this.props.didUpdate) === 'function')\n            this.props.didUpdate();\n    }\n\n    render() {\n        if(this.props.children)\n            return this.props.children;\n        return null;\n    }\n}","import React,{Component} from \"reactn\";\nimport Responsive from \"../../responsive/Responsive\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport \"./headerLeft.scss\";\n\nexport const infoHeaderCenter = {\n    none: 0,\n    normalChat: 1,\n    groupChat: 2\n};\n\nclass HeaderLeft extends Component{\n\n    render() {\n\n        const {pathname} = this.props.location;\n        /*\n            renders number of new messages\n         */\n        const renderNewMsgNumber = () => {\n            if(this.global.newMessages > 0){\n                return (\n                    <div className=\"btnBack-number\">\n                        {this.global.newMessages}\n                    </div>\n                )\n            }\n            return null;\n        };\n\n        const renderBtnBack = () => {\n            /*\n                only small screens\n             */\n            return (\n                <div className=\"float-left left\">\n                    <i id=\"btnBackToChatList\"\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\n                       onClick={() => {this.props.history.goBack()}}\n                    />\n                    {renderNewMsgNumber()}\n                </div>\n            );\n        };\n\n        const renderChatInfo = () => {\n            /*\n                if there is a normal chat open, this info gets displayed\n             */\n            switch(this.global.infoHeaderCenter){\n\n                case infoHeaderCenter.normalChat:\n                    return (\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                case infoHeaderCenter.groupChat:\n                    return(\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                default:\n                    return(\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\n                        </Responsive>\n                    );\n            }\n        };\n\n        return(\n            <Dummy>\n                <Responsive displayIn={[\"Mobile\"]}>\n                    {renderBtnBack()}\n                </Responsive>\n                {renderChatInfo()}\n            </Dummy>\n        )\n    }\n}\nexport default withRouter(HeaderLeft);\n\nfunction HeaderCenter(props){\n    return(\n        <div id=\"chat-info\" className=\"center pt-2\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"reactn\";\nimport HeaderLeft from \"./HeaderLeft\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Tooltip from \"rc-tooltip\";\n\nimport 'rc-tooltip/assets/bootstrap_white.css';\n\nimport './header.scss';\n\nclass Header extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checkBoxClicked: false\n        };\n    }\n    clickCheckBox = event => {\n        if(this.state.checkBoxClicked)\n            event.stopPropagation();\n        else {\n            setTimeout(() => {\n                this.setState(state => ({\n                    checkBoxClicked: true\n                }));\n            }, 20);\n        }\n    };\n    clickDocument = event => {\n        if (this.state.checkBoxClicked)\n            this.changeChecked(event);\n    };\n    changeChecked = event => {\n        this.setState(state => ({\n            checkBoxClicked: !state.checkBoxClicked\n        }));\n    };\n\n    logout = () => {\n        /*\n            authTokens are deleted\n         */\n        this.dispatch.deleteAuthTokens();\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"c-header\">\n\n                <HeaderLeft />\n\n                <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\n\n                    <div className=\"right-l\" />\n\n                    <input type=\"checkbox\"\n                           id=\"btnControlTopRight\"\n                           className=\"btnControl\"\n                           checked={this.state.checkBoxClicked}\n                           onChange={this.changeChecked}\n                    />\n                    <label htmlFor=\"btnControlTopRight\">\n\n                        <div className=\"right-c\">\n                            <div className=\"d-only-when-small\">\n                                <i  id=\"user-info\"\n                                    className=\"fas fa-user fa-2x user-icon\"\n                                    data-toggle=\"tooltip\"\n                                    title=\"Benutzer-Info\"\n                                />\n                            </div>\n                            <div className=\"d-only-when-big top-2right\">\n\n                                <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\n                                    <BottomToolTip text=\"Benutzer-Info\">\n                                        <h4 id=\"username\"\n                                            className=\"p-2 username\"\n                                        >\n                                                {this.global.userSelf.username}\n                                        </h4>\n                                    </BottomToolTip>\n                                </Link>\n                                <div className=\"float-right\">\n                                    <Link to={pathname + \"/settings\"}>\n                                        <BottomToolTip text=\"Einstellungen\">\n                                            <i className=\"fas fa-user-cog fa-2x\"/>\n                                        </BottomToolTip>\n                                    </Link>\n                                    &nbsp;\n                                    <BottomToolTip text=\"logout\">\n                                        <i id=\"user-logout\"\n                                           className=\"fas fa-sign-out-alt fa-2x logout\"\n                                           onClick={this.logout}\n                                        />\n                                    </BottomToolTip>\n                                </div>\n\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        document.addEventListener('click',this.clickDocument,false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click',this.clickDocument,false);\n    }\n}\n\nfunction BottomToolTip(props){\n    return(\n        <Tooltip placement=\"bottom\"\n                 trigger={['hover']}\n                 overlay={\n                     <span>{props.text}</span>\n                 }>\n            {props.children}\n        </Tooltip>\n    )\n}\nexport default withRouter(Header);","import React,{Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\n\nimport \"./chatSearchBox.scss\";\n\nclass ChatSearchBox extends Component{\n\n    searchChanged = event => {\n        this.props.onSearch(event.target.value);\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"chatSearchBox\">\n                <div className=\"chat-select-form\">\n                    <input\n                        type=\"text\"\n                        name=\"chat-search\"\n                        className=\"chat-search\"\n                        placeholder=\"Chat suchen\"\n                        onChange={this.searchChanged}\n                    />\n                    <Link to={pathname + \"/newChat\"}>\n                        <button id=\"btn-newChat\"\n                                className=\"btn-newChat\"\n                        >\n                            <i className=\"fas fa-plus fa-lg\" />\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(ChatSearchBox);","let Colors = {};\nColors.names = {\n    aqua: \"#00ffff\",\n    black: \"#000000\",\n    blue: \"#0000ff\",\n    brown: \"#a52a2a\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgrey: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    fuchsia: \"#ff00ff\",\n    gold: \"#ffd700\",\n    green: \"#008000\",\n    indigo: \"#4b0082\",\n    khaki: \"#f0e68c\",\n    lightblue: \"#add8e6\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lime: \"#00ff00\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    navy: \"#000080\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    pink: \"#ffc0cb\",\n    purple: \"#800080\",\n    violet: \"#800080\",\n    red: \"#ff0000\",\n    silver: \"#c0c0c0\"\n};\nColors.random = function() {\n    let result;\n    let count = 0;\n    for (let prop in this.names)\n        if (Math.random() < 1/++count)\n            result = prop;\n    return result;\n};\nexport default Colors;","\nexport default class BinSearchArray extends Array{\n\n    getIndex(key){\n\n        let left = 0;\n        let right = this.length-1;\n\n        while(left<=right){\n            let k= Math.floor((left+right)/2);\n            if(this[k].key === key)\n                return k;\n            else if(this[k].key < key)\n                left = k+1;\n            else //a[k]>v\n                right = k-1;\n        }\n        return -1;\n    }\n\n    getNearestKey(key){\n        /*\n            besseren Algorithmus finden\n         */\n        let i;\n        ++key;\n\n        while((i = this.getIndex(--key)) === -1){\n            /*\n                wenn key 0 ist, wird vorne eingefügt\n             */\n            if(key === 0) return -1;\n        }\n\n        return i;\n    }\n\n    get(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            return this[i].value;\n\n        return undefined;\n    }\n\n    add(key,value){\n        /*\n            key darf noch nicht vorhanden sein\n         */\n        if(this.getIndex(key) === -1) {\n\n            this.splice(this.getNearestKey(key) + 1, 0, {\n                key: key,\n                value: value\n            });\n        }\n    }\n\n    remove(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            this.splice(i,1);\n    }\n}","import {getGlobal,getDispatch} from 'reactn';\n\nexport async function makeRequest(target,config,tokensP){\n    /*\n        if parameter tokens is defined, this is taken\n        else the one from global\n     */\n    const tokens = tokensP ? tokensP : getGlobal().authTokens;\n\n    const configI = {\n        ...config,\n        method: config.method,\n        headers: {\n            ...config.headers,\n            /*\n                jwt\n             */\n            'Authorization': tokens\n        }\n    };\n\n    const response = await fetch(target,configI);\n    /*\n        http-status 401: jwt timeout\n     */\n    if(response.status === 401){\n        /*\n            autToken is deleted\n         */\n        getDispatch().deleteAuthTokens();\n        /*\n            error is thrown\n         */\n        throw new Error('jwt expired');\n    }\n    return response;\n}","import {makeRequest} from \"../global/requests\";\n\nexport async function selectChats(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    /*\n        chats are requested\n     */\n    return await makeRequest('/chats', config);\n}\nexport async function createNormalChat(body){\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/user/chat', config);\n}\nexport async function selectUser(uid){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/user/' + uid, config);\n}\nexport async function loadMessages(body){\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message/load', config);\n}","import Colors from \"../util/Color\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport chatSocket from \"./chatSocket\";\nimport {selectUser} from \"./apiCalls\";\n\nexport const UserErrorCode = {\n    none: 0,\n    nan: 1,\n    tempChat: 2,\n    userNotExisting: 3,\n    blocked: 4,\n    isSelf: 5,\n    error: 6\n};\n\nexport async function getUserNormalChat(uid){\n    /*\n        does the user exist & does normal chat exist\n     */\n    if(chatSocket.users.getIndex(uid) !== -1){\n        /*\n            does a normalChat exist at the user\n         */\n        if(chatSocket.users.get(uid).normalChat !== 0) {\n\n            return UserErrorCode.none;\n        }else{\n            /*\n                chat does not exist in server\n                it gets created\n             */\n            const user = chatSocket.users.get(uid);\n            chatSocket.temporaryChat.createNew(uid,user.username);\n\n            return UserErrorCode.tempChat;\n        }\n        /*\n            does there exist a temporary chat with this user\n        */\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\n        /*\n            user and chat does not exist in server\n         */\n        return UserErrorCode.tempChat;\n\n    }else{\n        /*\n            request user from server\n         */\n        try {\n            const response = await selectUser(uid);\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok) {\n\n                const data = await response.json();\n\n                if(data.userExists && !data.blocked) {\n\n                    chatSocket.temporaryChat.createNew(uid,data.username);\n                    return UserErrorCode.tempChat;\n\n                }else{\n\n                    if(!data.userExists)\n\n                        return UserErrorCode.userNotExisting;\n\n                    else\n\n                        return UserErrorCode.blocked;\n                }\n\n            }else\n                return UserErrorCode.error;\n\n        }catch(error){\n            return UserErrorCode.error;\n        }\n    }\n}\n\nexport default class User{\n\n    _uid;\n    _username;\n    _color;\n    //ids der chats des Users\n    _normalChat = 0;\n    //ids of the groupchats\n    _groupChats = new BinSearchArray();\n\n    constructor(uid,username) {\n        this.uid = uid;\n        this.username = username;\n        this.color = Colors.random();\n    }\n    /*\n        groupChat is added\n     */\n    addGroupChat(gcid){\n        this.groupChats.add(gcid,gcid);\n    }\n\n    removeGroupChat(gcid){\n        this.groupChats.remove(gcid);\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get username() {\n        return this._username;\n    }\n\n    set username(value) {\n        this._username = value;\n    }\n\n    get color() {\n        return this._color;\n    }\n\n    set color(value) {\n        this._color = value;\n    }\n\n    get normalChat() {\n        return this._normalChat;\n    }\n\n    set normalChat(value) {\n        this._normalChat = value;\n    }\n\n    get groupChats() {\n        return this._groupChats;\n    }\n\n    set groupChats(value) {\n        this._groupChats = value;\n    }\n}","\nexport let globalData = {};\n\n/*\n    is called in isLoggedIn in App.js\n */\nexport async function fetchData(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await fetch('/data.json', config);\n\n    if(response.ok){\n\n        globalData = await response.json();\n    }else{\n        throw new Error();\n    }\n}","import React from \"react\";\nimport {UsernameSpan} from \"./Message\";\n\nexport default function NormalMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            {msg.userTop ?\n                <div className=\"w-100\">\n                    <strong className=\"header\">\n                        <UsernameSpan user={msg.userTop}/>\n                    </strong>\n                </div>\n                : null}\n            <div className=\"content\">\n                <p>\n                    {msg.content.text}\n                </p>\n            </div>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport Dummy from \"../../../../utilComp/Dummy\";\nimport {getStatusMessageString} from \"../../../../chatData/message/statusMessage\";\n\nexport default function StatusMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            <StatusMsgContent msg={msg}/>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    );\n}\nfunction StatusMsgContent(props) {\n\n    const msg = props.msg;\n\n    return(\n        <Dummy>\n            {getStatusMessageString(msg,true)}\n        </Dummy>\n    );\n}","import React from \"react\";\nimport {globalData} from \"../../../../global/globalData\";\nimport NormalMessage from \"./NormalMessage\";\nimport StatusMessage from \"./StatusMessage\";\nimport Colors from \"../../../../util/Color\";\n\nimport './message.scss'\n\nexport default function Message(props){\n\n    const msg = props.msg;\n\n    switch (msg.type) {\n\n        case globalData.messageTypes.normalMessage: {\n\n            return (\n                <NormalMessage msg={msg}/>\n            )\n        }\n\n        case globalData.messageTypes.statusMessage: {\n\n            return (\n                <StatusMessage msg={msg}/>\n            );\n        }\n\n        default:\n            return <span />;\n    }\n}\n\nexport function UsernameSpan(props){\n\n    return(\n        <span\n            style={{\n                color: Colors.names[props.user.color]\n            }}>\n                {props.user.username}\n        </span>\n    );\n}","import {UsernameSpan} from \"../../Home/chatView/chatContainer/message/Message\";\nimport {globalData} from \"../../global/globalData\";\nimport React from \"react\";\nimport chatSocket from \"../chatSocket\";\n\nexport const middleStringD = {\n    hatHast: 0,\n    ist: 1\n};\n\nexport const statusMessagesD = [\n    \"den chat erstellt\",\n    \"hinzugefügt\",\n    \"entfernt\",\n    \"dem chat beigetreten\",\n    \"den chat verlassen\",\n    \"zum Admin gemacht\",\n    \"nicht mehr Admin\"\n];\n\nexport function getStatusMessageString(msg,useReact){\n\n    return getStatusMessageStringD();\n\n    function getStatusMessageStringD() {\n\n        const userTop = msg.userTop;\n        const passiveUsers = msg.content.passiveUsers;\n\n        switch (msg.content.type) {\n\n            case globalData.statusMessageTypes.chatCreated:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.chatCreated\n                );\n\n            case globalData.statusMessageTypes.usersAdded:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersAdded\n                );\n\n            case globalData.statusMessageTypes.usersRemoved:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersRemoved\n                );\n\n            case globalData.statusMessageTypes.usersJoined:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersJoined\n                );\n\n            case globalData.statusMessageTypes.usersLeft:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    [],\n                    globalData.statusMessageTypes.usersLeft\n                );\n\n            case globalData.statusMessageTypes.usersMadeAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersMadeAdmin\n                );\n\n            case globalData.statusMessageTypes.usersRemovedAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersRemovedAdmin\n                );\n\n            default:\n                break;\n        }\n    }\n\n    function renderStringD(userTop,middle,passiveUsers,statusMessage){\n\n        function getMiddleString(){\n\n            // eslint-disable-next-line default-case\n            switch (middle) {\n\n                case middleStringD.hatHast:\n                    return msg.bySelf ? \" hast \" : \" hat \";\n\n                case middleStringD.ist:\n                    return ' ist';\n            }\n        }\n\n        function getPassiveUsers(){\n\n            if(passiveUsers.length < 1 ){\n                return \"\";\n            }else if(passiveUsers.length === 1){\n\n                const user = chatSocket.users.get(passiveUsers[0]);\n\n                if(user)\n                    if(useReact)\n                        return(\n                            <UsernameSpan user={user}/>\n                        );\n                    else\n                        return user.username;\n                else\n                    return \"1 Benutzer\";\n\n            }else{\n                return passiveUsers.length + \" Benutzer\";\n            }\n        }\n\n        function getTString(){\n            return \" \" + statusMessagesD[statusMessage];\n        }\n\n        if(useReact)\n            return(\n                <span>\n                    <UsernameSpan user={msg.userTop}/>\n                    {getMiddleString()}\n                    {getPassiveUsers()}\n                    {getTString()}\n                </span>\n            );\n        else\n            return msg.userTop.username + getMiddleString() + getPassiveUsers() + getTString();\n    }\n\n}","import chatSocket from \"../chatSocket\";\nimport {globalData} from \"../../global/globalData\";\nimport {getStatusMessageString} from \"./statusMessage\";\n\nexport function isDifferentDay(date1,date2){\n    return date1.getDay() !== date2.getDay()\n        || date1.getMonth() !== date2.getMonth()\n        || date1.getFullYear() !== date2.getFullYear();\n}\n\nexport default class Message {\n\n    _mid;\n    _uid;\n    _date;\n    _chat;\n    _type;\n    _content;\n\n    constructor(\n        mid,\n        uid,\n        chat,\n        date = new Date(Date.now()),\n        type,\n        content\n    ) {\n        this.mid = mid;\n        this.uid = uid;\n        this.date = date;\n        //type: object of Chat\n        this.chat = chat;\n        this.type = type;\n        this.content = content;\n    }\n    /*\n        a object representing the message is returned\n     */\n    getMessageObject(userTopShown){\n\n        const message = {\n            mDateString: this.getMessageViewDateString(),\n            dateString: this.getDateString(),\n            date: this.date,\n            bySelf: this.uid === chatSocket.userSelf.uid,\n            type: this.type,\n            content: this.content\n        };\n        /*\n            if the user top should be shown, the property is added\n         */\n        if(userTopShown)\n            message.userTop = this.getUserTop();\n\n        return message;\n    }\n    /*\n        a object for the userinfo at the top of the message is returned\n     */\n    getUserTop(){\n        /*\n            is the message written by the user self?\n         */\n        if(this.isBySelf())\n            return {\n                uid: this.uid,\n                username: 'Du',\n                color: chatSocket.userSelf.color\n            };\n        /*\n            if the user is not self\n         */\n        const user = chatSocket.users.get(this.uid);\n        return {\n            uid: this.uid,\n            username: user.username,\n            color: user.color\n        };\n    }\n    /*\n        is the message by the client self?\n     */\n    isBySelf(){\n        return this.uid === chatSocket.userSelf.uid;\n    }\n\n    getChatViewDateString(){\n        /*\n            Wenn weniger als 1 Tag her: Uhrzeit\n         */\n        if(this.isDateToday()){\n\n            return 'heute ' + this.getTimeString();\n        }\n        /*\n            Wenn gestern: gestern\n         */\n        else if(this.isDateYesterday()){\n\n            return 'gestern';\n        }\n        /*\n            sonst: Datum\n         */\n        else{\n            return this.getDateString();\n        }\n    }\n\n    getChatViewMsgString(){\n\n        // eslint-disable-next-line default-case\n        switch(this.type) {\n\n            case globalData.messageTypes.normalMessage: {\n\n                let msgString = this.content.text;\n                /*\n                    Wenn string länger als 18 Zeichen, wird verkürzt\n                 */\n                if(msgString.length > 18)\n                msgString = msgString.substr(0, 18) + '...';\n                /*\n                    wenn selbst geschrieben, steht Du: davor\n                 */\n                if(this.uid === chatSocket.userSelf.uid)\n                    return`Du: ${msgString}`;\n\n                else if (this.chat.type === 'normalchat')\n                    return this.content.text;\n\n                else\n                    return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\n            }\n            case globalData.messageTypes.statusMessage: {\n\n                return getStatusMessageString(\n                    this.getMessageObject(true),\n                    false\n                );\n            }\n        }\n    }\n\n    getMessageViewDateString(){\n        if(this.isDateToday()){\n\n            return this.getTimeString();\n        }\n        else if(this.isDateYesterday()){\n\n            return 'gestern ' + this.getTimeString();\n        }else{\n\n            return this.getDateString() + ' ' + this.getTimeString();\n        }\n    }\n\n    isDateToday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    isDateYesterday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() - 1 &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    getDateString(){\n        const d = this.date.getDate();\n        let ds;\n        if(d<10)\n            ds = '0'+d;\n        else\n            ds = d;\n        const m = this.date.getMonth();\n        let ms;\n        if(m+1<10)\n            ms = '0'+(m+1);\n        else\n            ms = m+1;\n        const y = this.date.getFullYear();\n\n        return `${ds}.${ms}.${y}`;\n    }\n\n    getTimeString(){\n        const h = this.date.getHours();\n        let hs;\n        if(h<10)\n            hs = '0'+h;\n        else\n            hs = h;\n        const m = this.date.getMinutes();\n        let ms;\n        if(m<10)\n            ms = '0'+m;\n        else\n            ms = m;\n\n        return `${hs}:${ms}`;\n    }\n    /*\n        es wird überprüft, ob date2 an einem anderen Tag war\n     */\n    isDifferentDay(date2){\n        return this.date.getDay() !== date2.getDay()\n            || this.date.getMonth() !== date2.getMonth()\n            || this.date.getFullYear() !== date2.getFullYear();\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    set mid(value) {\n        this._mid = value;\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(value) {\n        this._date = value;\n    }\n\n    get chat() {\n        return this._chat;\n    }\n\n    set chat(value) {\n        this._chat = value;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(value) {\n        this._content = value;\n    }\n}","export default class EventHandler{\n\n    _events;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    /*\n        event-handler wird hinzugefügt\n     */\n    on(event,fn){\n        /*\n            wenn event in Map vorhanden, wird event hinzugefügt\n         */\n        if(this.events.has(event))\n            this.events.get(event).push(fn);\n        /*\n            wenn event in map noch nicht vorhanden,\n            wird entry in map hinzugefügt\n         */\n        else\n            this.events.set(event,[fn]);\n    }\n    /*\n        event-handler wird entfernt\n     */\n    rm(event,fn){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            const e = this.events.get(event);\n            for(let i=0;i<e.length;i++)\n                //wenn element die gesuchte function, wird sie gelöscht\n                if(e[i] === fn)\n                    e.splice(i,1);\n        }\n    }\n    /*\n        alle registrierten functions eines events werden ausgelöst\n     */\n    trigger(event,...rest){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            /*\n                es werden alle functions aufgerufen\n             */\n            for(let i=0;i<this.events.get(event).length;i++)\n                this.events.get(event)[i](...rest);\n        }\n    }\n\n    get events() {\n        return this._events;\n    }\n\n    set events(value) {\n        this._events = value;\n    }\n}","import BinSearchArray from \"../../util/BinSearch\";\nimport Message from \"../message/message\";\nimport EventHandler from \"../../util/Event\";\nimport {getDispatch} from 'reactn';\nimport {loadMessages} from \"../apiCalls\";\n\nexport class Chat {\n\n    _type;\n    _id;\n    _chatName;\n    _messages = new BinSearchArray();\n    _event = new EventHandler();\n    _unreadMessages = 0;\n    /*\n        are all messages already loaded?\n     */\n    _reachedTopMessages = false;\n\n    constructor(type, id,chatName) {\n        this.type = type;\n        this.id = id;\n        this.chatName = chatName;\n    }\n    /*\n        the first message of the object is initialized\n     */\n    initFirstMessage(messageData){\n\n        if(!messageData.empty)\n            this.messages.add(\n                messageData.mid,\n                new Message(\n                    messageData.mid,\n                    messageData.uid,\n                    this,\n                    new Date(messageData.date),\n                    messageData.type,\n                    messageData.content\n                )\n            );\n    }\n    /*\n        messages are loaded\n     */\n    async loadMessages(num){\n        /*\n            messages are only loaded, if top not already reached\n         */\n        if(!this.reachedTopMessages) {\n\n            const getLastMsgId = () => {\n                const msg = this.getLastMessage();\n                if (msg !== null)\n                    return msg.mid;\n                return -1;\n            };\n            /*\n                messages are loaded from server\n             */\n            const response = await loadMessages({\n                chatType: this.type,\n                chatId: this.id,\n                lastMsgId: getLastMsgId(),\n                num: num\n            });\n\n            if (response.ok) {\n\n                const data = await response.json();\n                /*\n                    is top already reached?\n                 */\n                this.reachedTopMessages = data.status === 'reached top';\n\n                const lMessages = data.messages;\n                /*\n                    the array that will be returned\n                 */\n                const messages = new Array(lMessages.length);\n                const userTopShown = this.showUserInfoMessage();\n\n                for (let i = lMessages.length - 1; i >= 0; i--) {\n\n                    const messageData = lMessages[i];\n                    /*\n                        message is created\n                     */\n                    const message =\n                        new Message(\n                            messageData.mid,\n                            messageData.uid,\n                            this,\n                            new Date(messageData.date),\n                            messageData.type,\n                            messageData.content\n                        );\n                    /*\n                        message is added to chat\n                     */\n                    this.messages.add(\n                        messageData.mid,\n                        message\n                    );\n                    messages[i] = message.getMessageObject(userTopShown);\n                }\n                return messages;\n            }\n            throw new Error();\n        }\n    }\n    /*\n        gibt die Nachricht, die am längsten zurück liegt, zurück\n     */\n    getLastMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[0].value;\n        return null;\n    }\n    /*\n        gibt die neueste Nachricht im chat zurück\n     */\n    getFirstMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[this.messages.length - 1].value;\n        return null;\n    }\n    /*\n        returns all messages in an array\n            userTopShown    should the user at the top be shown?\n     */\n    getMessages(){\n\n        const userTopShown = this.showUserInfoMessage();\n        const rMessages = new Array(this.messages.length);\n\n        for(let i=0;i<this.messages.length;i++){\n\n            const message = this.messages[i].value;\n            rMessages[i] = message.getMessageObject(userTopShown);\n        }\n\n        return rMessages;\n    }\n    /*\n        neue Nachricht wird hinzugefügt\n     */\n    addMessage(uid,mid,type,content){\n        const message =\n            new Message(\n                mid,\n                uid,\n                this,\n                new Date(Date.now()),\n                type,\n                content\n            );\n        this.messages.add(mid,message);\n        getDispatch().newMsg(\n            this,\n            this.unreadMessages,\n            message.getMessageObject(\n                this.showUserInfoMessage()\n            ));\n    }\n    /*\n        should the userInfo at the messages be shown (--> only in groupChats)\n     */\n    showUserInfoMessage(){\n        return(this.type === 'groupChat')\n    }\n    /*\n        an object of this chat is returned\n     */\n    getChatObject(){\n        return {\n            type: this.type,\n            id: this.id,\n            chatName: this.chatName,\n            latestMessage: this.getLatestMessageObject(),\n            unreadMessages: this.unreadMessages\n        };\n    }\n    /*\n        an object with the latest message is returned\n     */\n    getLatestMessageObject(){\n        /*\n            are there messages?\n        */\n        if(this.messages.length === 0){\n            return null;\n        }else{\n            const lm = this.getFirstMessage();\n            return {\n                msgString: lm.getChatViewMsgString(),\n                dateString: lm.getChatViewDateString(),\n                date: lm.date\n            };\n        }\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get chatName() {\n        return this._chatName;\n    }\n\n    set chatName(value) {\n        this._chatName = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get unreadMessages() {\n        return this._unreadMessages;\n    }\n\n    set unreadMessages(value) {\n        this._unreadMessages = value;\n    }\n\n    get reachedTopMessages() {\n        return this._reachedTopMessages;\n    }\n\n    set reachedTopMessages(value) {\n        this._reachedTopMessages = value;\n    }\n}\n","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class NormalChat extends Chat{\n\n    _otherUser;\n    _isTyping = false;\n\n    constructor(id,chatName,uid,unreadMessages = 0) {\n        super('normalChat',id,chatName);\n        this.otherUser = uid;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return [\n                {\n                    uid: user.uid,\n                    username: user.username\n                }\n            ];\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\n     */\n    getLatestUserTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = true;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = false;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n\n    get otherUser() {\n        return this._otherUser;\n    }\n\n    set otherUser(value) {\n        this._otherUser = value;\n    }\n\n    get isTyping() {\n        return this._isTyping;\n    }\n\n    set isTyping(value) {\n        this._isTyping = value;\n    }\n}","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class GroupChat extends Chat{\n    //array with uids\n    _users = [];\n    //Array mit uids von den usern, die gerade schreibem\n    _usersTyping = [];\n\n    constructor(id,chatName,uids,unreadMessages = 0) {\n        super('groupChat',id,chatName);\n        this.users = uids;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.usersTyping.length > 0) {\n\n            let rc = [];\n            for(let i=0;i<this.usersTyping.length;i++){\n                const user = chatSocket.users.get(this.usersTyping[i]);\n                rc.push({\n                    uid: user.uid,\n                    username: user.username\n                });\n            }\n            return rc;\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der am neuestem schriebt\n     */\n    getLatestUserTyping(){\n        if(this.usersTyping.length > 0) {\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(this.isMember(uid)){\n            if(!this.isTyping(uid)){\n                /*\n                    the user is added to the currently typing users\n                 */\n                this.usersTyping.push(uid);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(this.isMember(uid)){\n            if(this.isTyping(uid)){\n                /*\n                    user is removed from the array of currently typing users\n                 */\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        returns true if the uid is member of the chat and not self\n     */\n    isMember(uid){\n        if(uid === chatSocket.userSelf.uid)\n            return false;\n        return this.users.find(e => e === uid);\n    }\n    /*\n        returns true if the user is currently typing\n     */\n    isTyping(uid){\n        return this.usersTyping.find(e => e === uid);\n    }\n    /*\n        returns the index of a currently typing user\n     */\n    getIndexOfTyping(uid){\n        return this.usersTyping.findIndex(e => e === uid);\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get usersTyping() {\n        return this._usersTyping;\n    }\n\n    set usersTyping(value) {\n        this._usersTyping = value;\n    }\n}","import {NormalChat} from \"./chat/normalChat\";\nimport chatSocket from \"./chatSocket\";\nimport User from \"./User\";\nimport Message from \"./message/message\";\nimport {getDispatch} from 'reactn';\nimport {globalData} from \"../global/globalData\";\nimport {createNormalChat} from \"./apiCalls\";\n\nexport default class TempChatLoader{\n\n    _isShown = false;\n    _chatNow;\n    /*\n        a new temporary chat gets created.\n        parameters uid and username required\n     */\n    createNew(uid,username){\n        this.chatNow = new NormalChat(0, username, uid);\n    }\n    /*\n        is the current tempChat already the one with this uid?\n     */\n    doesExist(uid){\n        if(this.chatNow === undefined)\n            return false;\n        return this.chatNow.otherUser === uid;\n    }\n    /*\n        tempChat gets shown\n     */\n    show(){\n        this.isShown = true;\n        getDispatch().showTempChat(this.chatNow);\n    }\n\n    update(){\n        getDispatch().updateTempChat(this.chatNow);\n    }\n\n    hide(){\n        this.isShown = false;\n        getDispatch().hideTempChat();\n    }\n    /*\n        a new normalChat is created out of the current tempChat\n     */\n    async createNewNormalChat(msg){\n\n        /*\n            the request gets sent to the server\n         */\n        const otherUid = this.chatNow.otherUser;\n        const otherUsername = this.chatNow.chatName;\n\n        const response = await createNormalChat({\n            uid: otherUid,\n            username: otherUsername,\n            message: {\n                type: globalData.messageTypes.normalMessage,\n                content: {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            }\n        });\n\n        if(response.ok){\n\n            const data = await response.json();\n\n            if(chatSocket.users.getIndex(otherUid) === -1){\n                chatSocket.users.add(otherUid,new User(otherUid,otherUsername));\n            }\n            const otherUser = chatSocket.users.get(otherUid);\n\n            const newChat = new NormalChat(data.ncid,otherUsername,otherUid);\n            /*\n                chat gets added to user\n             */\n            otherUser.normalChat = newChat.id;\n            /*\n                chat is added in binsearchArray\n             */\n            chatSocket.chats.normal.add(data.ncid,newChat);\n            /*\n                message is added to chat\n             */\n            const message = new Message(\n                data.mid,\n                chatSocket.userSelf.uid,\n                newChat,\n                new Date(Date.now()),\n                globalData.messageTypes.normalMessage,\n                {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            );\n            newChat.messages.add(message.mid,message);\n\n            //args: chat\n            getDispatch().addChat(newChat);\n            /*\n                currentChat gets changed\n             */\n            getDispatch().selectChat(newChat);\n            /*\n                tempChat is hidden\n             */\n            this.hide();\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    get isShown() {\n        return this._isShown;\n    }\n\n    set isShown(value) {\n        this._isShown = value;\n    }\n\n    get chatNow() {\n        return this._chatNow;\n    }\n\n    set chatNow(value) {\n        this._chatNow = value;\n    }\n}\n\n","import io from 'socket.io-client';\nimport User from \"./User\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport {NormalChat} from './chat/normalChat';\nimport {GroupChat} from \"./chat/groupChat\";\nimport EventHandler from \"../util/Event\";\nimport TempChatLoader from \"./tempChatLoader\";\nimport {getGlobal,getDispatch} from 'reactn';\nimport {selectChats} from \"./apiCalls\";\n\nclass ChatSocket{\n\n    _socket;\n    _userSelf = {\n        uid: 0,\n        username: \"\"\n    };\n    _users = new BinSearchArray();\n    _chats = {\n        normal: new BinSearchArray(),\n        group: new BinSearchArray()\n    };\n    _event = new EventHandler();\n    _finishedLoading = false;\n    /*\n        normalchat not saved in the database\n     */\n    _temporaryChat = new TempChatLoader();\n    _initCalled = false;\n\n    destruct(){\n\n        if(this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.disconnect();\n        }\n        this.initCalled = false;\n    }\n\n    async init(){\n\n        const {uid,username} = getGlobal().userSelf;\n        /*\n            user-Object is created\n         */\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.initCalled = true;\n\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.socket = io.connect('/', {secure: true});\n        /*\n            authTokens are sent to client\n         */\n        this.socket.emit('auth', getGlobal().authTokens);\n        /*\n            is called when user is initialized\n         */\n        this.socket.on('initialized',() => {\n\n            this.initChats();\n        });\n        /*\n            msg-handler\n         */\n        this.socket.on('chat message',data => {\n            /*\n                gets chat of msg\n                adds this message to chat\n            */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            if(chat !== null) {\n                const isCurrentChat = this.isCurrentChat(\n                    chat.type,\n                    chat.id\n                );\n                chat.addMessage(\n                    data.uid,\n                    data.mid,\n                    data.type,\n                    data.content\n                );\n                /*\n                    hasNewMsg gets updated\n                    if current chat --> false\n                 */\n                chat.hasNewMsg = !isCurrentChat;\n                /*\n                    if chat is not currentChat, unreadMessages gets incremented\n                 */\n                chat.unreadMessages ++;\n                /*\n                    new message event is triggered\n                 */\n                this.event.trigger(\n                    'new message',\n                    data.chat.type,\n                    data.chat.id\n                );\n            }\n        });\n        /*\n            started typing\n         */\n        this.socket.on('started typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.startedTyping(data.uid);\n        });\n        /*\n            stopped typing\n         */\n        this.socket.on('stopped typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.stoppedTyping(data.uid);\n        });\n        /*\n            the result of the search in new chat\n         */\n        this.socket.on('users-noChat',data => {\n            chatSocket.event.trigger('users-noChat',data);\n        });\n        /*\n            the user has been added to a new chat\n         */\n        this.socket.on(\"new chat\",data => {\n            this.addNewChat(data);\n        });\n        /*\n            Bei disconnect wird Seite neu geladen\n         */\n        this.socket.on('disconnect',() => {\n            setTimeout(function() {\n\n                alert('Verbindung verloren! Seite wird neu geladen');\n                // eslint-disable-next-line no-restricted-globals\n                location.reload();\n            },1000);\n        });\n    }\n\n    async initChats(){\n\n        const response = await selectChats();\n\n        if(response.status === 200) {\n\n            const data = await response.json();\n            for (let i = 0; i < data.length; i++) {\n                if (data[i].type === 'normalChat') {\n                    /*\n                        normalChat is added\n                     */\n                    this.addNewNormalChat(data[i]);\n                } else if (data[i].type === 'groupChat') {\n                    /*\n                        groupChat is added\n                     */\n                    this.addNewGroupChat(data[i]);\n                }\n            }\n        }\n        this.finishedLoading = true;\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\n    }\n\n    getChatArraySortedByDate(){\n\n        function getMessageTime (chat) {\n            const c = chat.latestMessage;\n            if(c !== null)\n                return c.date.getTime();\n            return new Date(0).getTime();\n        }\n\n        function getMaxDate (chats,iFrom) {\n            let max = iFrom;\n            for(let i = iFrom+1;i<chats.length;i++){\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\n                    max = i;\n            }\n            return max;\n        }\n        function swap (items, firstIndex, secondIndex) {\n            let temp = items[firstIndex];\n            items[firstIndex] = items[secondIndex];\n            items[secondIndex] = temp;\n        }\n        /*\n            Array is cloned\n         */\n        function cloneArr (arr) {\n            const clone = new Array(arr.length);\n            for(let i=0;i<arr.length;i++){\n                const chat = arr[i].value;\n                clone[i] = chat.getChatObject();\n            }\n            return clone;\n        }\n        /*\n            es wird ein sortiertes Array zurückgegeben\n         */\n        function getSorted (chats) {\n            //Array wird erzeugt\n            const sorted = cloneArr(chats);\n            /*\n                es wird immer das höchste eingefügt, um Array zu sortieren\n             */\n            for(let i=0;i<sorted.length-1;i++){\n                let max = getMaxDate(sorted,i);\n                swap(sorted,i,max);\n            }\n            return sorted;\n        }\n        /*\n            Arrays werden gemerged\n         */\n        function mergeArr (arr1,arr2) {\n\n            const merged = new Array(arr1.length + arr2.length);\n            let p1 = 0;\n            let p2 = 0;\n            for(let i=0;i<merged.length;i++){\n                if(! (p2 < arr2.length)){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else if (! (p1 < arr1.length)){\n                    merged[i] = arr2[p2];\n                    p2++;\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else{\n                    merged[i] = arr2[p2];\n                    p2++;\n                }\n            }\n            return merged;\n        }\n        const ncSorted = getSorted(this.chats.normal);\n        const gcSorted = getSorted(this.chats.group);\n\n        return mergeArr(ncSorted, gcSorted);\n    }\n\n    isCurrentChat(type,id){\n        const currentChat = getGlobal().currentChat;\n        return currentChat.type === type && currentChat.id === id;\n    };\n\n    getChat(type,id){\n        /*\n            type can be:\n                normalChat\n                tempChat\n                groupChat\n         */\n        if(type === 'normalChat')\n            return this.chats.normal.get(id);\n        else if(type === 'tempChat') {\n            return this.temporaryChat.chatNow;\n        }\n        else if(type === 'groupChat')\n            return this.chats.group.get(id);\n    }\n    /*\n        a new chat gets added\n     */\n    addNewChat(data){\n\n        let newChat;\n\n        if(data.type === 'normalChat'){\n            /*\n                new normalChat gets created\n             */\n            newChat = this.addNewNormalChat(data);\n\n        }else if(data.type === 'groupChat'){\n\n            newChat = this.addNewGroupChat((data));\n        }\n        newChat.unreadMessages = 1;\n        /*\n            event gets triggered\n         */\n        getDispatch().addChat(newChat);\n    }\n    /*\n        a new normalChat gets added\n     */\n    addNewNormalChat(data){\n        /*\n            check if the other user does already exist\n                if not --> gets created\n         */\n        let otherUser;\n        if(this.users.getIndex(data.members[0].uid) === -1){\n            otherUser = new User(\n                data.members[0].uid,\n                data.members[0].username\n            );\n            this.users.add(otherUser.uid,otherUser);\n        }else{\n            otherUser = this.users.get(data.members[0].uid);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat = new NormalChat(\n            data.id,\n            data.chatName,\n            otherUser.uid,\n            data.unreadMessages\n        );\n        /*\n            normalChat is set at other user\n         */\n        otherUser.normalChat = newChat.id;\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.normal.add(data.id,newChat);\n\n        return newChat;\n    }\n    /*\n        a new groupChat gets added\n     */\n    addNewGroupChat(data){\n        /*\n            check which do not exist already --> get added\n         */\n        const members = [];\n\n        for(let i=0;i<data.members.length;i++) {\n\n            const member = data.members[i];\n            /*\n                does the user already exist?\n             */\n            let user;\n            if (this.users.getIndex(member.uid) === -1) {\n                user = new User(\n                    member.uid,\n                    member.username\n                );\n                this.users.add(user.uid, user);\n            } else {\n                user = this.users.get(member.uid);\n            }\n            /*\n                member gets added\n             */\n            members.push(user.uid);\n            /*\n                chat is added at user\n             */\n            user.addGroupChat(data.id);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat =\n            new GroupChat(\n                data.id,\n                data.chatName,\n                members,\n                data.unreadMessages\n            );\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.group.add(data.id,newChat);\n\n        return newChat;\n    }\n\n    get socket() {\n        return this._socket;\n    }\n\n    set socket(value) {\n        this._socket = value;\n    }\n\n    get userSelf() {\n        return this._userSelf;\n    }\n\n    set userSelf(value) {\n        this._userSelf = value;\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get chats() {\n        return this._chats;\n    }\n\n    set chats(value) {\n        this._chats = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get finishedLoading() {\n        return this._finishedLoading;\n    }\n\n    set finishedLoading(value) {\n        this._finishedLoading = value;\n    }\n\n    get temporaryChat() {\n        return this._temporaryChat;\n    }\n\n    set temporaryChat(value) {\n        this._temporaryChat = value;\n    }\n\n    get initCalled() {\n        return this._initCalled;\n    }\n\n    set initCalled(value) {\n        this._initCalled = value;\n    }\n}\n\nlet chatSocket = new ChatSocket();\n\nexport function resetChatSocket(){\n    chatSocket.destruct();\n    chatSocket = new ChatSocket();\n}\n\nexport default chatSocket;\n","import React,{Component} from \"reactn\";\nimport {Link} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class ChatItem extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastMsg: undefined,\n            typeMsg: ''\n        }\n    }\n    /*\n        is this chat selected?\n     */\n    isSelected = () => {\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\n    };\n    /*\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\n        um die typeMsg zu aktualisieren\n     */\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        let typeMsg = '';\n        /*\n            wenn latestuserTyping = null, schreibt gerade keiner\n         */\n        const userTyping = chat.getLatestUserTyping();\n        if(userTyping !== null){\n            typeMsg = userTyping.username + \" schreibt...\";\n        }\n        //state wird aktualisiert\n        this.setState({\n            typeMsg: typeMsg\n        });\n    };\n\n    render() {\n\n        const renderUnreadMsg = () => {\n            if(this.props.unreadMessages === 0)\n                return null;\n            else\n                return(\n                    <div className=\"newMsg-number\">\n                        {this.props.unreadMessages}\n                    </div>\n                );\n        };\n        /*\n            in der unteren Hälfte wird angezeigt wer schreibt\n            schreibt keiner, wird letzte Nachricht angezeigt\n         */\n        const renderLowerHalf = () => {\n            if(this.state.typeMsg === '')\n                return (\n                    <div className=\"w-100 lastMsg\">\n                        {renderMsg()}\n                        {renderDate()}\n                    </div>\n                );\n            else{\n                return (\n                    <div className=\"w-100 typeMsg\">\n                        {this.state.typeMsg}\n                    </div>\n                );\n            }\n        };\n\n        const renderMsg = () => {\n            if(this.props.latestMessage)\n                return(\n                    <span>\n                        {this.props.latestMessage.msgString}\n                    </span>\n                );\n            else\n                return(\n                    <span>\n                        Noch keine Nachrichten vorhanden\n                    </span>\n                );\n        };\n\n        const renderDate = () => {\n            if(this.props.latestMessage)\n                return(\n                    <div className=\"lastMsg-date\">\n                        {this.props.latestMessage.dateString}\n                    </div>\n                );\n            else\n                return null;\n        };\n\n        const getLink = () => {\n            if(this.props.type === 'normalChat'){\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\n            }else if(this.props.type === 'groupChat'){\n                return '/chat/group/' + this.props.id;\n            }else if(this.props.type === 'tempChat'){\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\n            }\n        };\n\n        return(\n            <li className={\"chat-item\" + (this.isSelected() ? \"selected \" : \"\")}>\n                <Link to={getLink()}>\n                    <div className=\"w-100\">\n                        <strong>\n                            {this.props.name}\n                        </strong>\n                        {renderUnreadMsg()}\n                    </div>\n                    {renderLowerHalf()}\n                </Link>\n            </li>\n        )\n    }\n\n    componentDidMount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden angelegt\n         */\n        //if(chat)\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n        /*else{\n            console.log('error',chatSocket.chats.group,this.props.type,this.props.id)\n        }*/\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did component update?\n         */\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\n            //Listeners get replaced\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n\n            //typeMsg gets deleted\n            this.setState({\n                typeMsg: ''\n            });\n        }\n\n    }\n    componentWillUnmount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden entfernt\n         */\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React,{Component} from \"reactn\";\nimport ChatSearchBox from \"./ChatSearchBox\";\nimport ChatItem from \"./ChatItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './chatList.scss';\n\nexport default class ChatList extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //the current searchValue at the chatlist\n            searchValue: ''\n        };\n    }\n\n    render() {\n\n        let found = 0;\n\n        const showNothingFoundMsg = () => {\n            if(found === 0)\n                return(\n                    <span>\n                        Nichts gefunden\n                    </span>\n                );\n            return null;\n        };\n\n        const renderTempChat = () => {\n            /*\n                is tempChat not null?\n             */\n            if(this.global.tempChat){\n                return(\n                    <ChatItem\n                        key={-1}\n                        id={0}\n                        type={'tempChat'}\n                        name={this.global.tempChat.chatName}\n                        unreadMessages={0}\n                        latestMessage={null}\n                    />\n                );\n            }\n            return null;\n        };\n\n        return(\n                <Dummy>\n                    <ChatSearchBox\n                        onSearch={searchValue => {\n                            this.setState({\n                                searchValue: searchValue\n                            })\n                        }}\n                    />\n\n                    <ul className=\"chat-list\">\n                        {renderTempChat()}\n                        {this.global.chats.map((chat,i) => {\n                            if(chat.chatName.includes(this.state.searchValue)) {\n                                found++;\n                                return (\n                                    <ChatItem\n                                        key={i}\n                                        id={chat.id}\n                                        type={chat.type}\n                                        name={chat.chatName}\n                                        unreadMessages={chat.unreadMessages}\n                                        latestMessage={chat.latestMessage}\n                                    />\n                                );\n                            }\n                            return null;\n                        })}\n                    </ul>\n                    {showNothingFoundMsg()}\n                </Dummy>\n        )\n    }\n}","import React from \"react\";\n\nimport './chatViewLoader.scss';\n\nexport default function ChatViewLoader (props){\n    return(\n        <div className=\"loader-init\">\n            <div className=\"col-sm-12 my-auto\">\n                <div className=\"init-container border rounded\">\n                    <div className=\"spinner-border text-secondary\"\n                         style={{\n                             width: '15rem',\n                             height: '15rem',\n                             borderWidth: '0.5rem'\n                         }}\n                         role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                    <div className=\"loader-text\">{props.msg}</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import {makeRequest} from \"../../global/requests\";\nimport {globalData} from \"../../global/globalData\";\n\nexport async function loadGroupChat(gcid){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/group/' + gcid + '/', config);\n}\nexport async function sendMessage(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message', config);\n}","import React,{Component} from \"react\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport {withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {globalData} from \"../../../global/globalData\";\nimport {sendMessage} from \"../apiCalls\";\n\nimport './messageForm.scss';\n\nclass MessageForm extends Component{\n\n    _userTyping = false;\n    _typeEventEmitted = false;\n    _typeTimeout;\n    /*\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\n     */\n    _isTempChat;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            showEmoji: false\n        }\n    }\n\n    onTyping = event => {\n\n        this.setState({\n           message: event.target.value\n        });\n\n        this.handleTypeMessage();\n    };\n\n    handleTypeMessage = () => {\n        /*\n            type message get only handled if the chat is not temporary\n         */\n        if(!this.isTempChat) {\n\n            if (this.userTyping) {\n                clearTimeout(this.typeTimeout);\n            }\n            this.userTyping = true;\n            if (!this.typeEventEmitted) {\n                this.typeEventEmitted = true;\n                chatSocket.socket.emit('started typing');\n            }\n            this.typeTimeout = setTimeout(() => {\n                this.userTyping = false;\n                if (this.typeEventEmitted) {\n                    this.typeEventEmitted = false;\n                    chatSocket.socket.emit('stopped typing');\n                }\n            }, 1000);\n        }\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        /*\n            es kann keine leere Nachricht geschickt werden\n         */\n        if(this.state.message !== ''){\n            const message = this.state.message;\n            /*\n                input wird geleert\n             */\n            this.setState({\n                message: ''\n            });\n            if(this.isTempChat) {\n\n                const {pathname} = this.props.location;\n                /*\n                    the chat is created\n                 */\n                chatSocket.temporaryChat.createNewNormalChat(message)\n                    .then(redirect => {\n                        if(redirect) {\n                            this.props.history.replace(\"/chat\");\n                            this.props.history.replace(pathname);\n                        }\n                    });\n            }else{\n\n                this.sendMessage(message)\n                    .then(mid => {\n                        /*\n                            message is added to chat\n                         */\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\n                        chat.addMessage(\n                            chatSocket.userSelf.uid,\n                            mid,\n                            globalData.messageTypes.normalMessage,\n                            {\n                                text: message,\n                                mentions: [],\n                                media: []\n                            }\n                        );\n                    })\n                    .catch(err => {});\n            }\n        }\n    };\n\n    sendMessage = async msg => {\n        /*\n            message is sent to server\n         */\n        const response = await sendMessage({\n            type: globalData.messageTypes.normalMessage,\n            content: {\n                text: msg,\n                mentions: [],\n                media: []\n            }\n        });\n\n        if (response.ok) {\n\n            const data = await response.json();\n            /*\n                mid is returned\n             */\n            return data.mid;\n        }\n        return new Error();\n    };\n\n    onEmojiInput = emoji => {\n\n        this.setState({\n            message: this.state.message + emoji.native\n        });\n        this.handleTypeMessage();\n    };\n\n    toggleEmoji = event => {\n        this.setState(state => ({\n            showEmoji: !state.showEmoji\n        }))\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form onSubmit={this.onSubmit}\n                      className=\"msg-form\">\n                    <div className=\"message-input\">\n                        <input autoComplete=\"off\"\n                               placeholder=\"Nachricht:\"\n                               value={this.state.message}\n                               onChange={this.onTyping}\n                        />\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\n                           onClick={this.toggleEmoji}\n                        />\n                    </div>\n                    <button className=\"btn-submit\" type=\"submit\">\n                        <i className=\"far fa-paper-plane fa-2x\"\n                           data-toggle=\"tooltip\"\n                           title=\"send message\" />\n                    </button>\n                </form>\n                {this.state.showEmoji ?\n                    <div style={{\n                        position: 'absolute',\n                        bottom: '60px',\n                        right: '50px',\n                        width: '350px',\n                        height: '425px'\n                    }}>\n                        <Picker onSelect={this.onEmojiInput}/>\n                    </div>\n                : null}\n            </Dummy>\n        )\n    }\n\n    componentDidMount() {\n        /*\n            isTempChat gets set\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            isTempChat gets updated\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    get userTyping() {\n        return this._userTyping;\n    }\n\n    set userTyping(value) {\n        this._userTyping = value;\n    }\n\n    get typeEventEmitted() {\n        return this._typeEventEmitted;\n    }\n\n    set typeEventEmitted(value) {\n        this._typeEventEmitted = value;\n    }\n\n    get typeTimeout() {\n        return this._typeTimeout;\n    }\n\n    set typeTimeout(value) {\n        this._typeTimeout = value;\n    }\n\n    get isTempChat() {\n        return this._isTempChat;\n    }\n\n    set isTempChat(value) {\n        this._isTempChat = value;\n    }\n}\n\nexport default withRouter(MessageForm);","import React,{Component} from \"reactn\";\nimport ReactDOM from 'react-dom';\nimport MessageForm from \"./MessageForm\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Message from \"./message/Message\";\nimport {isDifferentDay} from '../../../chatData/message/message'\n\nimport './chatContainer.scss';\n\nexport default class ChatContainer extends Component{\n\n    _isMounted = false;\n    _messages;\n    _messagesNode;\n\n    constructor(props) {\n        super(props);\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\n        this.state = {\n            msgLoading: false,\n            scrollToBottom: 0,\n            messages: [],\n            typeMessages: []\n        };\n    }\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\n    scrollHandler = event => {\n        this.setState({\n            scrollToBottom: this.getScrollToBottom()\n        });\n        /*\n            wenn oben angelangt, werden Nachrichten geladen\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    setScrollToBottom = val => {\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\n    };\n\n    getScrollToBottom  = () => {\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\n    };\n\n    assignMessagesRef = target => {\n        this.messages = target;\n    };\n\n    loadMessages = () => {\n\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\n        /*\n            loader is only shown, if top not reached\n         */\n        if(!chat.reachedTopMessages)\n            this.setState({\n                msgLoading: true\n            });\n        /*\n            messages are loaded\n         */\n        chat.loadMessages(10)\n            .then(messages => {\n                /*\n                    loader is hidden\n                    messages are added\n                 */\n                this.dispatch.addLoadedMessages(messages);\n                this.setState(state => ({\n                    msgLoading: false\n                }));\n                this.setScrollToBottom(this.state.scrollToBottom);\n            })\n            .catch(err => this.setState({\n                msgLoading: false\n            }));\n    };\n    /*\n        is called when the selected chat changed\n     */\n    chatChanged = () => {\n        /*\n            if scrollToBottom is 0, the messages are loaded\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    componentDidMount() {\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\n\n        this.chatChanged();\n\n        this.isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn das der Fall ist:\n                wird messages loaded listener auf neuen chat angewandt\n                scrollToBottom wird auf 0 gesetzt\n                scrolltop wird überprüft\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            //scrollToBottom wird auf 0 gesetzt\n            this.setScrollToBottom(0);\n\n            this.chatChanged();\n        }\n        /*\n            wenn scrollToBottom 0 wird zu bottom gescrollt\n         */\n        if(this.state.scrollToBottom === 0) {\n            this.setScrollToBottom(0);\n            /*\n                newMessages is set to 0\n             */\n            if(this.global.currentChat.newMessages > 0)\n                this.setGlobal(global => ({\n                   currentChat: {\n                       ...global.currentChat,\n                       newMessages: 0\n                   }\n                }));\n        }\n\n    }\n\n    render() {\n\n        const showLoaderTop = () => {\n            if(this.state.msgLoading)\n                return(\n                    <div className=\"messageLoader-top\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderNewMessages = () => {\n\n            if(this.global.currentChat.newMessages > 0)\n                return(\n                    <div id=\"scroll-down-number\" className=\"number\">\n                        {this.global.currentChat.newMessages}\n                    </div>\n                );\n            return null;\n        };\n\n        const renderBtnToBottom = () => {\n            if(this.isMounted) {\n                if (this.getScrollToBottom() > 10) {\n                    return (\n                        <div id=\"messages-bottom\"\n                             className=\"messages-bottom\"\n                             onClick={() => {\n                                 this.setState({\n                                     scrollToBottom: 0\n                                 })\n                             }}\n                        >\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\n                            </div>\n                            {renderNewMessages()}\n                        </div>\n                    )\n                }\n            }\n            return null;\n        };\n\n        let lastDate = new Date(0);\n        /*\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\n            wird ein Container mit Datum gerendert\n         */\n        const renderDateContainer = msg => {\n            if(isDifferentDay(msg.date,lastDate)){\n                lastDate = msg.date;\n                return(\n                    <div className = \"date-container\">\n                        <div>\n                            {msg.dateString}\n                        </div>\n                    </div>\n                )\n            }\n            lastDate = msg.date;\n            return null;\n        };\n\n        const renderAlertNoMessages = () => {\n            if(this.global.currentChat.messages.length === 0)\n                return(\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                );\n            return null;\n        };\n\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\"\n                     onScroll={this.scrollHandler}\n                     ref={this.assignMessagesRef}\n                >\n                    {showLoaderTop()}\n                    {this.global.currentChat.messages.map((msg,i) => {\n                        return (\n                            <div key={i}>\n                                {renderDateContainer(msg)}\n                                <Message\n                                    msg={msg}\n                                />\n                            </div>\n                        );\n                    })}\n                    {renderAlertNoMessages()}\n                    {renderBtnToBottom()}\n                </div>\n                <MessageForm\n                    chatType={this.props.chatType}\n                    chatId={this.props.chatId}\n                />\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    get isMounted() {\n        return this._isMounted;\n    }\n\n    set isMounted(value) {\n        this._isMounted = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get messagesNode() {\n        return this._messagesNode;\n    }\n\n    set messagesNode(value) {\n        this._messagesNode = value;\n    }\n}","import React,{Component} from \"react\";\nimport MessageForm from \"./chatContainer/MessageForm\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class TempChatContainer extends Component{\n\n    render() {\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\">\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                </div>\n                <MessageForm\n                    chatType={'tempChat'}\n                    chatId={0}\n                />\n            </div>\n        );\n    }\n    componentDidMount() {\n        chatSocket.temporaryChat.show();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.uid !== this.props.uid)\n            chatSocket.temporaryChat.update();\n    }\n    componentWillUnmount() {\n        chatSocket.temporaryChat.hide();\n    }\n}","import React from \"react\";\n\nexport function AddressNotValid() {\n    return(\n        <div>\n            <h2>ungültige Addresse</h2>\n        </div>\n    );\n}\nexport function CannotWriteYourself(){\n    return(\n        <div>\n            <h2>Du kannst dir selbst nicht schreiben</h2>\n        </div>\n    );\n}\nexport function BlockedByThisUser(){\n    return(\n        <div>\n            <h2>Dieser User hat dich blockiert</h2>\n        </div>\n    );\n}\nexport function UserNotExisting(){\n    return(\n        <div>\n            <h2>Dieser User existiert nicht</h2>\n        </div>\n    );\n}\nexport function NoMemberInPublicChat(){\n    return (\n        <div>\n            <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\n        </div>\n    );\n}\nexport function NoAuthorization(){\n    return (\n        <div>\n            <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\n        </div>\n    );\n}\nexport function ChatNotExisting(){\n    return (\n        <div>\n            <h2>Dieser Chat existiert nicht</h2>\n        </div>\n    );\n}\nexport function GeneralError(){\n    return (\n        <div>\n            <h2>Fehler</h2>\n        </div>\n    );\n}","import React, {Component} from \"reactn\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport TempChatContainer from \"./TempChatContainer\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/User\";\nimport {\n    AddressNotValid,\n    BlockedByThisUser,\n    CannotWriteYourself,\n    UserNotExisting\n} from \"./chatViewErrorMessages\";\n\nexport default class NormalChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: UserErrorCode.none\n        }\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if(this.state.error === UserErrorCode.nan){\n                return(\n                    <AddressNotValid/>\n                );\n            }\n            else if(this.state.error === UserErrorCode.isSelf){\n                return(\n                    <CannotWriteYourself/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if(this.state.loaded){\n\n                if(this.state.error === UserErrorCode.none){\n\n                    return(\n                        <ChatContainer\n                            chatType={this.global.currentChat.type}\n                            chatId={this.global.currentChat.id}\n                        />\n                    )\n                }else if(this.state.error === UserErrorCode.tempChat){\n                    return(\n                        <TempChatContainer uid={this.state.uid}/>\n                    )\n                }else if(this.state.error === UserErrorCode.blocked){\n                    return(\n                        <BlockedByThisUser/>\n                    )\n                }else{\n                    return(\n                        <UserNotExisting/>\n                    )\n                }\n            }\n        };\n\n        return <div className=\"h-100\">\n            {renderLoader()}\n            {renderChat()}\n        </div>;\n    }\n\n    componentDidMount() {\n        this.userChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did uid change?\n         */\n        if(prevProps.uid !== this.props.uid){\n            /*\n                is props.uid a number?\n             */\n            if(isNaN(this.props.uid)){\n                this.setState({\n                    error: UserErrorCode.nan\n                });\n            }\n            else{\n                this.userChanged();\n            }\n\n        }\n    }\n    /*\n        is called when the user changed and when the component mounted\n            this is checked after each update\n     */\n    userChanged = () => {\n\n        const uid = parseInt(this.props.uid);\n\n        /*\n            is the user self?\n         */\n        if(this.global.userSelf.uid === uid){\n            this.setState({\n                error: UserErrorCode.isSelf,\n                loaded: true\n            });\n        }else {\n\n            const userExists = () => {\n\n                getUserNormalChat(uid)\n                    .then(res => {\n                        /*\n                            no error\n                                checks if existing or tempChat\n                         */\n                        if (res === UserErrorCode.none) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.users.get(uid).username,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                normalChat is selected\n                             */\n                            this.selectNormalChat(uid);\n                            /*\n                                tempChat\n                             */\n                        } else if (res === UserErrorCode.tempChat) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                the temporary chat is selected\n                             */\n                            this.selectTempChat();\n                        }\n                        /*\n                            some error has occured, state is set\n                         */\n                        else{\n                           this.setState({\n                               error: UserErrorCode.error\n                           })\n                        }\n                        this.setState({\n                            loaded: true\n                        });\n\n                    })\n                    .catch(err => this.setState({\n                        error: UserErrorCode.error\n                    }));\n            };\n\n            if (chatSocket.finishedLoading) {\n                userExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    userExists();\n                });\n            }\n\n            this.setState({\n                uid: parseInt(this.props.uid)\n            });\n        }\n    };\n    /*\n        the tempChat is selected\n     */\n    selectTempChat(){\n        this.dispatch.showTempChat();\n    }\n    /*\n        a normalCHat is selected\n     */\n    selectNormalChat(uid){\n        /*\n            does the user exist?\n         */\n        if (chatSocket.users.getIndex(uid) === -1) {\n\n            this.setState({\n                error: UserErrorCode.userNotExisting\n            });\n        }else {\n            /*\n                chat is pulled from chatSocket\n             */\n            const id = chatSocket.users.get(uid).normalChat;\n            const chat = chatSocket.getChat('normalChat', id);\n\n            this.dispatch.selectChat(chat);\n        }\n    }\n    /*\n        property- display normalChat is removed from global\n     */\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\n\nimport './modal.scss';\n\nclass Modal extends Component{\n\n    render() {\n        const clickedOutside = () => {\n            this.props.history.goBack();\n        };\n        return(\n            <div\n                className=\"modal-outer\"\n                onClick={clickedOutside}>\n                <div className=\"h-100\" style={{display: \"flex\"}}>\n\n                        <div\n                            className=\"modal-inner\"\n                            onClick={event => {event.stopPropagation()}}>\n                            <div\n                                className=\"btn-close\"\n                                onClick={() => {this.props.history.goBack()}}>\n                                &times;\n                            </div>\n                            {this.props.children}\n                        </div>\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Modal);\n\nexport function ModalHeader(props){\n    return(\n        <div className=\"m-header\">\n            {props.children}\n        </div>\n    )\n}\n\nexport function ModalMain(props){\n    return(\n        <div className=\"m-main\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"react\";\n\nexport default class UserItem extends Component{\n\n    clicked = event => {\n        if(this.props.isSelected){\n            this.props.deselectUser(this.props.index);\n        }else\n            this.props.selectUser(this.props.index);\n    };\n\n    render() {\n        return(\n            <li key={this.props.index}\n                onClick={this.clicked}\n            >\n                <div className=\"username\">\n                    {this.props.username}\n                </div>\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\n                    <i className=\"fas fa-check\" />\n                </div>\n            </li>\n        );\n    }\n}","import React,{Component} from \"react\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class extends Component {\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            error: errorCode.none,\n            /*\n                are there items left?\n             */\n            hasMore: true\n        }\n    }\n\n    searchChanged = event => {\n        this.setState({\n            searchValue: event.target.value,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more users are loaded\n     */\n    loadUsers = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const data = await this.props.loadUsers(\n                    searchValue,\n                    length\n                );\n\n                if (data.length === 0) {\n                    this.setState({\n                        hasMore: false,\n                        error: errorCode.none\n                    })\n                } else {\n                    this.setState(state => ({\n                        searchResult: state.searchResult.concat(data),\n                        error: errorCode.none\n                    }));\n                }\n\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n    /*\n        is called when an user is selected\n     */\n    selectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.selectUser(user.uid,user.username);\n    };\n\n    deselectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.deselectUser(user.uid);\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\n                    <input type=\"text\"\n                           className=\"form-control p-2 m-2\"\n                           placeholder=\"Benutzer suchen\"\n                           value={this.state.searchValue}\n                           onChange={this.searchChanged}\n                    />\n                </form>\n                <div\n                    className=\"selectUsers\"\n                    ref={ref => this.scrollParentRef = ref}\n                >\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={this.loadUsers}\n                        hasMore={this.state.hasMore}\n                        loader={\n                            <div className=\"loader\" key={-1}>\n                                <div\n                                    className=\"spinner-border text-secondary\"\n                                    role=\"status\"\n                                >\n                                    <span className=\"sr-only\">\n                                        Loading...\n                                    </span>\n                                </div>\n                            </div>\n                        }\n                        useWindow={false}\n                        getScrollParent={() => this.scrollParentRef}\n                    >\n                        <ul className=\"selectUsers\">\n                            {this.state.searchResult.map((item, index) => (\n                                <UserItem\n                                    key={index}\n                                    index={index}\n                                    uid={item.uid}\n                                    username={item.username}\n                                    selectUser={this.selectUser}\n                                    deselectUser={this.deselectUser}\n                                    isSelected={this.props.isUserSelected(item.uid)}\n                                />\n                            ))}\n                            {this.state.searchResult.length === 0 ?\n                                <div key={-1} className=\"nothingFound\">\n                                    Nichts gefunden!\n                                </div>\n                                :\n                                null\n                            }\n                        </ul>\n                    </InfiniteScroll>\n                </div>\n            </Dummy>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport UserList from \"./UserList\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './selectUsers.scss';\n\nexport default class SelectUsers extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the users already selected\n             */\n            selectedUsers: [],\n            showOnlySelected: false\n        }\n    }\n    /*\n        gets called when a user gets selected\n     */\n    selectUser = (uid,username) => {\n        this.setState(state => ({\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\n        }));\n    };\n\n    deselectUser = (uid) => {\n        this.setState(state => {\n            const arrClone = [...state.selectedUsers];\n            const index = arrClone.findIndex(item => {\n                return item.uid === uid;\n            });\n            arrClone.splice(index,1);\n            return {\n                selectedUsers: arrClone\n            }\n        });\n    };\n\n    deselectIndex = index => {\n        this.deselectUser(this.state.selectedUsers[index].uid);\n    };\n\n    isUserSelected = (uid) => {\n        return this.state.selectedUsers.find(item => {\n            return item.uid === uid;\n        });\n    };\n    /*\n        an Array with the uids of the users gets returned to the parent component\n     */\n    btnNextClicked = event => {\n\n        this.props.onNext(this.state.selectedUsers);\n    };\n\n    render() {\n\n        const renderSelectedUsers = () => {\n            if(this.state.selectedUsers.length === 0){\n                return (\n                    <h4>\n                        Noch niemand ausgewählt\n                    </h4>);\n            }else{\n                return(\n                    <h4 className=\"w-100\">\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\n                              onClick={event => {\n                                  this.setState(state => ({\n                                      showOnlySelected: !state.showOnlySelected\n                                  }));\n                              }}\n                        >\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\n                        </span>\n                        &nbsp;ausgewählt\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\n                           onClick={this.btnNextClicked}\n                        />\n                    </h4>\n                )\n            }\n        };\n        /*\n            selected users cannot be shown if there is no one selected.\n                --> showOnlySelected = false\n         */\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\n            this.setState({\n                showOnlySelected: false\n            });\n\n        return(\n            <Dummy>\n                <div className=\"select-users\">\n                    {renderSelectedUsers()}\n                </div>\n                    {!this.state.showOnlySelected ?\n                        <UserList selectUser={this.selectUser}\n                                  deselectUser={this.deselectUser}\n                                  isUserSelected={this.isUserSelected}\n                                  loadUsers={this.props.loadUsers}\n                        />\n                        :\n                        <div className=\"selectUsers\">\n                            <ul className=\"selectUsers only-selected\">\n                                {this.state.selectedUsers.map((item,index) => (\n                                    <UserItem\n                                        key={index}\n                                        index={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        selectUser={() => {}}\n                                        deselectUser={this.deselectIndex}\n                                        isSelected={true}\n                                    />\n                                ))}\n                            </ul>\n                        </div>\n                    }\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../../global/requests\";\n\n/*\n    the specified members will be added to the chat\n        gcid: groupChat -  id\n        users: the users\n            [\n                {uid:(num),username:(str)}\n                {uid:(num),username:(str)}\n            ]\n */\nexport const addMembers = async(gcid,users) => {\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            users: users\n        })\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/members',\n            config\n        );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error adding members\");\n    }\n}\n/*\n    all users who are not in the group\n        gcid: groupChat -  id\n        body: the body of the request\n            {\n                search: a search can be specified,\n                limit: 10,\n                start: the number of users who are already loaded\n            }\n */\nexport const fetchUsersNotInGroup = async(gcid,body) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest(\n        '/user/notInGroup/' + gcid,\n        config\n    );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}\n/*\n    the user leaves the chat\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const leaveChat = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/leave',\n            config\n        );\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error leaving chat\");\n        }\n    }else{\n        throw new Error(\"Error leaving chat\");\n    }\n}\n/*\n    the admin status of the user is removed\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const removeSelfAdmin = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/removeAdmin',\n            config\n        );\n\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error removing admin\");\n        }\n    }else{\n        throw new Error(\"Error removing admin\");\n    }\n}","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport {ModalHeader, ModalMain} from \"../../../utilComp/Modal\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {addMembers, fetchUsersNotInGroup} from \"./apiCalls\";\n/*\n    props:\n        gcid: id of the groupChat\n */\nexport default function AddUsers(props){\n\n    let history = useHistory();\n\n    const submitUsers = async (selectedUsers) => {\n        /*\n            addMembers call returns nothing\n         */\n        try{\n            await addMembers(props.gcid,selectedUsers);\n            /*\n                if ok, modal is closed\n             */\n            history.goBack();\n        }catch (e){\n            //TODO: error message\n        }\n    };\n\n    const loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        return await fetchUsersNotInGroup(\n            props.gcid,{\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            }\n        )\n    };\n\n    return(\n        <Dummy>\n            <ModalHeader>\n                <h2>\n                    Benutzer hinzufügen\n                </h2>\n            </ModalHeader>\n            <ModalMain>\n                <div className={\"addMembers\"}>\n                    <SelectUsers\n                        onNext={submitUsers}\n                        loadUsers={loadUsers}\n                    />\n                </div>\n            </ModalMain>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\n\nclass UserOptions extends Component {\n\n    isSelfAdmin = () => {\n        return this.props.memberSelf.isAdmin;\n    };\n\n    isMemberSelf(){\n        return this.props.member.uid === this.global.userSelf.uid;\n    };\n\n    removeMemberFromChat = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid,\n                    config\n                );\n        }\n    };\n\n    makeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/giveAdmin',\n                    config\n                );\n\n        }\n    };\n\n    removeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/removeAdmin',\n                    config\n                );\n        }\n    };\n\n    render(){\n\n        const {pathname} = this.props.location;\n\n        return (\n            <ul className=\"userOptions\">\n                <li key={0}>\n                    <Link to={pathname + \"/userInfo/\" + this.props.member.uid}>\n                        zeige {this.props.member.username} an\n                    </Link>\n                </li>\n                <li key={1}>\n                    <Link to={\"/chat/user/\" + this.props.member.uid}>\n                        Nachricht an {this.props.member.username}\n                    </Link>\n                </li>\n                {/*\n                    if the member is admin, he has more options\n                    */\n                    this.isSelfAdmin() && ! this.isMemberSelf() ?\n                        <Dummy>\n                            <li\n                                key={2}\n                                className=\"noLink\"\n                                onClick={this.removeMemberFromChat}\n                            >\n                                aus chat entfernen\n                            </li>\n                            {this.props.member.isAdmin ?\n                                <li\n                                    key={3}\n                                    className=\"noLink\"\n                                    onClick={this.removeMemberAdmin}\n                                >\n                                    admin status entfernen\n                                </li>\n                                :\n                                <li\n                                    key={4}\n                                    className=\"noLink\"\n                                    onClick={this.makeMemberAdmin}\n                                >\n                                    zu admin machen\n                                </li>\n                            }\n                        </Dummy>\n                        : null\n                }\n            </ul>\n        )\n    }\n}\n\nexport default withRouter(UserOptions);","import React from \"react\";\nimport {Link,useLocation} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {leaveChat, removeSelfAdmin} from \"./apiCalls\";\n\nexport default function ChatOptions(props) {\n\n    const {pathname} = useLocation();\n\n    const isSelfAdmin = () => {\n        return props.memberSelf.isAdmin;\n    };\n\n    return(\n        <ul className=\"chatOptions\">\n            {isSelfAdmin() ?\n                <Dummy>\n                    <li key={0} className=\"addUsers\">\n                        <Link to={pathname + \"/addUsers\"}>\n                            Benutzer hinzufügen\n                        </Link>\n                    </li>\n                    <li\n                        key={1}\n                        className=\"removeSelfAdmin noLink\"\n                        onClick={() => {\n                            removeSelfAdmin(props.gcid)\n                                .then(() => {})\n                                .catch(err => {console.log(err)})\n                        }}\n                    >\n                        admin status entfernen\n                    </li>\n                </Dummy>\n                : null}\n            <li\n                key={2}\n                className=\"leaveChat noLink\"\n                onClick={() => {\n                    leaveChat(props.gcid)\n                        .then(() => {})\n                        .catch(err => {console.log(err)})\n                }}\n            >\n                Chat verlassen\n            </li>\n        </ul>\n    )\n}","import React,{Component} from \"react\";\nimport InlineEdit from 'react-ions/lib/components/InlineEdit'\n\nexport default class Edit extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            value: this.props.value\n        }\n    }\n\n    handleEdit = async event => {\n\n        const value = event.target.value;\n\n        this.setState({\n            isEditing: false,\n            value: value\n        });\n\n        await this.props.onSubmit(value);\n    };\n\n    editPressed = () => {\n        this.setState({\n            isEditing: true\n        });\n    };\n\n    render () {\n        return (\n            <div className={this.props.class}>\n                <InlineEdit\n                    name={this.props.name}\n                    value={this.state.value}\n                    isEditing={this.state.isEditing}\n                    changeCallback={this.handleEdit}\n                    optClass={\"input\"}\n                />\n                <i\n                    className=\"fas fa-edit edit\"\n                    onClick={this.editPressed}\n                />\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class DescriptionEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                description: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/description\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"description\"}\n                name={\"editDescription\"}\n                value={this.props.description}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class ChatNameEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                chatName: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/chatName\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"chatName\"}\n                name={\"editChatName\"}\n                value={this.props.chatName}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Dropdown from \"rc-dropdown\";\nimport UserOptions from \"./UserOptions\";\nimport ChatOptions from \"./ChatOptions\";\nimport DescriptionEdit from \"./edit/editDescription\";\nimport ChatNameEdit from \"./edit/editChatName\";\n\nimport'./groupChatInfo.scss';\n\n/*\n    TODO groupchatinfo change socket events\n */\nclass GroupChatInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            data: null\n        }\n    }\n\n    render() {\n\n        if(this.state.error)\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Ein Fehler ist aufgetreten!\n                </div>\n            );\n        const uidSelf = chatSocket.userSelf.uid;\n\n        return(\n            <div className=\"groupChatInfo\">\n                {this.props.data.memberSelf.isAdmin ?\n                    <h1>\n                        <ChatNameEdit\n                            gcid={this.props.gcid}\n                            chatName={this.props.data.chatName}\n                        />\n                    </h1>\n                    :\n                    <div className=\"chatName\">\n                        <h1>\n                            {this.props.data.chatName}\n                        </h1>\n                    </div>\n                }\n                {this.props.data.memberSelf.isAdmin ?\n                    <DescriptionEdit\n                        gcid={this.props.gcid}\n                        description={this.props.data.description}\n                    />\n                    :\n                    <div className=\"description\">\n                        {this.props.data.description}\n                    </div>\n                }\n                <Dropdown\n                    trigger={['click']}\n                    overlay={\n                        <ChatOptions\n                            gcid={this.props.gcid}\n                            memberSelf={this.props.data.memberSelf}\n                        />\n                    }\n                    >\n                    <i\n                        className=\"fas fa-ellipsis-v fa-lg chat-options-btn fa-2x\"\n                        role=\"button\"\n                    />\n                </Dropdown>\n\n                <h4>\n                    {this.props.data.members.length}\n                    &nbsp;Mitglieder:\n                </h4>\n                <ul className=\"userList\">\n                    {this.props.data.members.map((item,index) => (\n                        <li key={index}>\n                            <div className=\"userItem\">\n                            {uidSelf === item.uid ?\n                                <span>Du</span>\n                            :\n                                item.username\n                            }\n                            <div className=\"right\">\n                                {item.isAdmin ?\n                                    <span className=\"user-admin\">\n                                        Admin&nbsp;&nbsp;\n                                    </span>\n                                : null}\n                                <Dropdown\n                                    trigger={['click']}\n                                    overlay={\n                                        <UserOptions\n                                            gcid={this.props.gcid}\n                                            memberSelf={this.props.data.memberSelf}\n                                            member={item}\n                                        />\n                                    }\n                                    animation=\"slide-up\"\n                                    alignPoint\n                                >\n                                    <i\n                                        className=\"fas fa-ellipsis-v fa-lg\"\n                                        role=\"button\"\n                                    />\n                                </Dropdown>\n                            </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default withRouter(GroupChatInfo);","import React from \"react\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport Modal from \"../../../utilComp/Modal\";\nimport AddUsers from \"./AddUsers\";\nimport GroupChatInfo from \"./GroupChatInfo\";\nimport Responsive from \"../../../responsive/Responsive\";\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default function ModalRouterGroupChatInfo(props){\n\n    let { path } = useRouteMatch();\n\n    const groupChatInfo = (\n        <GroupChatInfo\n            gcid={props.gcid}\n            data={props.data}\n        />\n    );\n\n    return(\n        <Dummy>\n            <Responsive displayIn={[\"Mobile\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <AddUsers\n                            gcid={props.gcid}\n                        />\n                    </Route>\n                    <Route path={\"*\"}>\n                        {groupChatInfo}\n                    </Route>\n                </Switch>\n            </Responsive>\n            <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <Modal>\n                                <AddUsers\n                                    gcid={props.gcid}\n                                />\n                        </Modal>\n                    </Route>\n                </Switch>\n                {groupChatInfo}\n            </Responsive>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport ModalRouterGroupChatInfo from \"./groupChatInfo/ModalRouterGroupChatInfo\";\nimport {\n    AddressNotValid,\n    ChatNotExisting,\n    NoAuthorization,\n    NoMemberInPublicChat,\n    GeneralError\n} from \"./chatViewErrorMessages\";\nimport {loadGroupChat} from \"./apiCalls\";\n\nexport const groupChatErrorCode = {\n    none: 0,\n    nan: 1,\n    chatNotExisting: 2,\n    notPartOfChat: 3,\n    private: 4,\n    general: 5\n};\n\nexport const groupChatTabs = {\n    chat: 0,\n    info: 1\n};\n\nexport default class GroupChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gcid: 0,\n            loaded: false,\n            chatData: null,\n            error: groupChatErrorCode.none\n        }\n    }\n\n    loadGroupChatInfo = async(gcid) => {\n\n        try {\n            const response = await loadGroupChat(this.props.gcid);\n\n            if(response.status === 403)\n                return groupChatErrorCode.private;\n\n            else if(response.status === 404)\n                return groupChatErrorCode.chatNotExisting;\n\n            else if (response.ok) {\n\n                let data = await response.json();\n\n                this.setState({\n                    chatData: data\n                });\n\n                if(data.error) {\n\n                    if (data.error === 'not part of chat')\n                        return groupChatErrorCode.notPartOfChat;\n\n                    else\n                        return groupChatErrorCode.general\n\n                }else if(chatSocket.chats.group.getIndex(gcid) !== -1){\n\n                    return groupChatErrorCode.none;\n                }\n            }\n            else {\n                return groupChatErrorCode.general\n            }\n        } catch (err) {\n            return groupChatErrorCode.general\n        }\n    };\n    /*\n        is called after the chatId changed\n     */\n    chatChanged = () => {\n        /*\n            is props.gcid a number?\n         */\n        if(isNaN(this.props.gcid)){\n            this.setState({\n                error: groupChatErrorCode.nan,\n                loaded: true\n            });\n        }else{\n\n            const chatExists = () => {\n\n                const gcid = parseInt(this.props.gcid);\n\n                this.loadGroupChatInfo(gcid)\n                    .then(r => {\n                        if (r === groupChatErrorCode.none) {\n\n                            this.selectGroupChat(gcid);\n                            this.setState({\n                                loaded: true,\n                                error: groupChatErrorCode.none,\n                                gcid: gcid\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\n                                ihcData: {\n                                    name: chatSocket.chats.group.get(gcid).chatName,\n                                    gcid: gcid\n                                }\n                            }).then();\n                        } else {\n                            this.setState({\n                                loaded: true,\n                                error: r\n                            });\n                        }\n                    })\n                    .catch();\n            };\n\n            if (chatSocket.finishedLoading) {\n                chatExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    chatExists();\n                });\n            }\n        }\n    };\n    /*\n        groupChat is selected\n     */\n    selectGroupChat(gcid){\n        /*\n            does the chat exist?\n         */\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\n\n            this.setState({\n                error: groupChatErrorCode.chatNotExisting\n            })\n        } else {\n\n            const chat = chatSocket.chats.group.get(gcid)\n            this.dispatch.selectChat(chat);\n        }\n    }\n\n    componentDidMount() {\n        this.chatChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did gcid change?\n         */\n        if(prevProps.gcid !== this.props.gcid){\n            this.chatChanged();\n\n        }\n    }\n\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if (this.state.error === groupChatErrorCode.nan) {\n                return (\n                    <AddressNotValid/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if (this.state.loaded) {\n\n                switch(this.state.error){\n\n                    case groupChatErrorCode.none:\n\n                        switch(this.props.tab){\n                            case(groupChatTabs.chat):\n                                return (\n                                    <ChatContainer\n                                        chatType={this.global.currentChat.type}\n                                        chatId={this.global.currentChat.id}\n                                    />\n                                );\n\n                            case(groupChatTabs.info):\n                                return(\n                                    <ModalRouterGroupChatInfo\n                                        gcid={this.state.gcid}\n                                        data={this.state.chatData}\n                                    />\n                                );\n\n                            default:\n                                return null;\n                        }\n\n                    case groupChatErrorCode.notPartOfChat:\n                        return (\n                            <NoMemberInPublicChat/>\n                        );\n\n                    case groupChatErrorCode.private:\n                        return (\n                            <NoAuthorization/>\n                        );\n\n                    case groupChatErrorCode.chatNotExisting:\n                        return (\n                            <ChatNotExisting/>\n                        );\n\n                    case groupChatErrorCode.general:\n                        return(\n                            <GeneralError/>\n                        );\n\n                    default:\n                        return null;\n                }\n            }\n        };\n\n        return (\n            <div className=\"h-100\">\n                {renderLoader()}\n                {renderChat()}\n            </div>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nclass UserItem extends Component{\n\n    elementClicked = event => {\n\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\n    };\n\n    render() {\n        return(\n            <li>\n                <Link to={\"/chat/user/\" + this.props.uid}\n                      onClick={this.elementClicked}\n                      replace={true}\n                >\n                {this.props.username}\n                </Link>\n            </li>\n        )\n    }\n}\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport UserItem from \"./UserItem\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './selectChat.scss';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n/*\n    props:\n        showSearchBar: boolean\n            if false: searchValue comes as prop\n        searchValue\n        loadChats: function(searchValue,numAlreadyLoaded)\n */\nexport default class SelectChat extends Component{\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            showOptions: false,\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            /*\n                are there items left?\n             */\n            hasMore: true\n        };\n    }\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = (searchValue) => {\n\n        this.setState({\n            searchValue: searchValue,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more chats are loaded\n     */\n    loadChats = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const response = await this.props.loadChats(\n                    searchValue,\n                    length\n                );\n\n                if (response.ok) {\n                    //return json\n                    let data = await response.json();\n\n                    if (data.length === 0) {\n                        this.setState({\n                            hasMore: false\n                        })\n                    } else {\n                        this.setState(state => ({\n                            searchResult: state.searchResult.concat(data)\n                        }));\n                    }\n                    this.setState({\n                        error: errorCode.none\n                    });\n                } else {\n                    this.setState({\n                        error: errorCode.error\n                    });\n                }\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            is searchBar is not shown,\n                it is checked if searchValue has changed\n         */\n        if(!this.props.showSearchBar){\n            if(this.props.searchValue !== prevProps.searchValue){\n                this.searchChanged(this.props.searchValue);\n            }\n        }\n    }\n\n    render() {\n\n        if(this.state.error === errorCode.error){\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\" key={0}>\n                    Ein Fehler ist aufgetreten!\n                </div>\n            )\n        }\n            return (\n                <Dummy>\n                    {/*\n                        if showSearchBar is true, it gets shown\n                         */\n                        this.props.showSearchBar ?\n                            <div className=\"user-top\">\n                                <div className=\"searchUser\">\n                                    <input type=\"text\"\n                                           name=\"newChat-searchUser\"\n                                           className=\"form-control\"\n                                           placeholder=\"Benutzer suchen\"\n                                           onChange={(event) => {\n                                               this.searchChanged()\n                                           }}\n                                    />\n                                </div>\n                            </div>\n                            : null\n                    }\n                    <div\n                        className=\"selectChat\"\n                        ref={ref => this.scrollParentRef = ref}\n                    >\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={this.loadChats}\n                            hasMore={this.state.hasMore}\n                            loader={\n                                <div className=\"loader\" key={-1}>\n                                    <div\n                                        className=\"spinner-border text-secondary\"\n                                        role=\"status\"\n                                    >\n                                        <span className=\"sr-only\">\n                                            Loading...\n                                        </span>\n                                    </div>\n                                </div>\n                            }\n                            useWindow={false}\n                            getScrollParent={() => this.scrollParentRef}\n                            >\n                            <ul\n                                className=\"selectChat\">\n                                {this.state.searchResult.map((item, index) => (\n                                    <UserItem\n                                        key={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        hide={this.props.hide}\n                                    />\n                                ))}\n                                {this.state.searchResult.length === 0 ?\n                                    <div key={-1} className=\"nothingFound\">\n                                        Nichts gefunden!\n                                    </div>\n                                    :\n                                    null\n                                }\n                            </ul>\n                        </InfiniteScroll>\n                    </div>\n                </Dummy>\n            );\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport async function requestUsersNoChat(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    /*\n        response is returned\n     */\n    return await makeRequest('/user/noChat', config);\n}\nexport async function createGroupChat(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return await makeRequest('/group/', config);\n}\nexport async function fetchUsers(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest('/user/', config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}","import React,{Component} from \"react\";\nimport {tabs} from \"../NewChat\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport SelectChat from \"../../selectChat/SelectChat\";\nimport Dropdown from 'rc-dropdown';\n\nimport 'rc-dropdown/assets/index.css';\n\nimport './chooseUser.scss';\nimport {requestUsersNoChat} from \"../apiCalls\";\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class ChooseUser extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            /*\n                the value of the search input\n             */\n            searchValue: ''\n        };\n    }\n    /*\n        when new group gets clicked\n     */\n    newGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.newGroup);\n    };\n    /*\n        when join group is clicked\n     */\n    joinGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.chooseGroup);\n    };\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = event => {\n        const searchValue = event.target.value;\n\n        const searchValid = true;\n\n        this.setState({\n            searchValue: searchValue,\n            searchValid: searchValid\n        });\n    };\n\n    loadChats = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        /*\n            response is returned\n         */\n        return await requestUsersNoChat({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        });\n    };\n\n    render() {\n\n        const options = (\n            <div className=\"options\">\n                <ul>\n                    <li onClick={this.newGroupClick}>\n                        neue Gruppe\n                    </li>\n                    <li onClick={this.joinGroupClick}>\n                        einer Gruppe beitreten\n                    </li>\n                </ul>\n            </div>\n        );\n\n        return(\n            <Dummy>\n                <div className=\"user-top\">\n                    <div className=\"searchUser\">\n                        <input type=\"text\"\n                               name=\"newChat-searchUser\"\n                               className=\"form-control\"\n                               placeholder=\"Benutzer suchen\"\n                               onChange={this.searchChanged}\n                        />\n                    </div>\n                    <div className=\"user-more\">\n                        <Dropdown\n                            trigger={['click']}\n                            overlay={options}\n                            animation=\"slide-up\"\n                            alignPoint\n                        >\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\n                               role=\"button\"\n                            />\n                        </Dropdown>\n                    </div>\n                </div>\n                <SelectChat\n                    showSearchBar={false}\n                    searchValue={this.state.searchValue}\n                    loadChats={this.loadChats}\n                />\n            </Dummy>\n        );\n    }\n}","import React,{Component} from \"react\";\n\nimport './groupInfoForm.scss';\nimport placeholder from '../../../img/placeholder.png';\n\nexport default class GroupInfoForm extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            groupName: '',\n            description: '',\n            isPublic: false\n        }\n    }\n\n    groupNameChanged = event => {\n        this.setState({\n            groupName: event.target.value\n        })\n    };\n\n    descriptionChanged = event => {\n        this.setState({\n            description: event.target.value\n        })\n    };\n\n    isPublicChanged = () => {\n        this.setState(state => ({\n           isPublic: !state.isPublic\n        }));\n    };\n\n    formSubmitted = event => {\n\n        event.preventDefault();\n\n        if(this.state.groupName !== '')\n            this.props.submitGroup({\n                name: this.state.groupName,\n                description: this.state.description,\n                isPublic: this.state.isPublic\n            });\n    };\n\n    render() {\n\n        return(\n            <div className=\"groupInfoForm\">\n                <form onSubmit={this.formSubmitted}>\n                    <img\n                        style={{\n                            display: 'none'\n                        }}\n                        id=\"groupImgInput1\"\n                        src={placeholder}\n                        alt=\"Placeholder\"\n                    />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleFormControlInput1\">\n                            Gruppenname\n                        </label>\n                        <input type=\"text\"\n                               name=\"groupName\"\n                               className=\"form-control\"\n                               id=\"input-groupName\"\n                               placeholder=\"Gruppenname\"\n                               value={this.state.name}\n                               onChange={this.groupNameChanged}\n                               minLength={1}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label\n                            htmlFor=\"description1\"\n                        >\n                            Beschreibung\n                        </label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"description1\"\n                            rows=\"3\"\n                            value={this.state.description}\n                            onChange={this.descriptionChanged}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"check-container\">\n                            öffentlicher chat\n                            <input\n                                type=\"checkbox\"\n                                checked={this.state.isPublic}\n                                onChange={this.isPublicChanged}\n                            />\n                            <span className=\"checkmark\">\n                                <i className=\"fas fa-check\" />\n                            </span>\n                        </label>\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            type=\"submit\"\n                            className=\"float-right btn btn-primary m-3\"\n                        >\n                            Gruppe erstellen\n                        </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport GroupInfoForm from \"./GroupInfoForm\";\nimport {createGroupChat, fetchUsers} from \"../apiCalls\";\n\nconst tabs = {\n    selectUsers: 0,\n    enterChatInfo: 1\n};\n\nclass NewGroup extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.selectUsers,\n            selectedUsers: []\n        }\n    }\n\n    showEnterChatInfo = selectedUsers => {\n\n        this.setState({\n            currentTab: tabs.enterChatInfo,\n            selectedUsers: selectedUsers\n        });\n    };\n\n    submitGroup = data => {\n\n        const users = new Array(this.state.selectedUsers.length);\n        for(let i=0;i<this.state.selectedUsers.length;i++){\n            users[i] = {\n                uid: this.state.selectedUsers[i].uid,\n                username: this.state.selectedUsers[i].username,\n                isAdmin: false\n            };\n        }\n\n        this.createGroupChat(data,users).then(r => {});\n    };\n\n    createGroupChat = async (data,users) => {\n        try {\n            const response = await createGroupChat({\n                data: data,\n                users: users\n            });\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok)\n                this.props.history.goBack();\n\n        }catch(error){\n\n        }\n    };\n\n    loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n        /*\n            response is returned\n         */\n        return await fetchUsers({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        })\n    };\n\n    render() {\n\n        switch(this.state.currentTab){\n\n            case tabs.selectUsers:\n                return (\n                    <SelectUsers\n                        onNext={this.showEnterChatInfo}\n                        loadUsers={this.loadUsers}\n                    />\n                );\n\n            case tabs.enterChatInfo:\n                return(\n                    <GroupInfoForm\n                        submitGroup={this.submitGroup}\n                    />\n                );\n\n            default:\n                return null;\n        }\n    }\n}\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\nimport ChooseUser from \"./chooseUser/ChooseUser\";\nimport NewGroup from \"./newGroup/NewGroup\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\n\nimport './newChat.scss';\n\nexport const tabs = {\n    chooseUser: 0,\n    newGroup: 1,\n    chooseGroup: 2\n};\n\nexport default class NewChat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.chooseUser\n        }\n    }\n\n    setCurrentTab = newTab => {\n        this.setState({\n            currentTab: newTab\n        });\n    };\n\n    render() {\n\n        const router = () => {\n\n            switch (this.state.currentTab) {\n\n                case tabs.chooseUser:{\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n\n                }\n\n                case tabs.newGroup:{\n                    return(\n                        <NewGroup />\n                    );\n                }\n\n                case tabs.chooseGroup:{\n                    return(\n                        <div>\n                            <h4>chooseGroup</h4>\n                        </div>\n                    );\n                }\n\n\n                default: {\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n                }\n            }\n        };\n\n        const getHeader = () => {\n\n            switch(this.state.currentTab){\n\n                case tabs.chooseUser:\n                    return 'Neuer Chat';\n\n                case tabs.newGroup:\n                    return 'Neue Gruppe';\n\n                case tabs.chooseGroup:\n                    return 'Gruppe auswählen';\n\n                default:\n                    return 'Neuer Chat';\n\n            }\n        };\n\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>{getHeader()}</h1>\n                </ModalHeader>\n                <ModalMain>\n                    <div className=\"newChat\">\n                        {router()}\n                    </div>\n                </ModalMain>\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport const fetchUserInfo = async (uid) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await makeRequest('/user/' + uid, config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching UserInfo\");\n    }\n}","import React, {Component} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {fetchUserInfo} from \"./userInfoApiCalls\";\n\nexport const errorCode = {\n    none: 0,\n    isSelf: 1,\n    //not a number\n    nan: 2,\n    notExisting: 3,\n    blocked: 4,\n    defaultError: 5\n};\n\nexport default class UserInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: errorCode.none,\n            userInfo: null\n        }\n    }\n\n    render() {\n        if(!this.state.loaded){\n            return null;\n\n        }else if(this.state.error === errorCode.isSelf){\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            Du\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        xx\n                    </ModalMain>\n                </Dummy>\n            )\n        }else if(!this.state.error.none){\n            return(\n                <div>Error!</div>\n            )\n        }else{\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            {this.state.userInfo.username}\n                            &nbsp;\n                            <Link to={\"/chat/user/\" + this.state.uid}>\n                                <i className=\"far fa-comment-alt\" />\n                            </Link>\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        <h2>Gruppen</h2>\n                    </ModalMain>\n                </Dummy>\n            )\n        }\n    }\n\n    setUser = async() => {\n\n        if(isNaN(this.props.uid)){\n            this.setState({\n                error: errorCode.nan\n            });\n        }else{\n            const uid = parseInt(this.props.uid);\n            this.setState({\n                uid: uid,\n                error: errorCode.none,\n                loaded: false\n            });\n            try {\n                const data = await fetchUserInfo(uid)\n\n                if (data.uidSelf === uid) {\n                    this.setState({\n                        error: errorCode.isSelf,\n                        loaded: true\n                    });\n                }else if(!data.userExists){\n                    this.setState({\n                        error: errorCode.notExisting,\n                        loaded: true\n                    });\n                }else if(data.blocked){\n                    this.setState({\n                        error: errorCode.blocked,\n                        loaded: true\n                    });\n                }else {\n                    this.setState({\n                        userInfo: data,\n                        loaded: true\n                    });\n                }\n            }catch(err){\n                this.setState({\n                    error: errorCode.defaultError,\n                    loaded: true\n                });\n            }\n        }\n    };\n\n    async componentDidMount() {\n        try {\n            await this.setUser();\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        try{\n            /*\n                check if uid changed\n             */\n            if(prevProps.uid !== this.props.uid){\n                await this.setUser();\n            }\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n}","import React,{Component} from \"react\";\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./Settings.scss\";\n\nexport default class Settings extends Component{\n    render() {\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>Einstellungen</h1>\n                </ModalHeader>\n                <ModalMain>\n                    <div className={\"settings\"}>\n                        to be implemented\n                        <div className={\"about\"}>\n                            <Link to={\"/about\"}>über diese Seite</Link>\n                        </div>\n                    </div>\n                </ModalMain>\n            </Dummy>\n        )\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport Modal from \"../utilComp/Modal\";\nimport NewChat from \"./newChat/NewChat\";\nimport Dummy from \"../utilComp/Dummy\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterBigScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                {props.children}\n                <Modal>\n                    <NewChat />\n                </Modal>\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <Dummy>\n                        {props.children}\n                        <Modal>\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\n                        </Modal>\n                    </Dummy>\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                {props.children}\n                <Modal>\n                    <Settings/>\n                </Modal>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\n\nexport default function GridBigScreens(props){\n\n    const { path } = useRouteMatch();\n\n    return(\n        <div className=\"main-container\">\n            <div className=\"mc-left\">\n\n                <ChatList />\n            </div>\n            <div className=\"mc-right\">\n\n                <Switch>\n                    <Route path={`${path}/user/:uid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/group/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/groupInfo/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.info}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={path}>\n                        <ModalRouterBigScreens>\n                            <h1>noch kein chat ausgewählt</h1>\n                        </ModalRouterBigScreens>\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    )\n}\n","import React,{Component} from \"react\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nimport './typeMessageContainer.scss';\n\nexport default class TypeMsgContainer extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersTyping: []\n        };\n    }\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        this.setState({\n            usersTyping: chat.getUsersTyping()\n        });\n    };\n\n    render() {\n\n        return(\n            <div className=\"typeMsg-container\">\n                {this.state.usersTyping.map((user,index) => (\n                    <div key={index} className=\"typeMsg\">\n                        {user.username + \" schreibt...\"}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn ja, werden events neu initialisiert\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n        }\n    }\n\n    componentWillUnmount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport NewChat from \"./newChat/NewChat\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                <NewChat />\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                <Settings/>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React,{useGlobal} from \"reactn\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\n\nexport default function RouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n    const [global,setGlobal] = useGlobal();\n\n    const renderTypeMsgContainer = () => {\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\n            return(\n                <TypeMsgContainer\n                    chatType={global.currentChat.type}\n                    chatId={global.currentChat.id}\n                />\n            )\n        }\n        return null;\n    };\n\n    return(\n        <div className=\"main-container\">\n            <Switch>\n                <Route path={`${path}/user/:uid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <NormalChatView\n                                uid={routeProps.match.params.uid}\n                            />\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                }>\n                </Route>\n                <Route path={`${path}/group/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.chat}\n                            />\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={`${path}/groupInfo/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.info}\n                            />\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={path}>\n                    <ModalRouterSmallScreens>\n                        <div className=\"chat-list-outer-small\">\n                            <ChatList/>\n                        </div>\n                    </ModalRouterSmallScreens>\n                </Route>\n                <Route path = \"*\">\n                    <h3>Not found!</h3>\n                </Route>\n            </Switch>\n        </div>\n    )\n\n}","import React,{Component} from \"react\";\nimport Header from \"./Header/Header\";\nimport Responsive from \"../responsive/Responsive\";\nimport GridBigScreens from \"./GridBigScreens\";\nimport RouterSmallScreens from \"./RouterSmallScreens\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nimport './Grid.scss';\n\nexport default class Chat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                which modal is currently open\n                    0: none\n             */\n            modal: 0,\n            /*\n                info about the currently open modal\n             */\n            modalInfo: null,\n            /*\n                is shown at the user-icon\n             */\n            notifications: 0\n        };\n    }\n\n    componentDidMount() {\n        /*\n            if chatsocket is undefined, it gets initialized\n         */\n        if (!chatSocket.initCalled) {\n            chatSocket.init().then(r => {});\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"h-100\">\n\n                <Header/>\n\n                <Responsive displayIn={[\"Mobile\"]}>\n\n                    <RouterSmallScreens />\n                </Responsive>\n\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n\n                    <GridBigScreens/>\n                </Responsive>\n\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nimport \"./About.scss\";\n\nexport default function About(){\n    return(\n        <div className={\"about\"}>\n            <h2>Über diese Seite</h2>\n            <h4>Erstellt von:</h4>\n            Stefan Schlaghuber<br/>\n            2002 Großmugl<br/>\n            stefan.schlaghuber@gmail.com<br/>\n        </div>\n    )\n}","import {makeRequest} from \"./requests\";\n\nexport async function reqUserSelf(tokens){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest(\n        '/user/self',\n        config,\n        tokens\n    );\n}","import {addReducer} from 'reactn';\nimport {fetchData} from \"./globalData\";\nimport {resetChatSocket} from \"../chatData/chatSocket\";\nimport {reqUserSelf} from \"./apiCalls\";\n\nexport function authTokens(){\n\n    addReducer('deleteAuthTokens',(global,dispatch) => {\n\n        localStorage.removeItem(\"authTokens\");\n        /*\n            TODO: without reload\n         */\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        dispatch.deleteUserSelf();\n        dispatch.resetGlobal();\n        resetChatSocket();\n\n        return {\n            loaded: true,\n            authTokens: undefined\n        };\n    });\n\n    addReducer('initAuthTokens',async(global,dispatch,existingTokens) => {\n\n        try {\n            /*\n                util data is fetched from the server\n             */\n            await fetchData();\n\n            const response = await reqUserSelf(existingTokens);\n            /*\n                not authenticated\n                    --> token is deleted\n                    --> login page\n             */\n            if (response.status === 403) {\n                localStorage.removeItem(\"authTokens\");\n                return {\n                    loaded: true,\n                    authTokens: undefined\n                };\n            }\n            /*\n                userSelf is updated\n             */\n            else {\n                const data = await response.json();\n\n                const {uid, username} = data;\n                dispatch.setUserSelf(uid, username);\n\n                return ({\n                    loaded: true,\n                    authTokens: existingTokens\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            return({\n                loaded: false\n            })\n        }\n    });\n\n    addReducer('setAuthTokens',(global,dispatch,tokens) => {\n\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n\n        return({\n            loaded: true,\n            authTokens: tokens\n        });\n    });\n}","import React, {useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport PrivateRoute from \"./utilComp/PrivateRoute\";\nimport Chat from \"./Home/Home\";\nimport About from \"./About/About\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\n\ninitGlobal();\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"authTokens\"));\n        dispatch.initAuthTokens(existingTokens);\n    },[]);\n\n    return (\n        <Router>\n            <Switch>\n                <PrivateRoute path=\"/chat\" component={Chat}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/register\" component={Register}/>\n                <Route path={\"/about\"}>\n                    <About/>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to={\"/chat\"}/>\n                </Route>\n                <Route path=\"*\">\n                    <NoMatch/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\nimport {initChats} from \"./initChats\";\nimport {initChatReducers} from \"./chats\";\nimport {authTokens} from \"./authTokens\";\n\nexport function initGlobal(){\n\n    setGlobal({\n        /*\n            is the page ready to be shown?\n         */\n        loaded: false,\n        /*\n            the authentication token\n         */\n        authTokens: undefined,\n        /*\n            info about the user self\n         */\n        userSelf: {},\n        /*\n            what info should be shown at the left center of the header?\n         */\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        /*\n            the chat that is currently selected\n         */\n        currentChat: {\n            type: '',\n            id: 0,\n            /*\n                unread messages inside the currentChat\n             */\n            newMessages: 0,\n            /*\n                the messages in the currentChat, displayed in chatContainer\n             */\n            messages: []\n        },\n        /*\n            the shown tempChat\n         */\n        tempChat: null,\n        /*\n            all chats of the user are stored here\n         */\n        chats: [],\n        /*\n            number of chats with new messages\n         */\n        newMessages: 0\n        /*\n            TODO: notifications\n         */\n    });\n\n    initChats();\n\n    /*\n        the userSelf gets set\n     */\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\n\n        return {\n            userSelf: {\n                uid: uid,\n                username: username\n            }\n        }\n    });\n    /*\n        userSelf is deleted\n     */\n    addReducer('deleteUserSelf',(global,dispatch) => {\n\n       return {\n           userSelf: {}\n       }\n    });\n    /*\n        // eslint-disable-next-line no-unused-vars\n        global gets reseted\n     */\n    addReducer('resetGlobal',(global,dispatch) => ({\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        currentChat: {\n            type: '',\n            id: 0,\n            newMessages: 0,\n            messages: []\n        },\n        tempChat: null,\n        chats: [],\n        newMessages: 0\n    }));\n    /*\n        chat reducers are initialized\n     */\n    initChatReducers();\n    /*\n        authTokens reducers are initialized\n     */\n    authTokens();\n}","import chatSocket from \"../chatData/chatSocket\";\nimport {setGlobal} from \"reactn\";\n\nexport function initChats(){\n\n    function chatsLoaded(chats){\n        setGlobal({\n            chats: chats\n        });\n    }\n    /*\n       chats get initialized\n       is loading of chats already finished?\n           --> chatArray gets requested immediately\n    */\n    if(chatSocket.finishedLoading){\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\n        /*\n            otherwise --> event handler that gets triggered when loading finished\n         */\n    }else{\n        chatSocket.event.on('chats loaded',chatsLoaded);\n    }\n}","import {addReducer} from \"reactn\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nexport function initChatReducers(){\n\n    /*\n        is the chat the current chat?\n     */\n    function isSelected(global,chat){\n\n        const currentChat = global.currentChat;\n        return currentChat.type === chat.type\n            && currentChat.id === chat.id;\n    }\n    /*\n        index of the chat is searched\n     */\n    function findIndex(global,chat){\n\n        return global.chats.findIndex(\n            element => (\n                element.id === chat.id\n                && element.type === chat.type)\n        );\n    }\n    /*\n        is called when there is a new message\n     */\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1){\n            /*\n                is the chat selected?\n             */\n            if(isSelected(global,chat)) {\n                /*\n                    chat is selected\n                        latestMessageObject is updated\n                        newMessage counter is set to 0\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                chatObject.unreadMessages = 0;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n                /*\n                    message is added to messages in currentChat\n                 */\n                const currentChat = {\n                    ...global.currentChat,\n                    messages: global.currentChat.messages.concat(message),\n                    newMessages: global.currentChat.newMessages + 1\n                };\n                return {\n                    chats: chatsClone,\n                    currentChat: currentChat\n                };\n            }else{\n                /*\n                    chat is not selected\n                        latestMessageObject is updated\n                        newMessage counter gets incremented\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                /*\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\n                 */\n                let newMessages = global.newMessages;\n                if(chatObject.unreadMessages === 0){\n                    newMessages++;\n                }\n\n                chatObject.unreadMessages = unreadMessages + 1;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n\n                return {\n                    chats: chatsClone,\n                    newMessages: newMessages\n                };\n            }\n        }\n    });\n    /*\n        gets called out of changeCurrentChat in chatSocket\n     */\n    addReducer('selectChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1) {\n            /*\n                chats is cloned\n             */\n            const chatsClone = global.chats.splice(0);\n            const item = chatsClone[index];\n            /*\n                if there where unread messages, newMessages counter is decremented by 1\n             */\n            let newMessages = global.newMessages;\n            if(item.unreadMessages > 0){\n                newMessages--;\n            }\n            /*\n                unreadMessages is set to 0\n             */\n            item.unreadMessages = 0;\n            chatsClone[index] = item;\n            /*\n                change is emitted to server\n             */\n            chatSocket.socket.emit('change chat', {\n                type: chat.type,\n                id: chat.id\n            });\n\n            return {\n                currentChat: {\n                    type: chat.type,\n                    id: chat.id,\n                    messages: chat.getMessages(),\n                    newMessages: 0\n                },\n                chats: chatsClone,\n                tempChat: null,\n                newMessages: newMessages\n            }\n        }\n    });\n    /*\n        is called when no chat should be selected\n     */\n    addReducer('selectNoChat',(global,dispatch) => {\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            currentChat: {\n                type: '',\n                id: 0,\n                messages: []\n            },\n        }\n    });\n    /*\n        loaded messages are added\n     */\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\n\n        return {\n            currentChat: {\n                ...global.currentChat,\n                messages: messages ?\n                    messages.concat(global.currentChat.messages)\n                    : global.currentChat.messages\n            }\n        };\n    });\n    /*\n        new chat is added\n     */\n    addReducer('addChat',(global,dispatch,chat) => {\n\n        function isDateBefore(chat1,chat2){\n            /*\n                do latestMessages exist?\n             */\n            if(!chat1.latestMessage)\n                return true;\n            else if(!chat2.latestMessage)\n                return false;\n            else\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\n        }\n        /*\n            place the chat at the right position\n            chats is cloned\n         */\n        const chatsClone = global.chats.splice(0);\n        const chatObject = chat.getChatObject();\n\n        if(chatsClone.length === 0)\n            return {\n                chats: [chatObject]\n            };\n\n        for (let i = 0; i < chatsClone.length; i++) {\n            if (isDateBefore(chatsClone[i], chatObject)) {\n                chatsClone.splice(i, 0, chatObject);\n                break;\n            }\n        }\n\n        return {\n            chats: chatsClone\n        }\n\n    });\n    /*\n        chat is removed\n     */\n    addReducer('removeChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            chats is cloned\n         */\n        const chatsClone = this.state.chats.splice(0);\n        /*\n            item is deleted from array\n         */\n        chatsClone.splice(index,1);\n\n        return {\n            chats: chatsClone\n        }\n    });\n    /*\n        tempChat is shown\n     */\n    addReducer('showTempChat',(global,dispatch) => {\n\n        const chat = chatSocket.temporaryChat.chatNow;\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            tempChat: chat.getChatObject(),\n            currentChat: {\n                type: 'tempChat',\n                id: 0,\n                messages: []\n            }\n        }\n    });\n    /*\n        tempChat is updated\n     */\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\n        tempChat: chat.getChatObject(),\n        currentChat: {\n            type: 'tempChat',\n            id: 0,\n            messages: []\n        }\n    }));\n    /*\n        tempChat is hidden\n     */\n    addReducer('hideTempChat',(global,dispatch) => ({\n        tempChat: null\n    }));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}