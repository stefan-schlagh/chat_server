{"version":3,"sources":["Auth/MsgBox.js","Auth/TogglePassword.js","Auth/apiCalls.js","Auth/Login.js","Auth/BackToLogin.js","Auth/Register.js","Auth/VerifyEmail.js","Auth/ForgotPassword.js","utilComp/PrivateRoute.js","responsive/utilResponsive.js","responsive/Responsive.js","utilComp/Dummy.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","util/Color.js","util/BinSearch.js","global/requests.js","chatData/apiCalls.js","chatData/User.js","global/globalData.js","Home/chatView/chatContainer/message/NormalMessage.js","Home/chatView/chatContainer/message/StatusMessage.js","Home/chatView/chatContainer/message/Message.js","chatData/message/statusMessage.js","chatData/message/message.js","util/Event.js","chatData/chat/chat.js","chatData/chat/normalChat.js","chatData/chat/groupChat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/apiCalls.js","Home/chatView/chatContainer/MessageForm.js","Home/chatView/chatContainer/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/chatViewErrorMessages.js","Home/chatView/NormalChatView.js","utilComp/Modal.js","Home/selectUsers/UserItem.js","Home/selectUsers/UserList.js","Home/selectUsers/SelectUsers.js","Home/chatView/groupChatInfo/apiCalls.js","Home/chatView/groupChatInfo/AddUsers.js","Home/chatView/groupChatInfo/UserOptions.js","Home/chatView/groupChatInfo/ChatOptions.js","Home/chatView/groupChatInfo/edit/inlineEdit.js","Home/chatView/groupChatInfo/edit/editDescription.js","Home/chatView/groupChatInfo/edit/editChatName.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/groupChatInfo/ModalRouterGroupChatInfo.js","Home/chatView/GroupChatView.js","Home/selectChat/UserItem.js","Home/selectChat/SelectChat.js","Home/newChat/apiCalls.js","Home/newChat/chooseUser/ChooseUser.js","img/placeholder.png","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/userInfoApiCalls.js","Home/userInfo/UserInfo.js","Home/settings/apiCalls.js","util/EditableLabel.js","Home/settings/Settings.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","About/About.js","global/apiCalls.js","global/authTokens.js","Auth/ResetPassword.js","App.js","global/global.js","global/initChats.js","global/chats.js","serviceWorker.js","index.js"],"names":["ErrorMsg","className","this","props","children","Component","SuccessMsg","TogglePassword","state","showPassword","onClick","setState","type","login","username","password","a","config","method","headers","body","JSON","stringify","fetch","register","verifyEmail","verificationCode","requestPasswordResetLink","email","isVerificationCodeValid","setPassword","code","Login","changeHandler","event","nam","target","name","val","value","submitHandler","preventDefault","errorMessage","valConstraints","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","valResult","validate","replace","error","valid","uNameErr","pwErr","then","response","status","json","data","dispatch","setUserSelf","uid","setAuthTokens","tokens","history","push","catch","err","redirect","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","to","withRouter","BackToLogin","Register","passwordRepeat","equality","usernameTaken","VerifyEmail","componentDidMount","loading","success","ForgotPassword","sentMail","successMessage","PrivateRoute","component","rest","useGlobal","global","render","loaded","authTokens","pathname","referer","location","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","width","window","innerWidth","document","documentElement","clientWidth","height","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","addEventListener","removeEventListener","React","PureComponent","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","infoHeaderCenter","HeaderLeft","id","goBack","newMessages","HeaderCenter","ihcData","data-toggle","title","gcid","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","setTimeout","clickDocument","changeChecked","logout","deleteAuthTokens","checked","userSelf","BottomToolTip","text","placement","trigger","overlay","ChatSearchBox","searchChanged","onSearch","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","right","k","floor","i","getIndex","splice","getNearestKey","Array","makeRequest","tokensP","getGlobal","configI","getDispatch","Error","selectChats","createNormalChat","selectUser","loadMessages","UserErrorCode","chatSocket","users","get","normalChat","user","temporaryChat","createNew","doesExist","ok","userExists","blocked","User","_normalChat","_groupChats","color","groupChats","add","remove","_uid","_username","_color","globalData","fetchData","NormalMessage","msg","bySelf","userTop","UsernameSpan","content","mDateString","StatusMessage","StatusMsgContent","getStatusMessageString","Message","messageTypes","normalMessage","statusMessage","middleStringD","statusMessagesD","useReact","passiveUsers","statusMessageTypes","chatCreated","renderStringD","usersAdded","usersRemoved","usersJoined","usersLeft","usersMadeAdmin","usersRemovedAdmin","getStatusMessageStringD","middle","getMiddleString","getPassiveUsers","getTString","mid","chat","date","Date","now","userTopShown","getMessageViewDateString","dateString","getDateString","getUserTop","isBySelf","isDateToday","getTimeString","isDateYesterday","msgString","substr","getMessageObject","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_date","_chat","_type","_content","EventHandler","events","Map","fn","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","messageData","empty","messages","num","reachedTopMessages","getLastMsgId","getLastMessage","chatType","chatId","lastMsgId","lMessages","showUserInfoMessage","rMessages","newMsg","unreadMessages","latestMessage","getLatestMessageObject","lm","getFirstMessage","getChatViewMsgString","getChatViewDateString","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","undefined","isShown","showTempChat","updateTempChat","hideTempChat","otherUid","otherUsername","mentions","media","newChat","ncid","chats","normal","addChat","selectChat","hide","_chatNow","ChatSocket","_userSelf","_chats","group","_finishedLoading","_temporaryChat","_initCalled","socket","removeAllListeners","disconnect","initCalled","userInfo","io","connect","secure","emit","on","initChats","getChat","isCurrentChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","initFirstMessage","firstMessage","member","addGroupChat","_socket","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","found","tempChat","map","includes","ChatViewLoader","borderWidth","role","loadGroupChat","sendMessage","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","position","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","typeMessages","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","renderDateContainer","date1","onScroll","ref","_messagesNode","TempChatContainer","show","update","AddressNotValid","CannotWriteYourself","BlockedByThisUser","UserNotExisting","NoMemberInPublicChat","NoAuthorization","ChatNotExisting","GeneralError","NormalChatView","userChanged","parseInt","getUserNormalChat","res","selectNormalChat","selectTempChat","renderLoader","isNaN","Modal","ModalHeader","ModalMain","UserItem","clicked","deselectUser","index","errorCode","lastRequest","searchResult","hasMore","loadUsers","concat","scrollParentRef","pageStart","loadMore","loader","useWindow","getScrollParent","item","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","addMembers","fetchUsersNotInGroup","leaveChat","removeSelfAdmin","AddUsers","useHistory","submitUsers","numAlreadyLoaded","search","limit","start","UserOptions","isSelfAdmin","memberSelf","isAdmin","removeMemberFromChat","makeMemberAdmin","removeMemberAdmin","isMemberSelf","ChatOptions","useLocation","console","log","Edit","handleEdit","isEditing","editPressed","class","changeCallback","optClass","DescriptionEdit","description","ChatNameEdit","GroupChatInfo","uidSelf","animation","alignPoint","ModalRouterGroupChatInfo","path","useRouteMatch","groupChatInfo","groupChatErrorCode","groupChatTabs","GroupChatView","loadGroupChatInfo","chatData","chatExists","r","selectGroupChat","tab","renderChat","elementClicked","SelectChat","loadChats","showOptions","showSearchBar","requestUsersNoChat","createGroupChat","fetchUsers","ChooseUser","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","options","GroupInfoForm","groupNameChanged","groupName","descriptionChanged","isPublicChanged","isPublic","formSubmitted","submitGroup","src","alt","minLength","rows","NewGroup","showEnterChatInfo","currentTab","chooseUser","NewChat","newTab","getHeader","router","fetchUserInfo","UserInfo","setUser","getUserSelf","setEmail","EditableLabel","startEdit","cancelEdit","submitEdit","onDoubleClick","Settings","changeEmail","userDataSelf","emailTaken","emailChangeRequested","setEmailError","setEmailErrorMessage","ModalRouterBigScreens","routeProps","match","params","uidInfo","GridBigScreens","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","modal","modalInfo","notifications","init","About","reqUserSelf","addReducer","localStorage","removeItem","deleteUserSelf","resetGlobal","destruct","existingTokens","setItem","ResetPassword","passwordResetSuccess","linkValid","App","useDispatch","useEffect","parse","getItem","initAuthTokens","exact","NoMatch","chatsLoaded","element","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initChatReducers","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.991f54ff.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\nclass ErrorMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-danger p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\nclass SuccessMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-success p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\n\nexport {ErrorMsg,SuccessMsg};","import React,{Component} from \"react\";\n\nimport \"./TogglePassword.scss\"\n\nexport default class TogglePassword extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPassword: false\n        }\n    }\n    render() {\n        return(\n            <div className=\"psw-group\">\n                <i className={(this.state.showPassword ? \"fa-eye-slash\" : \"fa-eye\") + \" fas psw-toggle-icon\"}\n                   onClick={() => this.setState(state => ({showPassword: !state.showPassword}))}\n                />\n                <input type={this.state.showPassword ? \"text\" : \"password\"}\n                       {...this.props}\n                />\n            </div>\n        )\n    }\n\n\n}","export const login = async (username,password) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: username,\n            password: password\n        })\n    };\n    return  await fetch('/auth/login', config);\n};\n\nexport const register = async(username,password) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: username,\n            password: password\n        })\n    };\n    return await fetch('/auth/register', config);\n};\n\nexport const verifyEmail = async(verificationCode) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n    return await fetch('/user/verifyEmail/' + verificationCode, config);\n};\n\nexport const requestPasswordResetLink = async (username,email) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username: username,\n            email: email\n        })\n    };\n    return await fetch('/pwReset/requestLink',config);\n}\n\nexport const isVerificationCodeValid = async(verificationCode) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n    return await fetch('/pwReset/isValid/' + verificationCode, config);\n};\n\nexport const setPassword = async (code,password) => {\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            code: code,\n            password: password\n        })\n    };\n    return await fetch('/pwReset/set',config);\n}","import React,{Component} from \"reactn\";\nimport {\n    Link,\n    withRouter\n} from \"react-router-dom\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport TogglePassword from \"./TogglePassword\";\nimport {login} from \"./apiCalls\";\n\nclass Login extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            password: '',\n            redirect: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\"){\n\n            let errorMessage;\n\n            if(typeof(valResult.username) != \"undefined\") {\n                errorMessage = valResult.username[0];\n            }else if(typeof(valResult.password) != \"undefined\") {\n                errorMessage = valResult.password[0];\n            }\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: ''\n            });\n           /*\n                request to server\n            */\n           login(this.state.username,this.state.password)\n               .then(async response => {\n                   // success\n                   if(response.status === 200){\n                       const data = await response.json();\n                       this.dispatch.setUserSelf(data.uid,this.state.username);\n                       // set auth tokens\n                       this.dispatch.setAuthTokens(data.tokens);\n                       // go to chat home\n                       this.props.history.push('/chat');\n                   // wrong password\n                   }else if(response.status === 403){\n                       this.setState({\n                           error: true,\n                           errorMessage: 'Falsches Passwort!'\n                       });\n                   // user does not exit\n                   }else if(response.status === 404){\n                       this.setState({\n                           error: true,\n                           errorMessage: 'Falscher Benutzername E-Mail Addresse'\n                       });\n                   }else {\n                       this.setState({\n                           error: true,\n                           errorMessage: 'ein Fehler ist aufgetreten'\n                       });\n                   }\n               })\n               .catch(err => {\n                   this.setState({\n                       error: true,\n                       errorMessage: 'ein Fehler ist aufgetreten'\n                   });\n               });\n        }\n\n    };\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return(\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Login</h1>\n                        {this.errorMessage()}\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                <TogglePassword\n                                       name=\"password\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\n                            </div>\n                            <div className=\"form-group\">\n                                Passwort vergessen? <Link to=\"/forgotPassword\">Jetzt zurücksetzen</Link>\n                            </div>\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Login\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Login);","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./BackToLogin.scss\";\n\nexport default function BackToLogin(){\n    return(\n        <h5 className={\"back-to-login\"}>\n            <Link to={\"/login\"}>\n                <i className=\"fas fa-arrow-left\"/>\n                &nbsp;\n                zurück zu login\n            </Link>\n        </h5>\n    )\n}","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport {withRouter} from \"react-router-dom\";\nimport TogglePassword from \"./TogglePassword\";\nimport {register} from \"./apiCalls\";\nimport BackToLogin from \"./BackToLogin\";\n\nclass Register extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            password: '',\n            passwordRepeat: '',\n            redirect: false\n        }\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password,\n            passwordRepeat: this.state.passwordRepeat\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\"){\n\n            let errorMessage;\n\n            if(typeof(valResult.username) != \"undefined\") {\n                errorMessage = valResult.username[0];\n            }else if(typeof(valResult.password) != \"undefined\") {\n                errorMessage = valResult.password[0];\n            }else if(typeof(valResult.passwordRepeat)!=\"undefined\") {\n                errorMessage = \"Passwörter stimmen nicht überein!\"\n            }\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n\n        }else {\n            this.setState({\n                error: false,\n                errorMessage: ''\n            });\n            /*\n                request to server\n             */\n            register(this.state.username,this.state.password)\n                .then(async response => {\n                    if(response.status === 200){\n\n                        const data = await response.json();\n                        // if username taken --> show error message\n                        if(data.usernameTaken){\n                            this.setState({\n                                error: true,\n                                errorMessage: 'Benutzername bereits vergeben'\n                            });\n                        }else{\n                            this.dispatch.setUserSelf(data.uid,this.state.username);\n                            // set auth tokens\n                            this.dispatch.setAuthTokens(data.tokens);\n                            // go to chat home\n                            this.props.history.push('/chat');\n                        }\n                    }else {\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                    }\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    };\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n\n    render(){\n\n        return (\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <BackToLogin/>\n                        <h1>Registrieren</h1>\n                        {this.errorMessage()}\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                <TogglePassword\n                                       name=\"password\"\n                                       className=\"form-control\"\n                                       placeholder=\"Passwort eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"passwordRepeat\">Passwort wiederholen:</label>\n                                <TogglePassword\n                                    name=\"passwordRepeat\"\n                                    className=\"form-control\"\n                                    placeholder=\"Passwort eingeben\"\n                                    onChange={this.changeHandler}\n                                />\n                            </div>\n                            <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Register);","import React,{Component} from \"reactn\";\nimport {verifyEmail} from \"./apiCalls\";\nimport \"./VerifyEmail.scss\";\n\nexport default class VerifyEmail extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            error: false,\n            success: false\n        }\n    }\n\n    render(){\n        if(this.state.loading){\n            return null;\n        } else if(this.state.error){\n            return(\n                <div className=\"h-100 verifyEmail error\">\n                    <h3>\n                        Fehler!\n                    </h3>\n                </div>\n            )\n        } else if(!this.state.success){\n            return(\n                <div className=\"h-100 verifyEmail\">\n                    <h3>\n                        Ungültiger Verifizierungscode!\n                    </h3>\n                </div>\n            )\n        } else{\n            return(\n                <div className=\"h-100 verifyEmail\">\n                    <h3>\n                    E-Mail Addresse erfolgreich verifiziert!\n                    </h3>\n                </div>\n            )\n        }\n    }\n\n    componentDidMount = () => {\n        verifyEmail(this.props.verificationCode)\n            .then(response => {\n                this.setState({\n                    loading: false,\n                    success: response.status === 200\n                });\n            })\n            .catch(err => {\n                this.setState({\n                    loading: false,\n                    error: true\n                });\n            });\n    }\n}","import React,{Component} from \"reactn\";\nimport {requestPasswordResetLink} from \"./apiCalls\";\nimport {ErrorMsg, SuccessMsg} from \"./MsgBox\";\nimport validate from \"validate.js\";\nimport BackToLogin from \"./BackToLogin\";\n\nexport default class ForgotPassword extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            errorMessage: '',\n            username: '',\n            email: '',\n            sentMail: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'Benutzername zu kurz',\n                    maximum: 30,\n                    tooLong: 'Benutzername zu lang'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w[\\w ]*$$/),\n                    message: 'ungültiges Format'\n                }\n            },\n            email: {\n                presence: true,\n                length: {\n                    minimum: 1,\n                    tooShort: 'E-Mail Addresse benötigt'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            username: this.state.username,\n            email: this.state.email\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\") {\n\n            let errorMessage;\n\n            if (typeof (valResult.username) != \"undefined\")\n                errorMessage = valResult.username[0];\n            else if (typeof (valResult.email) != \"undefined\")\n                errorMessage = valResult.email[0];\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Email \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n        }else {\n\n            const {username, email} = this.state;\n\n            requestPasswordResetLink(username, email)\n                .then(response => {\n                    if (response.status === 200)\n                        this.setState({\n                            error: false,\n                            sentMail: true\n                        });\n                    else if(response.status === 404)\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Dieser Benutzer scheint nicht zu existieren'\n                        })\n                    else\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    }\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n    successMessage = () => {\n        if(this.state.sentMail)\n            return (\n                <SuccessMsg>\n                    E-Mail zum zurücksetzen des Passwortes wurde versendet!\n                </SuccessMsg>\n            )\n    }\n    render() {\n        return (\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <BackToLogin/>\n                        <h1>Passwort zurücksetzen</h1>\n                        {this.errorMessage()}\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">E-Mail Addresse:</label>\n                                <input type=\"email\"\n                                       name=\"email\"\n                                       className=\"form-control\"\n                                       placeholder=\"E-Mail Addresse eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            {this.successMessage()}\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Passwort zurücksetzen\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport {useGlobal} from \"reactn\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n    const [global,setGlobal] = useGlobal();\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                global.loaded ? (\n                    global.authTokens ?\n                    (\n                        <Component {...props} />\n                    )\n                    : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    referer: props.location\n                                }\n                            }}\n                        />\n                    )\n                ) : null\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\n\nexport const DeviceWidthObject = {\n\n    MobileSmall      : { max: 320, min: 0 },\n    MobileMedium     : { max: 375, min: 321 },\n    MobileLarge      : { max: 767, min: 376 },\n\n    Tablet           : { max: 991, min: 768 },\n\n    LaptopSmall      : { max: 1024, min: 992 },\n    LaptopLarge      : { max: 1440, min: 1025 },\n\n    LargerThanLaptop : { max: 2560, min: 1441 },\n    LargeScreenMax   : { max: 999999, min: 2561 }\n\n};\n\nexport const IdDeviceBreakpointsByWidth = {\n\n    laptop_max : 1440,\n    laptop_min : 992,\n    tablet_min : 768,\n    tablet_max : 991,\n    mobile_max : 767,\n    default_min : 768 // Unrecognized device\n};\n\nexport const IdMobileHeight = {\n    mobileLandscape_min : 320,\n    mobileLandscape_max : 425\n};\n\nexport const getWindowDimension = () => {\n\n    const width = window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth;\n\n    const height = window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n\n    return {width, height}\n\n};\n\nexport const getDeviceTypeInfo = () => {\n    const { width, height } = getWindowDimension();\n    const buildDeviceDetails = {\n        deviceType: '',\n        deviceTypeVariant: '',\n        orientation: 'Portrait',\n        width,\n        height,\n        isFallback: false\n    };\n//  Edge case\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\n    if (hasEdgeCase) {\n        return hasEdgeCase\n    }\n    if (height < width) {\n        // Orientation is landscape\n        buildDeviceDetails.orientation = 'Landscape';\n\n        if (height <= IdMobileHeight.mobileLandscape_max) {\n            // Mobile (landscape)\n            buildDeviceDetails.deviceType = 'Mobile';\n            for (const devc in DeviceWidthObject) {\n                if (\n                    height <= DeviceWidthObject[devc].max &&\n                    height >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            // Tablet (landscape)\n            buildDeviceDetails.deviceType = 'Tablet';\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            // Laptop (landscape)\n            buildDeviceDetails.deviceType = 'Laptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            // Larger than Laptop (landscape)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc\n                    break\n                }\n            }\n        } else {\n\n            buildDeviceDetails.deviceType = 'Mobile';\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\n            buildDeviceDetails.isFallback = true\n        }\n\n        return buildDeviceDetails\n    } else {\n        // Orientation is portrait\n        buildDeviceDetails.orientation = 'Portrait';\n\n        for (const devc in DeviceWidthObject) {\n            if (\n                width <= DeviceWidthObject[devc].max &&\n                width >= DeviceWidthObject[devc].min\n            ) {\n                buildDeviceDetails.deviceTypeVariant = devc;\n                break\n            }\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            buildDeviceDetails.deviceType = 'Laptop'\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            buildDeviceDetails.deviceType = 'Tablet'\n        }\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\n            buildDeviceDetails.deviceType = 'Mobile'\n        }\n\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n        }\n\n        return buildDeviceDetails\n    }\n};\n\nconst handleExceptions = (buildDeviceDetails, width, height) => {\n    //  iPadPro\n    if (width === 1024 && height === 1366) {\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Portrait';\n\n        return buildDeviceDetails\n    } else if (width === 1366 && height === 1024) {\n        //  Edge case\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Landscape';\n\n        return buildDeviceDetails\n    }\n\n    return undefined\n};","import React from 'react'\nimport {\n    getWindowDimension,\n    IdDeviceBreakpointsByWidth,\n    IdMobileHeight\n} from './utilResponsive';\n\nconst { width, height } = getWindowDimension();\nconst initialState = { width, height };\n\nexport default class Responsive extends React.PureComponent {\n\n    state = initialState;\n    componentDidMount () {\n        window.addEventListener('resize', this.handleResize, false)\n    }\n    componentWillUnmount () {\n        window.removeEventListener('resize', this.handleResize, false)\n    }\n    render = () => {\n        const { children, displayIn } = this.props;\n        const { width, height } = this.state;\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\n        return (\n            <React.Fragment>\n                {shouldRenderChildren ? children : null}\n            </React.Fragment>\n        )\n    };\n    handleResize = () => {\n        const { width, height } = getWindowDimension();\n        this.setState({ width, height })\n    };\n    shouldRender = (display, width, height) => {\n        if (\n            display.indexOf('Laptop') !== -1 &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('Tablet') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\n        ) {\n            return true\n        }\n        // For mobile regardless of orientation\n        if (\n            display.indexOf('Mobile') !== -1 &&\n            width <= IdDeviceBreakpointsByWidth.mobile_max\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('MobilePortrait') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height >= IdMobileHeight.mobileLandscape_max)\n        ) {\n            return true\n        }    return !!(\n            display.indexOf('MobileLandScape') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height <= IdMobileHeight.mobileLandscape_min)\n        )\n    }\n}","import {Component} from \"react\";\n\nexport default class Dummy extends Component {\n\n    componentDidMount() {\n        if(typeof(this.props.didMount) === 'function')\n            this.props.didMount();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(typeof(this.props.didUpdate) === 'function')\n            this.props.didUpdate();\n    }\n\n    render() {\n        if(this.props.children)\n            return this.props.children;\n        return null;\n    }\n}","import React,{Component} from \"reactn\";\nimport Responsive from \"../../responsive/Responsive\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport \"./headerLeft.scss\";\n\nexport const infoHeaderCenter = {\n    none: 0,\n    normalChat: 1,\n    groupChat: 2\n};\n\nclass HeaderLeft extends Component{\n\n    render() {\n\n        const {pathname} = this.props.location;\n        /*\n            renders number of new messages\n         */\n        const renderNewMsgNumber = () => {\n            if(this.global.newMessages > 0){\n                return (\n                    <div className=\"btnBack-number\">\n                        {this.global.newMessages}\n                    </div>\n                )\n            }\n            return null;\n        };\n\n        const renderBtnBack = () => {\n            /*\n                only small screens\n             */\n            return (\n                <div className=\"float-left left\">\n                    <i id=\"btnBackToChatList\"\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\n                       onClick={() => {this.props.history.goBack()}}\n                    />\n                    {renderNewMsgNumber()}\n                </div>\n            );\n        };\n\n        const renderChatInfo = () => {\n            /*\n                if there is a normal chat open, this info gets displayed\n             */\n            switch(this.global.infoHeaderCenter){\n\n                case infoHeaderCenter.normalChat:\n                    return (\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                case infoHeaderCenter.groupChat:\n                    return(\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                default:\n                    return(\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\n                        </Responsive>\n                    );\n            }\n        };\n\n        return(\n            <Dummy>\n                <Responsive displayIn={[\"Mobile\"]}>\n                    {renderBtnBack()}\n                </Responsive>\n                {renderChatInfo()}\n            </Dummy>\n        )\n    }\n}\nexport default withRouter(HeaderLeft);\n\nfunction HeaderCenter(props){\n    return(\n        <div id=\"chat-info\" className=\"center pt-2\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"reactn\";\nimport HeaderLeft from \"./HeaderLeft\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Tooltip from \"rc-tooltip\";\n\nimport 'rc-tooltip/assets/bootstrap_white.css';\n\nimport './header.scss';\n\nclass Header extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checkBoxClicked: false\n        };\n    }\n    clickCheckBox = event => {\n        if(this.state.checkBoxClicked)\n            event.stopPropagation();\n        else {\n            setTimeout(() => {\n                this.setState(state => ({\n                    checkBoxClicked: true\n                }));\n            }, 20);\n        }\n    };\n    clickDocument = event => {\n        if (this.state.checkBoxClicked)\n            this.changeChecked(event);\n    };\n    changeChecked = event => {\n        this.setState(state => ({\n            checkBoxClicked: !state.checkBoxClicked\n        }));\n    };\n\n    logout = () => {\n        /*\n            authTokens are deleted\n         */\n        this.dispatch.deleteAuthTokens();\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"c-header\">\n\n                <HeaderLeft />\n\n                <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\n\n                    <div className=\"right-l\" />\n\n                    <input type=\"checkbox\"\n                           id=\"btnControlTopRight\"\n                           className=\"btnControl\"\n                           checked={this.state.checkBoxClicked}\n                           onChange={this.changeChecked}\n                    />\n                    <label htmlFor=\"btnControlTopRight\">\n\n                        <div className=\"right-c\">\n                            <div className=\"d-only-when-small\">\n                                <i  id=\"user-info\"\n                                    className=\"fas fa-user fa-2x user-icon\"\n                                    data-toggle=\"tooltip\"\n                                    title=\"Benutzer-Info\"\n                                />\n                            </div>\n                            <div className=\"d-only-when-big top-2right\">\n\n                                <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\n                                    <BottomToolTip text=\"Benutzer-Info\">\n                                        <h4 id=\"username\"\n                                            className=\"p-2 username\"\n                                        >\n                                                {this.global.userSelf.username}\n                                        </h4>\n                                    </BottomToolTip>\n                                </Link>\n                                <div className=\"float-right\">\n                                    <Link to={pathname + \"/settings\"}>\n                                        <BottomToolTip text=\"Einstellungen\">\n                                            <i className=\"fas fa-user-cog fa-2x\"/>\n                                        </BottomToolTip>\n                                    </Link>\n                                    &nbsp;\n                                    <BottomToolTip text=\"logout\">\n                                        <i id=\"user-logout\"\n                                           className=\"fas fa-sign-out-alt fa-2x logout\"\n                                           onClick={this.logout}\n                                        />\n                                    </BottomToolTip>\n                                </div>\n\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        document.addEventListener('click',this.clickDocument,false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click',this.clickDocument,false);\n    }\n}\n\nfunction BottomToolTip(props){\n    return(\n        <Tooltip placement=\"bottom\"\n                 trigger={['hover']}\n                 overlay={\n                     <span>{props.text}</span>\n                 }>\n            {props.children}\n        </Tooltip>\n    )\n}\nexport default withRouter(Header);","import React,{Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\n\nimport \"./chatSearchBox.scss\";\n\nclass ChatSearchBox extends Component{\n\n    searchChanged = event => {\n        this.props.onSearch(event.target.value);\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"chatSearchBox\">\n                <div className=\"chat-select-form\">\n                    <input\n                        type=\"text\"\n                        name=\"chat-search\"\n                        className=\"chat-search\"\n                        placeholder=\"Chat suchen\"\n                        onChange={this.searchChanged}\n                    />\n                    <Link to={pathname + \"/newChat\"}>\n                        <button id=\"btn-newChat\"\n                                className=\"btn-newChat\"\n                        >\n                            <i className=\"fas fa-plus fa-lg\" />\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(ChatSearchBox);","let Colors = {};\nColors.names = {\n    aqua: \"#00ffff\",\n    black: \"#000000\",\n    blue: \"#0000ff\",\n    brown: \"#a52a2a\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgrey: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    fuchsia: \"#ff00ff\",\n    gold: \"#ffd700\",\n    green: \"#008000\",\n    indigo: \"#4b0082\",\n    khaki: \"#f0e68c\",\n    lightblue: \"#add8e6\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lime: \"#00ff00\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    navy: \"#000080\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    pink: \"#ffc0cb\",\n    purple: \"#800080\",\n    violet: \"#800080\",\n    red: \"#ff0000\",\n    silver: \"#c0c0c0\"\n};\nColors.random = function() {\n    let result;\n    let count = 0;\n    for (let prop in this.names)\n        if (Math.random() < 1/++count)\n            result = prop;\n    return result;\n};\nexport default Colors;","\nexport default class BinSearchArray extends Array{\n\n    getIndex(key){\n\n        let left = 0;\n        let right = this.length-1;\n\n        while(left<=right){\n            let k= Math.floor((left+right)/2);\n            if(this[k].key === key)\n                return k;\n            else if(this[k].key < key)\n                left = k+1;\n            else //a[k]>v\n                right = k-1;\n        }\n        return -1;\n    }\n\n    getNearestKey(key){\n        /*\n            besseren Algorithmus finden\n         */\n        let i;\n        ++key;\n\n        while((i = this.getIndex(--key)) === -1){\n            /*\n                wenn key 0 ist, wird vorne eingefügt\n             */\n            if(key === 0) return -1;\n        }\n\n        return i;\n    }\n\n    get(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            return this[i].value;\n\n        return undefined;\n    }\n\n    add(key,value){\n        /*\n            key darf noch nicht vorhanden sein\n         */\n        if(this.getIndex(key) === -1) {\n\n            this.splice(this.getNearestKey(key) + 1, 0, {\n                key: key,\n                value: value\n            });\n        }\n    }\n\n    remove(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            this.splice(i,1);\n    }\n}","import {getGlobal,getDispatch} from 'reactn';\n\nexport async function makeRequest(target,config,tokensP){\n    /*\n        if parameter tokens is defined, this is taken\n        else the one from global\n     */\n    const tokens = tokensP ? tokensP : getGlobal().authTokens;\n\n    const configI = {\n        ...config,\n        method: config.method,\n        headers: {\n            ...config.headers,\n            /*\n                jwt\n             */\n            'Authorization': tokens\n        }\n    };\n\n    const response = await fetch(target,configI);\n    /*\n        http-status 401: jwt timeout\n     */\n    if(response.status === 401){\n        /*\n            autToken is deleted\n         */\n        getDispatch().deleteAuthTokens();\n        /*\n            error is thrown\n         */\n        throw new Error('jwt expired');\n    }\n    return response;\n}","import {makeRequest} from \"../global/requests\";\n\nexport async function selectChats(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    /*\n        chats are requested\n     */\n    return await makeRequest('/chats', config);\n}\nexport async function createNormalChat(body){\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/user/chat', config);\n}\nexport async function selectUser(uid){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/user/' + uid, config);\n}\nexport async function loadMessages(body){\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message/load', config);\n}","import Colors from \"../util/Color\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport chatSocket from \"./chatSocket\";\nimport {selectUser} from \"./apiCalls\";\n\nexport const UserErrorCode = {\n    none: 0,\n    nan: 1,\n    tempChat: 2,\n    userNotExisting: 3,\n    blocked: 4,\n    isSelf: 5,\n    error: 6\n};\n\nexport async function getUserNormalChat(uid){\n    /*\n        does the user exist & does normal chat exist\n     */\n    if(chatSocket.users.getIndex(uid) !== -1){\n        /*\n            does a normalChat exist at the user\n         */\n        if(chatSocket.users.get(uid).normalChat !== 0) {\n\n            return UserErrorCode.none;\n        }else{\n            /*\n                chat does not exist in server\n                it gets created\n             */\n            const user = chatSocket.users.get(uid);\n            chatSocket.temporaryChat.createNew(uid,user.username);\n\n            return UserErrorCode.tempChat;\n        }\n        /*\n            does there exist a temporary chat with this user\n        */\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\n        /*\n            user and chat does not exist in server\n         */\n        return UserErrorCode.tempChat;\n\n    }else{\n        /*\n            request user from server\n         */\n        try {\n            const response = await selectUser(uid);\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok) {\n\n                const data = await response.json();\n\n                if(data.userExists && !data.blocked) {\n\n                    chatSocket.temporaryChat.createNew(uid,data.username);\n                    return UserErrorCode.tempChat;\n\n                }else{\n\n                    if(!data.userExists)\n\n                        return UserErrorCode.userNotExisting;\n\n                    else\n\n                        return UserErrorCode.blocked;\n                }\n\n            }else\n                return UserErrorCode.error;\n\n        }catch(error){\n            return UserErrorCode.error;\n        }\n    }\n}\n\nexport default class User{\n\n    _uid;\n    _username;\n    _color;\n    //ids der chats des Users\n    _normalChat = 0;\n    //ids of the groupchats\n    _groupChats = new BinSearchArray();\n\n    constructor(uid,username) {\n        this.uid = uid;\n        this.username = username;\n        this.color = Colors.random();\n    }\n    /*\n        groupChat is added\n     */\n    addGroupChat(gcid){\n        this.groupChats.add(gcid,gcid);\n    }\n\n    removeGroupChat(gcid){\n        this.groupChats.remove(gcid);\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get username() {\n        return this._username;\n    }\n\n    set username(value) {\n        this._username = value;\n    }\n\n    get color() {\n        return this._color;\n    }\n\n    set color(value) {\n        this._color = value;\n    }\n\n    get normalChat() {\n        return this._normalChat;\n    }\n\n    set normalChat(value) {\n        this._normalChat = value;\n    }\n\n    get groupChats() {\n        return this._groupChats;\n    }\n\n    set groupChats(value) {\n        this._groupChats = value;\n    }\n}","\nexport let globalData = {};\n\n/*\n    is called in isLoggedIn in App.js\n */\nexport async function fetchData(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await fetch('/data.json', config);\n\n    if(response.ok){\n\n        globalData = await response.json();\n    }else{\n        throw new Error();\n    }\n}","import React from \"react\";\nimport {UsernameSpan} from \"./Message\";\n\nexport default function NormalMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            {msg.userTop ?\n                <div className=\"w-100\">\n                    <strong className=\"header\">\n                        <UsernameSpan user={msg.userTop}/>\n                    </strong>\n                </div>\n                : null}\n            <div className=\"content\">\n                <p>\n                    {msg.content.text}\n                </p>\n            </div>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport Dummy from \"../../../../utilComp/Dummy\";\nimport {getStatusMessageString} from \"../../../../chatData/message/statusMessage\";\n\nexport default function StatusMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            <StatusMsgContent msg={msg}/>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    );\n}\nfunction StatusMsgContent(props) {\n\n    const msg = props.msg;\n\n    return(\n        <Dummy>\n            {getStatusMessageString(msg,true)}\n        </Dummy>\n    );\n}","import React from \"react\";\nimport {globalData} from \"../../../../global/globalData\";\nimport NormalMessage from \"./NormalMessage\";\nimport StatusMessage from \"./StatusMessage\";\nimport Colors from \"../../../../util/Color\";\n\nimport './message.scss'\n\nexport default function Message(props){\n\n    const msg = props.msg;\n\n    switch (msg.type) {\n\n        case globalData.messageTypes.normalMessage: {\n\n            return (\n                <NormalMessage msg={msg}/>\n            )\n        }\n\n        case globalData.messageTypes.statusMessage: {\n\n            return (\n                <StatusMessage msg={msg}/>\n            );\n        }\n\n        default:\n            return <span />;\n    }\n}\n\nexport function UsernameSpan(props){\n\n    return(\n        <span\n            style={{\n                color: Colors.names[props.user.color]\n            }}>\n                {props.user.username}\n        </span>\n    );\n}","import {UsernameSpan} from \"../../Home/chatView/chatContainer/message/Message\";\nimport {globalData} from \"../../global/globalData\";\nimport React from \"react\";\nimport chatSocket from \"../chatSocket\";\n\nexport const middleStringD = {\n    hatHast: 0,\n    ist: 1\n};\n\nexport const statusMessagesD = [\n    \"den chat erstellt\",\n    \"hinzugefügt\",\n    \"entfernt\",\n    \"dem chat beigetreten\",\n    \"den chat verlassen\",\n    \"zum Admin gemacht\",\n    \"nicht mehr Admin\"\n];\n\nexport function getStatusMessageString(msg,useReact){\n\n    return getStatusMessageStringD();\n\n    function getStatusMessageStringD() {\n\n        const userTop = msg.userTop;\n        const passiveUsers = msg.content.passiveUsers;\n\n        switch (msg.content.type) {\n\n            case globalData.statusMessageTypes.chatCreated:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.chatCreated\n                );\n\n            case globalData.statusMessageTypes.usersAdded:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersAdded\n                );\n\n            case globalData.statusMessageTypes.usersRemoved:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersRemoved\n                );\n\n            case globalData.statusMessageTypes.usersJoined:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersJoined\n                );\n\n            case globalData.statusMessageTypes.usersLeft:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    [],\n                    globalData.statusMessageTypes.usersLeft\n                );\n\n            case globalData.statusMessageTypes.usersMadeAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersMadeAdmin\n                );\n\n            case globalData.statusMessageTypes.usersRemovedAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersRemovedAdmin\n                );\n\n            default:\n                break;\n        }\n    }\n\n    function renderStringD(userTop,middle,passiveUsers,statusMessage){\n\n        function getMiddleString(){\n\n            // eslint-disable-next-line default-case\n            switch (middle) {\n\n                case middleStringD.hatHast:\n                    return msg.bySelf ? \" hast \" : \" hat \";\n\n                case middleStringD.ist:\n                    return ' ist';\n            }\n        }\n\n        function getPassiveUsers(){\n\n            if(passiveUsers.length < 1 ){\n                return \"\";\n            }else if(passiveUsers.length === 1){\n\n                const user = chatSocket.users.get(passiveUsers[0]);\n\n                if(user)\n                    if(useReact)\n                        return(\n                            <UsernameSpan user={user}/>\n                        );\n                    else\n                        return user.username;\n                else\n                    return \"1 Benutzer\";\n\n            }else{\n                return passiveUsers.length + \" Benutzer\";\n            }\n        }\n\n        function getTString(){\n            return \" \" + statusMessagesD[statusMessage];\n        }\n\n        if(useReact)\n            return(\n                <span>\n                    <UsernameSpan user={msg.userTop}/>\n                    {getMiddleString()}\n                    {getPassiveUsers()}\n                    {getTString()}\n                </span>\n            );\n        else\n            return msg.userTop.username + getMiddleString() + getPassiveUsers() + getTString();\n    }\n\n}","import chatSocket from \"../chatSocket\";\nimport {globalData} from \"../../global/globalData\";\nimport {getStatusMessageString} from \"./statusMessage\";\n\nexport function isDifferentDay(date1,date2){\n    return date1.getDay() !== date2.getDay()\n        || date1.getMonth() !== date2.getMonth()\n        || date1.getFullYear() !== date2.getFullYear();\n}\n\nexport default class Message {\n\n    _mid;\n    _uid;\n    _date;\n    _chat;\n    _type;\n    _content;\n\n    constructor(\n        mid,\n        uid,\n        chat,\n        date = new Date(Date.now()),\n        type,\n        content\n    ) {\n        this.mid = mid;\n        this.uid = uid;\n        this.date = date;\n        //type: object of Chat\n        this.chat = chat;\n        this.type = type;\n        this.content = content;\n    }\n    /*\n        a object representing the message is returned\n     */\n    getMessageObject(userTopShown){\n\n        const message = {\n            mDateString: this.getMessageViewDateString(),\n            dateString: this.getDateString(),\n            date: this.date,\n            bySelf: this.uid === chatSocket.userSelf.uid,\n            type: this.type,\n            content: this.content\n        };\n        /*\n            if the user top should be shown, the property is added\n         */\n        if(userTopShown)\n            message.userTop = this.getUserTop();\n\n        return message;\n    }\n    /*\n        a object for the userinfo at the top of the message is returned\n     */\n    getUserTop(){\n        /*\n            is the message written by the user self?\n         */\n        if(this.isBySelf())\n            return {\n                uid: this.uid,\n                username: 'Du',\n                color: chatSocket.userSelf.color\n            };\n        /*\n            if the user is not self\n         */\n        const user = chatSocket.users.get(this.uid);\n        return {\n            uid: this.uid,\n            username: user.username,\n            color: user.color\n        };\n    }\n    /*\n        is the message by the client self?\n     */\n    isBySelf(){\n        return this.uid === chatSocket.userSelf.uid;\n    }\n\n    getChatViewDateString(){\n        /*\n            Wenn weniger als 1 Tag her: Uhrzeit\n         */\n        if(this.isDateToday()){\n\n            return 'heute ' + this.getTimeString();\n        }\n        /*\n            Wenn gestern: gestern\n         */\n        else if(this.isDateYesterday()){\n\n            return 'gestern';\n        }\n        /*\n            sonst: Datum\n         */\n        else{\n            return this.getDateString();\n        }\n    }\n\n    getChatViewMsgString(){\n\n        // eslint-disable-next-line default-case\n        switch(this.type) {\n\n            case globalData.messageTypes.normalMessage: {\n\n                let msgString = this.content.text;\n                /*\n                    Wenn string länger als 18 Zeichen, wird verkürzt\n                 */\n                if(msgString.length > 18)\n                msgString = msgString.substr(0, 18) + '...';\n                /*\n                    wenn selbst geschrieben, steht Du: davor\n                 */\n                if(this.uid === chatSocket.userSelf.uid)\n                    return`Du: ${msgString}`;\n\n                else if (this.chat.type === 'normalchat')\n                    return this.content.text;\n\n                else\n                    return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\n            }\n            case globalData.messageTypes.statusMessage: {\n\n                return getStatusMessageString(\n                    this.getMessageObject(true),\n                    false\n                );\n            }\n        }\n    }\n\n    getMessageViewDateString(){\n        if(this.isDateToday()){\n\n            return this.getTimeString();\n        }\n        else if(this.isDateYesterday()){\n\n            return 'gestern ' + this.getTimeString();\n        }else{\n\n            return this.getDateString() + ' ' + this.getTimeString();\n        }\n    }\n\n    isDateToday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    isDateYesterday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() - 1 &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    getDateString(){\n        const d = this.date.getDate();\n        let ds;\n        if(d<10)\n            ds = '0'+d;\n        else\n            ds = d;\n        const m = this.date.getMonth();\n        let ms;\n        if(m+1<10)\n            ms = '0'+(m+1);\n        else\n            ms = m+1;\n        const y = this.date.getFullYear();\n\n        return `${ds}.${ms}.${y}`;\n    }\n\n    getTimeString(){\n        const h = this.date.getHours();\n        let hs;\n        if(h<10)\n            hs = '0'+h;\n        else\n            hs = h;\n        const m = this.date.getMinutes();\n        let ms;\n        if(m<10)\n            ms = '0'+m;\n        else\n            ms = m;\n\n        return `${hs}:${ms}`;\n    }\n    /*\n        es wird überprüft, ob date2 an einem anderen Tag war\n     */\n    isDifferentDay(date2){\n        return this.date.getDay() !== date2.getDay()\n            || this.date.getMonth() !== date2.getMonth()\n            || this.date.getFullYear() !== date2.getFullYear();\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    set mid(value) {\n        this._mid = value;\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(value) {\n        this._date = value;\n    }\n\n    get chat() {\n        return this._chat;\n    }\n\n    set chat(value) {\n        this._chat = value;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(value) {\n        this._content = value;\n    }\n}","export default class EventHandler{\n\n    _events;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    /*\n        event-handler wird hinzugefügt\n     */\n    on(event,fn){\n        /*\n            wenn event in Map vorhanden, wird event hinzugefügt\n         */\n        if(this.events.has(event))\n            this.events.get(event).push(fn);\n        /*\n            wenn event in map noch nicht vorhanden,\n            wird entry in map hinzugefügt\n         */\n        else\n            this.events.set(event,[fn]);\n    }\n    /*\n        event-handler wird entfernt\n     */\n    rm(event,fn){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            const e = this.events.get(event);\n            for(let i=0;i<e.length;i++)\n                //wenn element die gesuchte function, wird sie gelöscht\n                if(e[i] === fn)\n                    e.splice(i,1);\n        }\n    }\n    /*\n        alle registrierten functions eines events werden ausgelöst\n     */\n    trigger(event,...rest){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            /*\n                es werden alle functions aufgerufen\n             */\n            for(let i=0;i<this.events.get(event).length;i++)\n                this.events.get(event)[i](...rest);\n        }\n    }\n\n    get events() {\n        return this._events;\n    }\n\n    set events(value) {\n        this._events = value;\n    }\n}","import BinSearchArray from \"../../util/BinSearch\";\nimport Message from \"../message/message\";\nimport EventHandler from \"../../util/Event\";\nimport {getDispatch} from 'reactn';\nimport {loadMessages} from \"../apiCalls\";\n\nexport class Chat {\n\n    _type;\n    _id;\n    _chatName;\n    _messages = new BinSearchArray();\n    _event = new EventHandler();\n    _unreadMessages = 0;\n    /*\n        are all messages already loaded?\n     */\n    _reachedTopMessages = false;\n\n    constructor(type, id,chatName) {\n        this.type = type;\n        this.id = id;\n        this.chatName = chatName;\n    }\n    /*\n        the first message of the object is initialized\n     */\n    initFirstMessage(messageData){\n\n        if(!messageData.empty)\n            this.messages.add(\n                messageData.mid,\n                new Message(\n                    messageData.mid,\n                    messageData.uid,\n                    this,\n                    new Date(messageData.date),\n                    messageData.type,\n                    messageData.content\n                )\n            );\n    }\n    /*\n        messages are loaded\n     */\n    async loadMessages(num){\n        /*\n            messages are only loaded, if top not already reached\n         */\n        if(!this.reachedTopMessages) {\n\n            const getLastMsgId = () => {\n                const msg = this.getLastMessage();\n                if (msg !== null)\n                    return msg.mid;\n                return -1;\n            };\n            /*\n                messages are loaded from server\n             */\n            const response = await loadMessages({\n                chatType: this.type,\n                chatId: this.id,\n                lastMsgId: getLastMsgId(),\n                num: num\n            });\n\n            if (response.ok) {\n\n                const data = await response.json();\n                /*\n                    is top already reached?\n                 */\n                this.reachedTopMessages = data.status === 'reached top';\n\n                const lMessages = data.messages;\n                /*\n                    the array that will be returned\n                 */\n                const messages = new Array(lMessages.length);\n                const userTopShown = this.showUserInfoMessage();\n\n                for (let i = lMessages.length - 1; i >= 0; i--) {\n\n                    const messageData = lMessages[i];\n                    /*\n                        message is created\n                     */\n                    const message =\n                        new Message(\n                            messageData.mid,\n                            messageData.uid,\n                            this,\n                            new Date(messageData.date),\n                            messageData.type,\n                            messageData.content\n                        );\n                    /*\n                        message is added to chat\n                     */\n                    this.messages.add(\n                        messageData.mid,\n                        message\n                    );\n                    messages[i] = message.getMessageObject(userTopShown);\n                }\n                return messages;\n            }\n            throw new Error();\n        }\n    }\n    /*\n        gibt die Nachricht, die am längsten zurück liegt, zurück\n     */\n    getLastMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[0].value;\n        return null;\n    }\n    /*\n        gibt die neueste Nachricht im chat zurück\n     */\n    getFirstMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[this.messages.length - 1].value;\n        return null;\n    }\n    /*\n        returns all messages in an array\n            userTopShown    should the user at the top be shown?\n     */\n    getMessages(){\n\n        const userTopShown = this.showUserInfoMessage();\n        const rMessages = new Array(this.messages.length);\n\n        for(let i=0;i<this.messages.length;i++){\n\n            const message = this.messages[i].value;\n            rMessages[i] = message.getMessageObject(userTopShown);\n        }\n\n        return rMessages;\n    }\n    /*\n        neue Nachricht wird hinzugefügt\n     */\n    addMessage(uid,mid,type,content){\n        const message =\n            new Message(\n                mid,\n                uid,\n                this,\n                new Date(Date.now()),\n                type,\n                content\n            );\n        this.messages.add(mid,message);\n        getDispatch().newMsg(\n            this,\n            this.unreadMessages,\n            message.getMessageObject(\n                this.showUserInfoMessage()\n            ));\n    }\n    /*\n        should the userInfo at the messages be shown (--> only in groupChats)\n     */\n    showUserInfoMessage(){\n        return(this.type === 'groupChat')\n    }\n    /*\n        an object of this chat is returned\n     */\n    getChatObject(){\n        return {\n            type: this.type,\n            id: this.id,\n            chatName: this.chatName,\n            latestMessage: this.getLatestMessageObject(),\n            unreadMessages: this.unreadMessages\n        };\n    }\n    /*\n        an object with the latest message is returned\n     */\n    getLatestMessageObject(){\n        /*\n            are there messages?\n        */\n        if(this.messages.length === 0){\n            return null;\n        }else{\n            const lm = this.getFirstMessage();\n            return {\n                msgString: lm.getChatViewMsgString(),\n                dateString: lm.getChatViewDateString(),\n                date: lm.date\n            };\n        }\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get chatName() {\n        return this._chatName;\n    }\n\n    set chatName(value) {\n        this._chatName = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get unreadMessages() {\n        return this._unreadMessages;\n    }\n\n    set unreadMessages(value) {\n        this._unreadMessages = value;\n    }\n\n    get reachedTopMessages() {\n        return this._reachedTopMessages;\n    }\n\n    set reachedTopMessages(value) {\n        this._reachedTopMessages = value;\n    }\n}\n","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class NormalChat extends Chat{\n\n    _otherUser;\n    _isTyping = false;\n\n    constructor(id,chatName,uid,unreadMessages = 0) {\n        super('normalChat',id,chatName);\n        this.otherUser = uid;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return [\n                {\n                    uid: user.uid,\n                    username: user.username\n                }\n            ];\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\n     */\n    getLatestUserTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = true;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = false;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n\n    get otherUser() {\n        return this._otherUser;\n    }\n\n    set otherUser(value) {\n        this._otherUser = value;\n    }\n\n    get isTyping() {\n        return this._isTyping;\n    }\n\n    set isTyping(value) {\n        this._isTyping = value;\n    }\n}","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class GroupChat extends Chat{\n    //array with uids\n    _users = [];\n    //Array mit uids von den usern, die gerade schreibem\n    _usersTyping = [];\n\n    constructor(id,chatName,uids,unreadMessages = 0) {\n        super('groupChat',id,chatName);\n        this.users = uids;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.usersTyping.length > 0) {\n\n            let rc = [];\n            for(let i=0;i<this.usersTyping.length;i++){\n                const user = chatSocket.users.get(this.usersTyping[i]);\n                rc.push({\n                    uid: user.uid,\n                    username: user.username\n                });\n            }\n            return rc;\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der am neuestem schriebt\n     */\n    getLatestUserTyping(){\n        if(this.usersTyping.length > 0) {\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(this.isMember(uid)){\n            if(!this.isTyping(uid)){\n                /*\n                    the user is added to the currently typing users\n                 */\n                this.usersTyping.push(uid);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(this.isMember(uid)){\n            if(this.isTyping(uid)){\n                /*\n                    user is removed from the array of currently typing users\n                 */\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        returns true if the uid is member of the chat and not self\n     */\n    isMember(uid){\n        if(uid === chatSocket.userSelf.uid)\n            return false;\n        return this.users.find(e => e === uid);\n    }\n    /*\n        returns true if the user is currently typing\n     */\n    isTyping(uid){\n        return this.usersTyping.find(e => e === uid);\n    }\n    /*\n        returns the index of a currently typing user\n     */\n    getIndexOfTyping(uid){\n        return this.usersTyping.findIndex(e => e === uid);\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get usersTyping() {\n        return this._usersTyping;\n    }\n\n    set usersTyping(value) {\n        this._usersTyping = value;\n    }\n}","import {NormalChat} from \"./chat/normalChat\";\nimport chatSocket from \"./chatSocket\";\nimport User from \"./User\";\nimport Message from \"./message/message\";\nimport {getDispatch} from 'reactn';\nimport {globalData} from \"../global/globalData\";\nimport {createNormalChat} from \"./apiCalls\";\n\nexport default class TempChatLoader{\n\n    _isShown = false;\n    _chatNow;\n    /*\n        a new temporary chat gets created.\n        parameters uid and username required\n     */\n    createNew(uid,username){\n        this.chatNow = new NormalChat(0, username, uid);\n    }\n    /*\n        is the current tempChat already the one with this uid?\n     */\n    doesExist(uid){\n        if(this.chatNow === undefined)\n            return false;\n        return this.chatNow.otherUser === uid;\n    }\n    /*\n        tempChat gets shown\n     */\n    show(){\n        this.isShown = true;\n        getDispatch().showTempChat(this.chatNow);\n    }\n\n    update(){\n        getDispatch().updateTempChat(this.chatNow);\n    }\n\n    hide(){\n        this.isShown = false;\n        getDispatch().hideTempChat();\n    }\n    /*\n        a new normalChat is created out of the current tempChat\n     */\n    async createNewNormalChat(msg){\n\n        /*\n            the request gets sent to the server\n         */\n        const otherUid = this.chatNow.otherUser;\n        const otherUsername = this.chatNow.chatName;\n\n        const response = await createNormalChat({\n            uid: otherUid,\n            username: otherUsername,\n            message: {\n                type: globalData.messageTypes.normalMessage,\n                content: {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            }\n        });\n\n        if(response.ok){\n\n            const data = await response.json();\n\n            if(chatSocket.users.getIndex(otherUid) === -1){\n                chatSocket.users.add(otherUid,new User(otherUid,otherUsername));\n            }\n            const otherUser = chatSocket.users.get(otherUid);\n\n            const newChat = new NormalChat(data.ncid,otherUsername,otherUid);\n            /*\n                chat gets added to user\n             */\n            otherUser.normalChat = newChat.id;\n            /*\n                chat is added in binsearchArray\n             */\n            chatSocket.chats.normal.add(data.ncid,newChat);\n            /*\n                message is added to chat\n             */\n            const message = new Message(\n                data.mid,\n                chatSocket.userSelf.uid,\n                newChat,\n                new Date(Date.now()),\n                globalData.messageTypes.normalMessage,\n                {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            );\n            newChat.messages.add(message.mid,message);\n\n            //args: chat\n            getDispatch().addChat(newChat);\n            /*\n                currentChat gets changed\n             */\n            getDispatch().selectChat(newChat);\n            /*\n                tempChat is hidden\n             */\n            this.hide();\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    get isShown() {\n        return this._isShown;\n    }\n\n    set isShown(value) {\n        this._isShown = value;\n    }\n\n    get chatNow() {\n        return this._chatNow;\n    }\n\n    set chatNow(value) {\n        this._chatNow = value;\n    }\n}\n\n","import io from 'socket.io-client';\nimport User from \"./User\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport {NormalChat} from './chat/normalChat';\nimport {GroupChat} from \"./chat/groupChat\";\nimport EventHandler from \"../util/Event\";\nimport TempChatLoader from \"./tempChatLoader\";\nimport {getGlobal,getDispatch} from 'reactn';\nimport {selectChats} from \"./apiCalls\";\n\nclass ChatSocket{\n\n    _socket;\n    _userSelf = {\n        uid: 0,\n        username: \"\"\n    };\n    _users = new BinSearchArray();\n    _chats = {\n        normal: new BinSearchArray(),\n        group: new BinSearchArray()\n    };\n    _event = new EventHandler();\n    _finishedLoading = false;\n    /*\n        normalchat not saved in the database\n     */\n    _temporaryChat = new TempChatLoader();\n    _initCalled = false;\n\n    destruct(){\n\n        if(this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.disconnect();\n        }\n        this.initCalled = false;\n    }\n\n    async init(){\n\n        const {uid,username} = getGlobal().userSelf;\n        /*\n            user-Object is created\n         */\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.initCalled = true;\n\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.socket = io.connect('/', {secure: true});\n        /*\n            authTokens are sent to client\n         */\n        this.socket.emit('auth', getGlobal().authTokens);\n        /*\n            is called when user is initialized\n         */\n        this.socket.on('initialized',() => {\n\n            this.initChats();\n        });\n        /*\n            msg-handler\n         */\n        this.socket.on('chat message',data => {\n            /*\n                gets chat of msg\n                adds this message to chat\n            */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            if(chat !== null) {\n                const isCurrentChat = this.isCurrentChat(\n                    chat.type,\n                    chat.id\n                );\n                chat.addMessage(\n                    data.uid,\n                    data.mid,\n                    data.type,\n                    data.content\n                );\n                /*\n                    hasNewMsg gets updated\n                    if current chat --> false\n                 */\n                chat.hasNewMsg = !isCurrentChat;\n                /*\n                    if chat is not currentChat, unreadMessages gets incremented\n                 */\n                chat.unreadMessages ++;\n                /*\n                    new message event is triggered\n                 */\n                this.event.trigger(\n                    'new message',\n                    data.chat.type,\n                    data.chat.id\n                );\n            }\n        });\n        /*\n            started typing\n         */\n        this.socket.on('started typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.startedTyping(data.uid);\n        });\n        /*\n            stopped typing\n         */\n        this.socket.on('stopped typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.stoppedTyping(data.uid);\n        });\n        /*\n            the result of the search in new chat\n         */\n        this.socket.on('users-noChat',data => {\n            chatSocket.event.trigger('users-noChat',data);\n        });\n        /*\n            the user has been added to a new chat\n         */\n        this.socket.on(\"new chat\",data => {\n            this.addNewChat(data);\n        });\n        /*\n            Bei disconnect wird Seite neu geladen\n         */\n        this.socket.on('disconnect',() => {\n            setTimeout(function() {\n\n                alert('Verbindung verloren! Seite wird neu geladen');\n                // eslint-disable-next-line no-restricted-globals\n                location.reload();\n            },1000);\n        });\n    }\n\n    async initChats(){\n\n        const response = await selectChats();\n\n        if(response.status === 200) {\n\n            const data = await response.json();\n            for (let i = 0; i < data.length; i++) {\n                if (data[i].type === 'normalChat') {\n                    /*\n                        normalChat is added\n                     */\n                    this.addNewNormalChat(data[i]);\n                } else if (data[i].type === 'groupChat') {\n                    /*\n                        groupChat is added\n                     */\n                    this.addNewGroupChat(data[i]);\n                }\n            }\n        }\n        this.finishedLoading = true;\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\n    }\n\n    getChatArraySortedByDate(){\n\n        function getMessageTime (chat) {\n            const c = chat.latestMessage;\n            if(c !== null)\n                return c.date.getTime();\n            return new Date(0).getTime();\n        }\n\n        function getMaxDate (chats,iFrom) {\n            let max = iFrom;\n            for(let i = iFrom+1;i<chats.length;i++){\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\n                    max = i;\n            }\n            return max;\n        }\n        function swap (items, firstIndex, secondIndex) {\n            let temp = items[firstIndex];\n            items[firstIndex] = items[secondIndex];\n            items[secondIndex] = temp;\n        }\n        /*\n            Array is cloned\n         */\n        function cloneArr (arr) {\n            const clone = new Array(arr.length);\n            for(let i=0;i<arr.length;i++){\n                const chat = arr[i].value;\n                clone[i] = chat.getChatObject();\n            }\n            return clone;\n        }\n        /*\n            es wird ein sortiertes Array zurückgegeben\n         */\n        function getSorted (chats) {\n            //Array wird erzeugt\n            const sorted = cloneArr(chats);\n            /*\n                es wird immer das höchste eingefügt, um Array zu sortieren\n             */\n            for(let i=0;i<sorted.length-1;i++){\n                let max = getMaxDate(sorted,i);\n                swap(sorted,i,max);\n            }\n            return sorted;\n        }\n        /*\n            Arrays werden gemerged\n         */\n        function mergeArr (arr1,arr2) {\n\n            const merged = new Array(arr1.length + arr2.length);\n            let p1 = 0;\n            let p2 = 0;\n            for(let i=0;i<merged.length;i++){\n                if(! (p2 < arr2.length)){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else if (! (p1 < arr1.length)){\n                    merged[i] = arr2[p2];\n                    p2++;\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else{\n                    merged[i] = arr2[p2];\n                    p2++;\n                }\n            }\n            return merged;\n        }\n        const ncSorted = getSorted(this.chats.normal);\n        const gcSorted = getSorted(this.chats.group);\n\n        return mergeArr(ncSorted, gcSorted);\n    }\n\n    isCurrentChat(type,id){\n        const currentChat = getGlobal().currentChat;\n        return currentChat.type === type && currentChat.id === id;\n    };\n\n    getChat(type,id){\n        /*\n            type can be:\n                normalChat\n                tempChat\n                groupChat\n         */\n        if(type === 'normalChat')\n            return this.chats.normal.get(id);\n        else if(type === 'tempChat') {\n            return this.temporaryChat.chatNow;\n        }\n        else if(type === 'groupChat')\n            return this.chats.group.get(id);\n    }\n    /*\n        a new chat gets added\n     */\n    addNewChat(data){\n\n        let newChat;\n\n        if(data.type === 'normalChat'){\n            /*\n                new normalChat gets created\n             */\n            newChat = this.addNewNormalChat(data);\n\n        }else if(data.type === 'groupChat'){\n\n            newChat = this.addNewGroupChat((data));\n        }\n        newChat.unreadMessages = 1;\n        /*\n            event gets triggered\n         */\n        getDispatch().addChat(newChat);\n    }\n    /*\n        a new normalChat gets added\n     */\n    addNewNormalChat(data){\n        /*\n            check if the other user does already exist\n                if not --> gets created\n         */\n        let otherUser;\n        if(this.users.getIndex(data.members[0].uid) === -1){\n            otherUser = new User(\n                data.members[0].uid,\n                data.members[0].username\n            );\n            this.users.add(otherUser.uid,otherUser);\n        }else{\n            otherUser = this.users.get(data.members[0].uid);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat = new NormalChat(\n            data.id,\n            data.chatName,\n            otherUser.uid,\n            data.unreadMessages\n        );\n        /*\n            normalChat is set at other user\n         */\n        otherUser.normalChat = newChat.id;\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.normal.add(data.id,newChat);\n\n        return newChat;\n    }\n    /*\n        a new groupChat gets added\n     */\n    addNewGroupChat(data){\n        /*\n            check which do not exist already --> get added\n         */\n        const members = [];\n\n        for(let i=0;i<data.members.length;i++) {\n\n            const member = data.members[i];\n            /*\n                does the user already exist?\n             */\n            let user;\n            if (this.users.getIndex(member.uid) === -1) {\n                user = new User(\n                    member.uid,\n                    member.username\n                );\n                this.users.add(user.uid, user);\n            } else {\n                user = this.users.get(member.uid);\n            }\n            /*\n                member gets added\n             */\n            members.push(user.uid);\n            /*\n                chat is added at user\n             */\n            user.addGroupChat(data.id);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat =\n            new GroupChat(\n                data.id,\n                data.chatName,\n                members,\n                data.unreadMessages\n            );\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.group.add(data.id,newChat);\n\n        return newChat;\n    }\n\n    get socket() {\n        return this._socket;\n    }\n\n    set socket(value) {\n        this._socket = value;\n    }\n\n    get userSelf() {\n        return this._userSelf;\n    }\n\n    set userSelf(value) {\n        this._userSelf = value;\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get chats() {\n        return this._chats;\n    }\n\n    set chats(value) {\n        this._chats = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get finishedLoading() {\n        return this._finishedLoading;\n    }\n\n    set finishedLoading(value) {\n        this._finishedLoading = value;\n    }\n\n    get temporaryChat() {\n        return this._temporaryChat;\n    }\n\n    set temporaryChat(value) {\n        this._temporaryChat = value;\n    }\n\n    get initCalled() {\n        return this._initCalled;\n    }\n\n    set initCalled(value) {\n        this._initCalled = value;\n    }\n}\n\nlet chatSocket = new ChatSocket();\n\nexport function resetChatSocket(){\n    chatSocket.destruct();\n    chatSocket = new ChatSocket();\n}\n\nexport default chatSocket;\n","import React,{Component} from \"reactn\";\nimport {Link} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class ChatItem extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastMsg: undefined,\n            typeMsg: ''\n        }\n    }\n    /*\n        is this chat selected?\n     */\n    isSelected = () => {\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\n    };\n    /*\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\n        um die typeMsg zu aktualisieren\n     */\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        let typeMsg = '';\n        /*\n            wenn latestuserTyping = null, schreibt gerade keiner\n         */\n        const userTyping = chat.getLatestUserTyping();\n        if(userTyping !== null){\n            typeMsg = userTyping.username + \" schreibt...\";\n        }\n        //state wird aktualisiert\n        this.setState({\n            typeMsg: typeMsg\n        });\n    };\n\n    render() {\n\n        const renderUnreadMsg = () => {\n            if(this.props.unreadMessages === 0)\n                return null;\n            else\n                return(\n                    <div className=\"newMsg-number\">\n                        {this.props.unreadMessages}\n                    </div>\n                );\n        };\n        /*\n            in der unteren Hälfte wird angezeigt wer schreibt\n            schreibt keiner, wird letzte Nachricht angezeigt\n         */\n        const renderLowerHalf = () => {\n            if(this.state.typeMsg === '')\n                return (\n                    <div className=\"w-100 lastMsg\">\n                        {renderMsg()}\n                        {renderDate()}\n                    </div>\n                );\n            else{\n                return (\n                    <div className=\"w-100 typeMsg\">\n                        {this.state.typeMsg}\n                    </div>\n                );\n            }\n        };\n\n        const renderMsg = () => {\n            if(this.props.latestMessage)\n                return(\n                    <span>\n                        {this.props.latestMessage.msgString}\n                    </span>\n                );\n            else\n                return(\n                    <span>\n                        Noch keine Nachrichten vorhanden\n                    </span>\n                );\n        };\n\n        const renderDate = () => {\n            if(this.props.latestMessage)\n                return(\n                    <div className=\"lastMsg-date\">\n                        {this.props.latestMessage.dateString}\n                    </div>\n                );\n            else\n                return null;\n        };\n\n        const getLink = () => {\n            if(this.props.type === 'normalChat'){\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\n            }else if(this.props.type === 'groupChat'){\n                return '/chat/group/' + this.props.id;\n            }else if(this.props.type === 'tempChat'){\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\n            }\n        };\n\n        return(\n            <li className={\"chat-item\" + (this.isSelected() ? \" selected \" : \"\")}>\n                <Link to={getLink()}>\n                    <div className=\"w-100\">\n                        <strong className=\"chatItem-username\">\n                            {this.props.name}\n                        </strong>\n                        {renderUnreadMsg()}\n                    </div>\n                    {renderLowerHalf()}\n                </Link>\n            </li>\n        )\n    }\n\n    componentDidMount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden angelegt\n         */\n        //if(chat)\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n        /*else{\n            console.log('error',chatSocket.chats.group,this.props.type,this.props.id)\n        }*/\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did component update?\n         */\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\n            //Listeners get replaced\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n\n            //typeMsg gets deleted\n            this.setState({\n                typeMsg: ''\n            });\n        }\n\n    }\n    componentWillUnmount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden entfernt\n         */\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React,{Component} from \"reactn\";\nimport ChatSearchBox from \"./ChatSearchBox\";\nimport ChatItem from \"./ChatItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './chatList.scss';\n\nexport default class ChatList extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //the current searchValue at the chatlist\n            searchValue: ''\n        };\n    }\n\n    render() {\n\n        let found = 0;\n\n        const showNothingFoundMsg = () => {\n            if(found === 0)\n                return(\n                    <span>\n                        Nichts gefunden\n                    </span>\n                );\n            return null;\n        };\n\n        const renderTempChat = () => {\n            /*\n                is tempChat not null?\n             */\n            if(this.global.tempChat){\n                return(\n                    <ChatItem\n                        key={-1}\n                        id={0}\n                        type={'tempChat'}\n                        name={this.global.tempChat.chatName}\n                        unreadMessages={0}\n                        latestMessage={null}\n                    />\n                );\n            }\n            return null;\n        };\n\n        return(\n                <Dummy>\n                    <ChatSearchBox\n                        onSearch={searchValue => {\n                            this.setState({\n                                searchValue: searchValue\n                            })\n                        }}\n                    />\n\n                    <ul className=\"chat-list\">\n                        {renderTempChat()}\n                        {this.global.chats.map((chat,i) => {\n                            if(chat.chatName.includes(this.state.searchValue)) {\n                                found++;\n                                return (\n                                    <ChatItem\n                                        key={i}\n                                        id={chat.id}\n                                        type={chat.type}\n                                        name={chat.chatName}\n                                        unreadMessages={chat.unreadMessages}\n                                        latestMessage={chat.latestMessage}\n                                    />\n                                );\n                            }\n                            return null;\n                        })}\n                    </ul>\n                    {showNothingFoundMsg()}\n                </Dummy>\n        )\n    }\n}","import React from \"react\";\n\nimport './chatViewLoader.scss';\n\nexport default function ChatViewLoader (props){\n    return(\n        <div className=\"loader-init\">\n            <div className=\"col-sm-12 my-auto\">\n                <div className=\"init-container border rounded\">\n                    <div className=\"spinner-border text-secondary\"\n                         style={{\n                             width: '15rem',\n                             height: '15rem',\n                             borderWidth: '0.5rem'\n                         }}\n                         role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                    <div className=\"loader-text\">{props.msg}</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import {makeRequest} from \"../../global/requests\";\nimport {globalData} from \"../../global/globalData\";\n\nexport async function loadGroupChat(gcid){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest('/group/' + gcid + '/', config);\n}\nexport async function sendMessage(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return  await makeRequest('/message', config);\n}","import React,{Component} from \"react\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport {withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {globalData} from \"../../../global/globalData\";\nimport {sendMessage} from \"../apiCalls\";\n\nimport './messageForm.scss';\n\nclass MessageForm extends Component{\n\n    _userTyping = false;\n    _typeEventEmitted = false;\n    _typeTimeout;\n    /*\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\n     */\n    _isTempChat;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            showEmoji: false\n        }\n    }\n\n    onTyping = event => {\n\n        this.setState({\n           message: event.target.value\n        });\n\n        this.handleTypeMessage();\n    };\n\n    handleTypeMessage = () => {\n        /*\n            type message get only handled if the chat is not temporary\n         */\n        if(!this.isTempChat) {\n\n            if (this.userTyping) {\n                clearTimeout(this.typeTimeout);\n            }\n            this.userTyping = true;\n            if (!this.typeEventEmitted) {\n                this.typeEventEmitted = true;\n                chatSocket.socket.emit('started typing');\n            }\n            this.typeTimeout = setTimeout(() => {\n                this.userTyping = false;\n                if (this.typeEventEmitted) {\n                    this.typeEventEmitted = false;\n                    chatSocket.socket.emit('stopped typing');\n                }\n            }, 1000);\n        }\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        /*\n            es kann keine leere Nachricht geschickt werden\n         */\n        if(this.state.message !== ''){\n            const message = this.state.message;\n            /*\n                input wird geleert\n             */\n            this.setState({\n                message: ''\n            });\n            if(this.isTempChat) {\n\n                const {pathname} = this.props.location;\n                /*\n                    the chat is created\n                 */\n                chatSocket.temporaryChat.createNewNormalChat(message)\n                    .then(redirect => {\n                        if(redirect) {\n                            this.props.history.replace(\"/chat\");\n                            this.props.history.replace(pathname);\n                        }\n                    });\n            }else{\n\n                this.sendMessage(message)\n                    .then(mid => {\n                        /*\n                            message is added to chat\n                         */\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\n                        chat.addMessage(\n                            chatSocket.userSelf.uid,\n                            mid,\n                            globalData.messageTypes.normalMessage,\n                            {\n                                text: message,\n                                mentions: [],\n                                media: []\n                            }\n                        );\n                    })\n                    .catch(err => {});\n            }\n        }\n    };\n\n    sendMessage = async msg => {\n        /*\n            message is sent to server\n         */\n        const response = await sendMessage({\n            type: globalData.messageTypes.normalMessage,\n            content: {\n                text: msg,\n                mentions: [],\n                media: []\n            }\n        });\n\n        if (response.ok) {\n\n            const data = await response.json();\n            /*\n                mid is returned\n             */\n            return data.mid;\n        }\n        return new Error();\n    };\n\n    onEmojiInput = emoji => {\n\n        this.setState({\n            message: this.state.message + emoji.native\n        });\n        this.handleTypeMessage();\n    };\n\n    toggleEmoji = event => {\n        this.setState(state => ({\n            showEmoji: !state.showEmoji\n        }))\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form onSubmit={this.onSubmit}\n                      className=\"msg-form\">\n                    <div className=\"message-input\">\n                        <input autoComplete=\"off\"\n                               placeholder=\"Nachricht:\"\n                               name=\"message-input-text\"\n                               value={this.state.message}\n                               onChange={this.onTyping}\n                        />\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\n                           onClick={this.toggleEmoji}\n                        />\n                    </div>\n                    <button className=\"btn-submit\" type=\"submit\">\n                        <i className=\"far fa-paper-plane fa-2x\"\n                           data-toggle=\"tooltip\"\n                           title=\"send message\" />\n                    </button>\n                </form>\n                {this.state.showEmoji ?\n                    <div style={{\n                        position: 'absolute',\n                        bottom: '60px',\n                        right: '50px',\n                        width: '350px',\n                        height: '425px'\n                    }}>\n                        <Picker\n                            onSelect={this.onEmojiInput}\n                            native={true}\n                        />\n                    </div>\n                : null}\n            </Dummy>\n        )\n    }\n\n    componentDidMount() {\n        /*\n            isTempChat gets set\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            isTempChat gets updated\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    get userTyping() {\n        return this._userTyping;\n    }\n\n    set userTyping(value) {\n        this._userTyping = value;\n    }\n\n    get typeEventEmitted() {\n        return this._typeEventEmitted;\n    }\n\n    set typeEventEmitted(value) {\n        this._typeEventEmitted = value;\n    }\n\n    get typeTimeout() {\n        return this._typeTimeout;\n    }\n\n    set typeTimeout(value) {\n        this._typeTimeout = value;\n    }\n\n    get isTempChat() {\n        return this._isTempChat;\n    }\n\n    set isTempChat(value) {\n        this._isTempChat = value;\n    }\n}\n\nexport default withRouter(MessageForm);","import React,{Component} from \"reactn\";\nimport ReactDOM from 'react-dom';\nimport MessageForm from \"./MessageForm\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Message from \"./message/Message\";\nimport {isDifferentDay} from '../../../chatData/message/message'\n\nimport './chatContainer.scss';\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default class ChatContainer extends Component{\n\n    _isMounted = false;\n    _messages;\n    _messagesNode;\n\n    constructor(props) {\n        super(props);\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\n        this.state = {\n            msgLoading: false,\n            scrollToBottom: 0,\n            messages: [],\n            typeMessages: []\n        };\n    }\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\n    scrollHandler = event => {\n        this.setState({\n            scrollToBottom: this.getScrollToBottom()\n        });\n        /*\n            wenn oben angelangt, werden Nachrichten geladen\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    setScrollToBottom = val => {\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\n    };\n\n    getScrollToBottom  = () => {\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\n    };\n\n    assignMessagesRef = target => {\n        this.messages = target;\n    };\n\n    loadMessages = () => {\n\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\n        /*\n            loader is only shown, if top not reached\n         */\n        if(!chat.reachedTopMessages)\n            this.setState({\n                msgLoading: true\n            });\n        /*\n            messages are loaded\n         */\n        chat.loadMessages(10)\n            .then(messages => {\n                /*\n                    loader is hidden\n                    messages are added\n                 */\n                this.dispatch.addLoadedMessages(messages);\n                this.setState(state => ({\n                    msgLoading: false\n                }));\n                this.setScrollToBottom(this.state.scrollToBottom);\n            })\n            .catch(err => this.setState({\n                msgLoading: false\n            }));\n    };\n    /*\n        is called when the selected chat changed\n     */\n    chatChanged = () => {\n        /*\n            if scrollToBottom is 0, the messages are loaded\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    componentDidMount() {\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\n\n        this.chatChanged();\n\n        this.isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn das der Fall ist:\n                wird messages loaded listener auf neuen chat angewandt\n                scrollToBottom wird auf 0 gesetzt\n                scrolltop wird überprüft\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            //scrollToBottom wird auf 0 gesetzt\n            this.setScrollToBottom(0);\n\n            this.chatChanged();\n        }\n        /*\n            wenn scrollToBottom 0 wird zu bottom gescrollt\n         */\n        if(this.state.scrollToBottom === 0) {\n            this.setScrollToBottom(0);\n            /*\n                newMessages is set to 0\n             */\n            if(this.global.currentChat.newMessages > 0)\n                this.setGlobal(global => ({\n                   currentChat: {\n                       ...global.currentChat,\n                       newMessages: 0\n                   }\n                }));\n        }\n\n    }\n\n    render() {\n\n        const showLoaderTop = () => {\n            if(this.state.msgLoading)\n                return(\n                    <div className=\"messageLoader-top\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderNewMessages = () => {\n\n            if(this.global.currentChat.newMessages > 0)\n                return(\n                    <div id=\"scroll-down-number\" className=\"number\">\n                        {this.global.currentChat.newMessages}\n                    </div>\n                );\n            return null;\n        };\n\n        const renderBtnToBottom = () => {\n            if(this.isMounted) {\n                if (this.getScrollToBottom() > 10) {\n                    return (\n                        <div id=\"messages-bottom\"\n                             className=\"messages-bottom\"\n                             onClick={() => {\n                                 this.setState({\n                                     scrollToBottom: 0\n                                 })\n                             }}\n                        >\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\n                            </div>\n                            {renderNewMessages()}\n                        </div>\n                    )\n                }\n            }\n            return null;\n        };\n\n        let lastDate = new Date(0);\n        /*\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\n            wird ein Container mit Datum gerendert\n         */\n        const renderDateContainer = msg => {\n            if(isDifferentDay(msg.date,lastDate)){\n                lastDate = msg.date;\n                return(\n                    <div className = \"date-container\">\n                        <div>\n                            {msg.dateString}\n                        </div>\n                    </div>\n                )\n            }\n            lastDate = msg.date;\n            return null;\n        };\n\n        const renderAlertNoMessages = () => {\n            if(this.global.currentChat.messages.length === 0)\n                return(\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                );\n            return null;\n        };\n\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\"\n                     onScroll={this.scrollHandler}\n                     ref={this.assignMessagesRef}\n                >\n                    {showLoaderTop()}\n                    {this.global.currentChat.messages.map((msg,i) => {\n                        return (\n                            <Dummy key={i}>\n                                {renderDateContainer(msg)}\n                                <Message\n                                    msg={msg}\n                                />\n                            </Dummy>\n                        );\n                    })}\n                    {renderAlertNoMessages()}\n                    {renderBtnToBottom()}\n                </div>\n                <MessageForm\n                    chatType={this.props.chatType}\n                    chatId={this.props.chatId}\n                />\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    get isMounted() {\n        return this._isMounted;\n    }\n\n    set isMounted(value) {\n        this._isMounted = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get messagesNode() {\n        return this._messagesNode;\n    }\n\n    set messagesNode(value) {\n        this._messagesNode = value;\n    }\n}","import React,{Component} from \"react\";\nimport MessageForm from \"./chatContainer/MessageForm\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class TempChatContainer extends Component{\n\n    render() {\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\">\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                </div>\n                <MessageForm\n                    chatType={'tempChat'}\n                    chatId={0}\n                />\n            </div>\n        );\n    }\n    componentDidMount() {\n        chatSocket.temporaryChat.show();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.uid !== this.props.uid)\n            chatSocket.temporaryChat.update();\n    }\n    componentWillUnmount() {\n        chatSocket.temporaryChat.hide();\n    }\n}","import React from \"react\";\n\nexport function AddressNotValid() {\n    return(\n        <div>\n            <h2>ungültige Addresse</h2>\n        </div>\n    );\n}\nexport function CannotWriteYourself(){\n    return(\n        <div>\n            <h2>Du kannst dir selbst nicht schreiben</h2>\n        </div>\n    );\n}\nexport function BlockedByThisUser(){\n    return(\n        <div>\n            <h2>Dieser User hat dich blockiert</h2>\n        </div>\n    );\n}\nexport function UserNotExisting(){\n    return(\n        <div>\n            <h2>Dieser User existiert nicht</h2>\n        </div>\n    );\n}\nexport function NoMemberInPublicChat(){\n    return (\n        <div>\n            <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\n        </div>\n    );\n}\nexport function NoAuthorization(){\n    return (\n        <div>\n            <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\n        </div>\n    );\n}\nexport function ChatNotExisting(){\n    return (\n        <div>\n            <h2>Dieser Chat existiert nicht</h2>\n        </div>\n    );\n}\nexport function GeneralError(){\n    return (\n        <div>\n            <h2>Fehler</h2>\n        </div>\n    );\n}","import React, {Component} from \"reactn\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport TempChatContainer from \"./TempChatContainer\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/User\";\nimport {\n    AddressNotValid,\n    BlockedByThisUser,\n    CannotWriteYourself,\n    UserNotExisting\n} from \"./chatViewErrorMessages\";\n\nexport default class NormalChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: UserErrorCode.none\n        }\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if(this.state.error === UserErrorCode.nan){\n                return(\n                    <AddressNotValid/>\n                );\n            }\n            else if(this.state.error === UserErrorCode.isSelf){\n                return(\n                    <CannotWriteYourself/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if(this.state.loaded){\n\n                if(this.state.error === UserErrorCode.none){\n\n                    return(\n                        <ChatContainer\n                            chatType={this.global.currentChat.type}\n                            chatId={this.global.currentChat.id}\n                        />\n                    )\n                }else if(this.state.error === UserErrorCode.tempChat){\n                    return(\n                        <TempChatContainer uid={this.state.uid}/>\n                    )\n                }else if(this.state.error === UserErrorCode.blocked){\n                    return(\n                        <BlockedByThisUser/>\n                    )\n                }else{\n                    return(\n                        <UserNotExisting/>\n                    )\n                }\n            }\n        };\n\n        return <div className=\"h-100\">\n            {renderLoader()}\n            {renderChat()}\n        </div>;\n    }\n\n    componentDidMount() {\n        this.userChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did uid change?\n         */\n        if(prevProps.uid !== this.props.uid){\n            /*\n                is props.uid a number?\n             */\n            if(isNaN(this.props.uid)){\n                this.setState({\n                    error: UserErrorCode.nan\n                });\n            }\n            else{\n                this.userChanged();\n            }\n\n        }\n    }\n    /*\n        is called when the user changed and when the component mounted\n            this is checked after each update\n     */\n    userChanged = () => {\n\n        const uid = parseInt(this.props.uid);\n\n        /*\n            is the user self?\n         */\n        if(this.global.userSelf.uid === uid){\n            this.setState({\n                error: UserErrorCode.isSelf,\n                loaded: true\n            });\n        }else {\n\n            const userExists = () => {\n\n                getUserNormalChat(uid)\n                    .then(res => {\n                        /*\n                            no error\n                                checks if existing or tempChat\n                         */\n                        if (res === UserErrorCode.none) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.users.get(uid).username,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                normalChat is selected\n                             */\n                            this.selectNormalChat(uid);\n                            /*\n                                tempChat\n                             */\n                        } else if (res === UserErrorCode.tempChat) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                the temporary chat is selected\n                             */\n                            this.selectTempChat();\n                        }\n                        /*\n                            some error has occured, state is set\n                         */\n                        else{\n                           this.setState({\n                               error: UserErrorCode.error\n                           })\n                        }\n                        this.setState({\n                            loaded: true\n                        });\n\n                    })\n                    .catch(err => this.setState({\n                        error: UserErrorCode.error\n                    }));\n            };\n\n            if (chatSocket.finishedLoading) {\n                userExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    userExists();\n                });\n            }\n\n            this.setState({\n                uid: parseInt(this.props.uid)\n            });\n        }\n    };\n    /*\n        the tempChat is selected\n     */\n    selectTempChat(){\n        this.dispatch.showTempChat();\n    }\n    /*\n        a normalCHat is selected\n     */\n    selectNormalChat(uid){\n        /*\n            does the user exist?\n         */\n        if (chatSocket.users.getIndex(uid) === -1) {\n\n            this.setState({\n                error: UserErrorCode.userNotExisting\n            });\n        }else {\n            /*\n                chat is pulled from chatSocket\n             */\n            const id = chatSocket.users.get(uid).normalChat;\n            const chat = chatSocket.getChat('normalChat', id);\n\n            this.dispatch.selectChat(chat);\n        }\n    }\n    /*\n        property- display normalChat is removed from global\n     */\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\n\nimport './modal.scss';\n\nclass Modal extends Component{\n\n    render() {\n        const clickedOutside = () => {\n            this.props.history.goBack();\n        };\n        return(\n            <div\n                className=\"modal-outer\"\n                onClick={clickedOutside}>\n                <div className=\"h-100\" style={{display: \"flex\"}}>\n\n                        <div\n                            className=\"modal-inner\"\n                            onClick={event => {event.stopPropagation()}}>\n                            <div\n                                className=\"btn-close\"\n                                onClick={() => {this.props.history.goBack()}}>\n                                &times;\n                            </div>\n                            {this.props.children}\n                        </div>\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Modal);\n\nexport function ModalHeader(props){\n    return(\n        <div className=\"m-header\">\n            {props.children}\n        </div>\n    )\n}\n\nexport function ModalMain(props){\n    return(\n        <div className=\"m-main\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"react\";\n\nexport default class UserItem extends Component{\n\n    clicked = event => {\n        if(this.props.isSelected){\n            this.props.deselectUser(this.props.index);\n        }else\n            this.props.selectUser(this.props.index);\n    };\n\n    render() {\n        return(\n            <li key={this.props.index}\n                onClick={this.clicked}\n            >\n                <div className=\"username\">\n                    {this.props.username}\n                </div>\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\n                    <i className=\"fas fa-check\" />\n                </div>\n            </li>\n        );\n    }\n}","import React,{Component} from \"react\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class extends Component {\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            error: errorCode.none,\n            /*\n                are there items left?\n             */\n            hasMore: true\n        }\n    }\n\n    searchChanged = event => {\n        this.setState({\n            searchValue: event.target.value,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more users are loaded\n     */\n    loadUsers = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const data = await this.props.loadUsers(\n                    searchValue,\n                    length\n                );\n\n                if (data.length === 0) {\n                    this.setState({\n                        hasMore: false,\n                        error: errorCode.none\n                    })\n                } else {\n                    this.setState(state => ({\n                        searchResult: state.searchResult.concat(data),\n                        error: errorCode.none\n                    }));\n                }\n\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n    /*\n        is called when an user is selected\n     */\n    selectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.selectUser(user.uid,user.username);\n    };\n\n    deselectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.deselectUser(user.uid);\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\n                    <input type=\"text\"\n                           className=\"form-control p-2 m-2\"\n                           placeholder=\"Benutzer suchen\"\n                           value={this.state.searchValue}\n                           onChange={this.searchChanged}\n                    />\n                </form>\n                <div\n                    className=\"selectUsers\"\n                    ref={ref => this.scrollParentRef = ref}\n                >\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={this.loadUsers}\n                        hasMore={this.state.hasMore}\n                        loader={\n                            <div className=\"loader\" key={-1}>\n                                <div\n                                    className=\"spinner-border text-secondary\"\n                                    role=\"status\"\n                                >\n                                    <span className=\"sr-only\">\n                                        Loading...\n                                    </span>\n                                </div>\n                            </div>\n                        }\n                        useWindow={false}\n                        getScrollParent={() => this.scrollParentRef}\n                    >\n                        <ul className=\"selectUsers\">\n                            {this.state.searchResult.map((item, index) => (\n                                <UserItem\n                                    key={index}\n                                    index={index}\n                                    uid={item.uid}\n                                    username={item.username}\n                                    selectUser={this.selectUser}\n                                    deselectUser={this.deselectUser}\n                                    isSelected={this.props.isUserSelected(item.uid)}\n                                />\n                            ))}\n                            {this.state.searchResult.length === 0 ?\n                                <div key={-1} className=\"nothingFound\">\n                                    Nichts gefunden!\n                                </div>\n                                :\n                                null\n                            }\n                        </ul>\n                    </InfiniteScroll>\n                </div>\n            </Dummy>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport UserList from \"./UserList\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './selectUsers.scss';\n\nexport default class SelectUsers extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the users already selected\n             */\n            selectedUsers: [],\n            showOnlySelected: false\n        }\n    }\n    /*\n        gets called when a user gets selected\n     */\n    selectUser = (uid,username) => {\n        this.setState(state => ({\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\n        }));\n    };\n\n    deselectUser = (uid) => {\n        this.setState(state => {\n            const arrClone = [...state.selectedUsers];\n            const index = arrClone.findIndex(item => {\n                return item.uid === uid;\n            });\n            arrClone.splice(index,1);\n            return {\n                selectedUsers: arrClone\n            }\n        });\n    };\n\n    deselectIndex = index => {\n        this.deselectUser(this.state.selectedUsers[index].uid);\n    };\n\n    isUserSelected = (uid) => {\n        return this.state.selectedUsers.find(item => {\n            return item.uid === uid;\n        });\n    };\n    /*\n        an Array with the uids of the users gets returned to the parent component\n     */\n    btnNextClicked = event => {\n\n        this.props.onNext(this.state.selectedUsers);\n    };\n\n    render() {\n\n        const renderSelectedUsers = () => {\n            if(this.state.selectedUsers.length === 0){\n                return (\n                    <h4>\n                        Noch niemand ausgewählt\n                    </h4>);\n            }else{\n                return(\n                    <h4 className=\"w-100\">\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\n                              onClick={event => {\n                                  this.setState(state => ({\n                                      showOnlySelected: !state.showOnlySelected\n                                  }));\n                              }}\n                        >\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\n                        </span>\n                        &nbsp;ausgewählt\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\n                           onClick={this.btnNextClicked}\n                        />\n                    </h4>\n                )\n            }\n        };\n        /*\n            selected users cannot be shown if there is no one selected.\n                --> showOnlySelected = false\n         */\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\n            this.setState({\n                showOnlySelected: false\n            });\n\n        return(\n            <Dummy>\n                <div className=\"select-users\">\n                    {renderSelectedUsers()}\n                </div>\n                    {!this.state.showOnlySelected ?\n                        <UserList selectUser={this.selectUser}\n                                  deselectUser={this.deselectUser}\n                                  isUserSelected={this.isUserSelected}\n                                  loadUsers={this.props.loadUsers}\n                        />\n                        :\n                        <div className=\"selectUsers\">\n                            <ul className=\"selectUsers only-selected\">\n                                {this.state.selectedUsers.map((item,index) => (\n                                    <UserItem\n                                        key={index}\n                                        index={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        selectUser={() => {}}\n                                        deselectUser={this.deselectIndex}\n                                        isSelected={true}\n                                    />\n                                ))}\n                            </ul>\n                        </div>\n                    }\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../../global/requests\";\n\n/*\n    the specified members will be added to the chat\n        gcid: groupChat -  id\n        users: the users\n            [\n                {uid:(num),username:(str)}\n                {uid:(num),username:(str)}\n            ]\n */\nexport const addMembers = async(gcid,users) => {\n\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            users: users\n        })\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/members',\n            config\n        );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error adding members\");\n    }\n}\n/*\n    all users who are not in the group\n        gcid: groupChat -  id\n        body: the body of the request\n            {\n                search: a search can be specified,\n                limit: 10,\n                start: the number of users who are already loaded\n            }\n */\nexport const fetchUsersNotInGroup = async(gcid,body) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest(\n        '/user/notInGroup/' + gcid,\n        config\n    );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}\n/*\n    the user leaves the chat\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const leaveChat = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/leave',\n            config\n        );\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error leaving chat\");\n        }\n    }else{\n        throw new Error(\"Error leaving chat\");\n    }\n}\n/*\n    the admin status of the user is removed\n        gcid: groupChat -  id\n    throws error if the user is the only admin\n */\nexport const removeSelfAdmin = async(gcid) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n\n    const response =\n        await makeRequest(\n            '/group/' + gcid + '/removeAdmin',\n            config\n        );\n\n    if(response.ok) {\n\n        const data = await response.json();\n\n        if(data.error){\n            throw new Error(\"Error removing admin\");\n        }\n    }else{\n        throw new Error(\"Error removing admin\");\n    }\n}","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport {ModalHeader, ModalMain} from \"../../../utilComp/Modal\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {addMembers, fetchUsersNotInGroup} from \"./apiCalls\";\n/*\n    props:\n        gcid: id of the groupChat\n */\nexport default function AddUsers(props){\n\n    let history = useHistory();\n\n    const submitUsers = async (selectedUsers) => {\n        /*\n            addMembers call returns nothing\n         */\n        try{\n            await addMembers(props.gcid,selectedUsers);\n            /*\n                if ok, modal is closed\n             */\n            history.goBack();\n        }catch (e){\n            //TODO: error message\n        }\n    };\n\n    const loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        return await fetchUsersNotInGroup(\n            props.gcid,{\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            }\n        )\n    };\n\n    return(\n        <Dummy>\n            <ModalHeader>\n                <h2>\n                    Benutzer hinzufügen\n                </h2>\n            </ModalHeader>\n            <ModalMain>\n                <div className={\"addMembers\"}>\n                    <SelectUsers\n                        onNext={submitUsers}\n                        loadUsers={loadUsers}\n                    />\n                </div>\n            </ModalMain>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\n\nclass UserOptions extends Component {\n\n    isSelfAdmin = () => {\n        return this.props.memberSelf.isAdmin;\n    };\n\n    isMemberSelf(){\n        return this.props.member.uid === this.global.userSelf.uid;\n    };\n\n    removeMemberFromChat = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid,\n                    config\n                );\n        }\n    };\n\n    makeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/giveAdmin',\n                    config\n                );\n\n        }\n    };\n\n    removeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/removeAdmin',\n                    config\n                );\n        }\n    };\n\n    render(){\n\n        const {pathname} = this.props.location;\n\n        return (\n            <ul className=\"userOptions\">\n                <li key={0}>\n                    <Link to={pathname + \"/userInfo/\" + this.props.member.uid}>\n                        zeige {this.props.member.username} an\n                    </Link>\n                </li>\n                <li key={1}>\n                    <Link to={\"/chat/user/\" + this.props.member.uid}>\n                        Nachricht an {this.props.member.username}\n                    </Link>\n                </li>\n                {/*\n                    if the member is admin, he has more options\n                    */\n                    this.isSelfAdmin() && ! this.isMemberSelf() ?\n                        <Dummy>\n                            <li\n                                key={2}\n                                className=\"noLink\"\n                                onClick={this.removeMemberFromChat}\n                            >\n                                aus chat entfernen\n                            </li>\n                            {this.props.member.isAdmin ?\n                                <li\n                                    key={3}\n                                    className=\"noLink\"\n                                    onClick={this.removeMemberAdmin}\n                                >\n                                    admin status entfernen\n                                </li>\n                                :\n                                <li\n                                    key={4}\n                                    className=\"noLink\"\n                                    onClick={this.makeMemberAdmin}\n                                >\n                                    zu admin machen\n                                </li>\n                            }\n                        </Dummy>\n                        : null\n                }\n            </ul>\n        )\n    }\n}\n\nexport default withRouter(UserOptions);","import React from \"react\";\nimport {Link,useLocation} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {leaveChat, removeSelfAdmin} from \"./apiCalls\";\n\nexport default function ChatOptions(props) {\n\n    const {pathname} = useLocation();\n\n    const isSelfAdmin = () => {\n        return props.memberSelf.isAdmin;\n    };\n\n    return(\n        <ul className=\"chatOptions\">\n            {isSelfAdmin() ?\n                <Dummy>\n                    <li key={0} className=\"addUsers\">\n                        <Link to={pathname + \"/addUsers\"}>\n                            Benutzer hinzufügen\n                        </Link>\n                    </li>\n                    <li\n                        key={1}\n                        className=\"removeSelfAdmin noLink\"\n                        onClick={() => {\n                            removeSelfAdmin(props.gcid)\n                                .then(() => {})\n                                .catch(err => {console.log(err)})\n                        }}\n                    >\n                        admin status entfernen\n                    </li>\n                </Dummy>\n                : null}\n            <li\n                key={2}\n                className=\"leaveChat noLink\"\n                onClick={() => {\n                    leaveChat(props.gcid)\n                        .then(() => {})\n                        .catch(err => {console.log(err)})\n                }}\n            >\n                Chat verlassen\n            </li>\n        </ul>\n    )\n}","import React,{Component} from \"react\";\nimport InlineEdit from 'react-ions/lib/components/InlineEdit'\n\nexport default class Edit extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            value: this.props.value\n        }\n    }\n\n    handleEdit = async event => {\n\n        const value = event.target.value;\n\n        this.setState({\n            isEditing: false,\n            value: value\n        });\n\n        await this.props.onSubmit(value);\n    };\n\n    editPressed = () => {\n        this.setState({\n            isEditing: true\n        });\n    };\n\n    render () {\n        return (\n            <div className={this.props.class}>\n                <InlineEdit\n                    name={this.props.name}\n                    value={this.state.value}\n                    isEditing={this.state.isEditing}\n                    changeCallback={this.handleEdit}\n                    optClass={\"input\"}\n                />\n                <i\n                    className=\"fas fa-edit edit\"\n                    onClick={this.editPressed}\n                />\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class DescriptionEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                description: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/description\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"description\"}\n                name={\"editDescription\"}\n                value={this.props.description}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class ChatNameEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                chatName: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/chatName\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"chatName\"}\n                name={\"editChatName\"}\n                value={this.props.chatName}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Dropdown from \"rc-dropdown\";\nimport UserOptions from \"./UserOptions\";\nimport ChatOptions from \"./ChatOptions\";\nimport DescriptionEdit from \"./edit/editDescription\";\nimport ChatNameEdit from \"./edit/editChatName\";\n\nimport'./groupChatInfo.scss';\n\n/*\n    TODO groupchatinfo change socket events\n */\nclass GroupChatInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            data: null\n        }\n    }\n\n    render() {\n\n        if(this.state.error)\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Ein Fehler ist aufgetreten!\n                </div>\n            );\n        const uidSelf = chatSocket.userSelf.uid;\n\n        return(\n            <div className=\"groupChatInfo\">\n                {this.props.data.memberSelf.isAdmin ?\n                    <h1>\n                        <ChatNameEdit\n                            gcid={this.props.gcid}\n                            chatName={this.props.data.chatName}\n                        />\n                    </h1>\n                    :\n                    <div className=\"chatName\">\n                        <h1>\n                            {this.props.data.chatName}\n                        </h1>\n                    </div>\n                }\n                {this.props.data.memberSelf.isAdmin ?\n                    <DescriptionEdit\n                        gcid={this.props.gcid}\n                        description={this.props.data.description}\n                    />\n                    :\n                    <div className=\"description\">\n                        {this.props.data.description}\n                    </div>\n                }\n                <Dropdown\n                    trigger={['click']}\n                    overlay={\n                        <ChatOptions\n                            gcid={this.props.gcid}\n                            memberSelf={this.props.data.memberSelf}\n                        />\n                    }\n                    >\n                    <i\n                        className=\"fas fa-ellipsis-v fa-lg chat-options-btn fa-2x\"\n                        role=\"button\"\n                    />\n                </Dropdown>\n\n                <h4>\n                    {this.props.data.members.length}\n                    &nbsp;Mitglieder:\n                </h4>\n                <ul className=\"userList\">\n                    {this.props.data.members.map((item,index) => (\n                        <li key={index}>\n                            <div className=\"userItem\">\n                            {uidSelf === item.uid ?\n                                <span>Du</span>\n                            :\n                                item.username\n                            }\n                            <div className=\"right\">\n                                {item.isAdmin ?\n                                    <span className=\"user-admin\">\n                                        Admin&nbsp;&nbsp;\n                                    </span>\n                                : null}\n                                <Dropdown\n                                    trigger={['click']}\n                                    overlay={\n                                        <UserOptions\n                                            gcid={this.props.gcid}\n                                            memberSelf={this.props.data.memberSelf}\n                                            member={item}\n                                        />\n                                    }\n                                    animation=\"slide-up\"\n                                    alignPoint\n                                >\n                                    <i\n                                        className=\"fas fa-ellipsis-v fa-lg\"\n                                        role=\"button\"\n                                    />\n                                </Dropdown>\n                            </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default withRouter(GroupChatInfo);","import React from \"react\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport Modal from \"../../../utilComp/Modal\";\nimport AddUsers from \"./AddUsers\";\nimport GroupChatInfo from \"./GroupChatInfo\";\nimport Responsive from \"../../../responsive/Responsive\";\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default function ModalRouterGroupChatInfo(props){\n\n    let { path } = useRouteMatch();\n\n    const groupChatInfo = (\n        <GroupChatInfo\n            gcid={props.gcid}\n            data={props.data}\n        />\n    );\n\n    return(\n        <Dummy>\n            <Responsive displayIn={[\"Mobile\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <AddUsers\n                            gcid={props.gcid}\n                        />\n                    </Route>\n                    <Route path={\"*\"}>\n                        {groupChatInfo}\n                    </Route>\n                </Switch>\n            </Responsive>\n            <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <Modal>\n                                <AddUsers\n                                    gcid={props.gcid}\n                                />\n                        </Modal>\n                    </Route>\n                </Switch>\n                {groupChatInfo}\n            </Responsive>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport ModalRouterGroupChatInfo from \"./groupChatInfo/ModalRouterGroupChatInfo\";\nimport {\n    AddressNotValid,\n    ChatNotExisting,\n    NoAuthorization,\n    NoMemberInPublicChat,\n    GeneralError\n} from \"./chatViewErrorMessages\";\nimport {loadGroupChat} from \"./apiCalls\";\n\nexport const groupChatErrorCode = {\n    none: 0,\n    nan: 1,\n    chatNotExisting: 2,\n    notPartOfChat: 3,\n    private: 4,\n    general: 5\n};\n\nexport const groupChatTabs = {\n    chat: 0,\n    info: 1\n};\n\nexport default class GroupChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gcid: 0,\n            loaded: false,\n            chatData: null,\n            error: groupChatErrorCode.none\n        }\n    }\n\n    loadGroupChatInfo = async(gcid) => {\n\n        try {\n            const response = await loadGroupChat(this.props.gcid);\n\n            if(response.status === 403)\n                return groupChatErrorCode.private;\n\n            else if(response.status === 404)\n                return groupChatErrorCode.chatNotExisting;\n\n            else if (response.ok) {\n\n                let data = await response.json();\n\n                this.setState({\n                    chatData: data\n                });\n\n                if(data.error) {\n\n                    if (data.error === 'not part of chat')\n                        return groupChatErrorCode.notPartOfChat;\n\n                    else\n                        return groupChatErrorCode.general\n\n                }else if(chatSocket.chats.group.getIndex(gcid) !== -1){\n\n                    return groupChatErrorCode.none;\n                }\n            }\n            else {\n                return groupChatErrorCode.general\n            }\n        } catch (err) {\n            return groupChatErrorCode.general\n        }\n    };\n    /*\n        is called after the chatId changed\n     */\n    chatChanged = () => {\n        /*\n            is props.gcid a number?\n         */\n        if(isNaN(this.props.gcid)){\n            this.setState({\n                error: groupChatErrorCode.nan,\n                loaded: true\n            });\n        }else{\n\n            const chatExists = () => {\n\n                const gcid = parseInt(this.props.gcid);\n\n                this.loadGroupChatInfo(gcid)\n                    .then(r => {\n                        if (r === groupChatErrorCode.none) {\n\n                            this.selectGroupChat(gcid);\n                            this.setState({\n                                loaded: true,\n                                error: groupChatErrorCode.none,\n                                gcid: gcid\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\n                                ihcData: {\n                                    name: chatSocket.chats.group.get(gcid).chatName,\n                                    gcid: gcid\n                                }\n                            }).then();\n                        } else {\n                            this.setState({\n                                loaded: true,\n                                error: r\n                            });\n                        }\n                    })\n                    .catch();\n            };\n\n            if (chatSocket.finishedLoading) {\n                chatExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    chatExists();\n                });\n            }\n        }\n    };\n    /*\n        groupChat is selected\n     */\n    selectGroupChat(gcid){\n        /*\n            does the chat exist?\n         */\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\n\n            this.setState({\n                error: groupChatErrorCode.chatNotExisting\n            })\n        } else {\n\n            const chat = chatSocket.chats.group.get(gcid)\n            this.dispatch.selectChat(chat);\n        }\n    }\n\n    componentDidMount() {\n        this.chatChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did gcid change?\n         */\n        if(prevProps.gcid !== this.props.gcid){\n            this.chatChanged();\n\n        }\n    }\n\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if (this.state.error === groupChatErrorCode.nan) {\n                return (\n                    <AddressNotValid/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if (this.state.loaded) {\n\n                switch(this.state.error){\n\n                    case groupChatErrorCode.none:\n\n                        switch(this.props.tab){\n                            case(groupChatTabs.chat):\n                                return (\n                                    <ChatContainer\n                                        chatType={this.global.currentChat.type}\n                                        chatId={this.global.currentChat.id}\n                                    />\n                                );\n\n                            case(groupChatTabs.info):\n                                return(\n                                    <ModalRouterGroupChatInfo\n                                        gcid={this.state.gcid}\n                                        data={this.state.chatData}\n                                    />\n                                );\n\n                            default:\n                                return null;\n                        }\n\n                    case groupChatErrorCode.notPartOfChat:\n                        return (\n                            <NoMemberInPublicChat/>\n                        );\n\n                    case groupChatErrorCode.private:\n                        return (\n                            <NoAuthorization/>\n                        );\n\n                    case groupChatErrorCode.chatNotExisting:\n                        return (\n                            <ChatNotExisting/>\n                        );\n\n                    case groupChatErrorCode.general:\n                        return(\n                            <GeneralError/>\n                        );\n\n                    default:\n                        return null;\n                }\n            }\n        };\n\n        return (\n            <div className=\"h-100\">\n                {renderLoader()}\n                {renderChat()}\n            </div>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nclass UserItem extends Component{\n\n    elementClicked = event => {\n\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\n    };\n\n    render() {\n        return(\n            <li>\n                <Link to={\"/chat/user/\" + this.props.uid}\n                      onClick={this.elementClicked}\n                      replace={true}\n                >\n                {this.props.username}\n                </Link>\n            </li>\n        )\n    }\n}\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport UserItem from \"./UserItem\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './selectChat.scss';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n/*\n    props:\n        showSearchBar: boolean\n            if false: searchValue comes as prop\n        searchValue\n        loadChats: function(searchValue,numAlreadyLoaded)\n */\nexport default class SelectChat extends Component{\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            showOptions: false,\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            /*\n                are there items left?\n             */\n            hasMore: true\n        };\n    }\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = (searchValue) => {\n\n        this.setState({\n            searchValue: searchValue,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more chats are loaded\n     */\n    loadChats = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const response = await this.props.loadChats(\n                    searchValue,\n                    length\n                );\n\n                if (response.ok) {\n                    //return json\n                    let data = await response.json();\n\n                    if (data.length === 0) {\n                        this.setState({\n                            hasMore: false\n                        })\n                    } else {\n                        this.setState(state => ({\n                            searchResult: state.searchResult.concat(data)\n                        }));\n                    }\n                    this.setState({\n                        error: errorCode.none\n                    });\n                } else {\n                    this.setState({\n                        error: errorCode.error\n                    });\n                }\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            is searchBar is not shown,\n                it is checked if searchValue has changed\n         */\n        if(!this.props.showSearchBar){\n            if(this.props.searchValue !== prevProps.searchValue){\n                this.searchChanged(this.props.searchValue);\n            }\n        }\n    }\n\n    render() {\n\n        if(this.state.error === errorCode.error){\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\" key={0}>\n                    Ein Fehler ist aufgetreten!\n                </div>\n            )\n        }\n            return (\n                <Dummy>\n                    {/*\n                        if showSearchBar is true, it gets shown\n                         */\n                        this.props.showSearchBar ?\n                            <div className=\"user-top\">\n                                <div className=\"searchUser\">\n                                    <input type=\"text\"\n                                           name=\"newChat-searchUser\"\n                                           className=\"form-control\"\n                                           placeholder=\"Benutzer suchen\"\n                                           onChange={(event) => {\n                                               this.searchChanged()\n                                           }}\n                                    />\n                                </div>\n                            </div>\n                            : null\n                    }\n                    <div\n                        className=\"selectChat\"\n                        ref={ref => this.scrollParentRef = ref}\n                    >\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={this.loadChats}\n                            hasMore={this.state.hasMore}\n                            loader={\n                                <div className=\"loader\" key={-1}>\n                                    <div\n                                        className=\"spinner-border text-secondary\"\n                                        role=\"status\"\n                                    >\n                                        <span className=\"sr-only\">\n                                            Loading...\n                                        </span>\n                                    </div>\n                                </div>\n                            }\n                            useWindow={false}\n                            getScrollParent={() => this.scrollParentRef}\n                            >\n                            <ul\n                                className=\"selectChat\">\n                                {this.state.searchResult.map((item, index) => (\n                                    <UserItem\n                                        key={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        hide={this.props.hide}\n                                    />\n                                ))}\n                                {this.state.searchResult.length === 0 ?\n                                    <div key={-1} className=\"nothingFound\">\n                                        Nichts gefunden!\n                                    </div>\n                                    :\n                                    null\n                                }\n                            </ul>\n                        </InfiniteScroll>\n                    </div>\n                </Dummy>\n            );\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport async function requestUsersNoChat(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    /*\n        response is returned\n     */\n    return await makeRequest('/user/noChat', config);\n}\nexport async function createGroupChat(body){\n    const config = {\n        method: 'PUT',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    return await makeRequest('/group/', config);\n}\nexport async function fetchUsers(body){\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n    const response = await makeRequest('/user/', config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching users\");\n    }\n}","import React,{Component} from \"react\";\nimport {tabs} from \"../NewChat\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport SelectChat from \"../../selectChat/SelectChat\";\nimport Dropdown from 'rc-dropdown';\n\nimport 'rc-dropdown/assets/index.css';\n\nimport './chooseUser.scss';\nimport {requestUsersNoChat} from \"../apiCalls\";\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class ChooseUser extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            /*\n                the value of the search input\n             */\n            searchValue: ''\n        };\n    }\n    /*\n        when new group gets clicked\n     */\n    newGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.newGroup);\n    };\n    /*\n        when join group is clicked\n     */\n    joinGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.chooseGroup);\n    };\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = event => {\n        const searchValue = event.target.value;\n\n        const searchValid = true;\n\n        this.setState({\n            searchValue: searchValue,\n            searchValid: searchValid\n        });\n    };\n\n    loadChats = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        /*\n            response is returned\n         */\n        return await requestUsersNoChat({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        });\n    };\n\n    render() {\n\n        const options = (\n            <div className=\"options\">\n                <ul>\n                    <li onClick={this.newGroupClick}>\n                        neue Gruppe\n                    </li>\n                    <li onClick={this.joinGroupClick}>\n                        einer Gruppe beitreten\n                    </li>\n                </ul>\n            </div>\n        );\n\n        return(\n            <Dummy>\n                <div className=\"user-top\">\n                    <div className=\"searchUser\">\n                        <input type=\"text\"\n                               name=\"newChat-searchUser\"\n                               className=\"form-control\"\n                               placeholder=\"Benutzer suchen\"\n                               onChange={this.searchChanged}\n                        />\n                    </div>\n                    <div className=\"user-more\">\n                        <Dropdown\n                            trigger={['click']}\n                            overlay={options}\n                            animation=\"slide-up\"\n                            alignPoint\n                        >\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\n                               role=\"button\"\n                            />\n                        </Dropdown>\n                    </div>\n                </div>\n                <SelectChat\n                    showSearchBar={false}\n                    searchValue={this.state.searchValue}\n                    loadChats={this.loadChats}\n                />\n            </Dummy>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/placeholder.3c40b139.png\";","import React,{Component} from \"react\";\n\nimport './groupInfoForm.scss';\nimport placeholder from '../../../img/placeholder.png';\n\nexport default class GroupInfoForm extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            groupName: '',\n            description: '',\n            isPublic: false\n        }\n    }\n\n    groupNameChanged = event => {\n        this.setState({\n            groupName: event.target.value\n        })\n    };\n\n    descriptionChanged = event => {\n        this.setState({\n            description: event.target.value\n        })\n    };\n\n    isPublicChanged = () => {\n        this.setState(state => ({\n           isPublic: !state.isPublic\n        }));\n    };\n\n    formSubmitted = event => {\n\n        event.preventDefault();\n\n        if(this.state.groupName !== '')\n            this.props.submitGroup({\n                name: this.state.groupName,\n                description: this.state.description,\n                isPublic: this.state.isPublic\n            });\n    };\n\n    render() {\n\n        return(\n            <div className=\"groupInfoForm\">\n                <form onSubmit={this.formSubmitted}>\n                    <img\n                        style={{\n                            display: 'none'\n                        }}\n                        id=\"groupImgInput1\"\n                        src={placeholder}\n                        alt=\"Placeholder\"\n                    />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleFormControlInput1\">\n                            Gruppenname\n                        </label>\n                        <input type=\"text\"\n                               name=\"groupName\"\n                               className=\"form-control\"\n                               id=\"input-groupName\"\n                               placeholder=\"Gruppenname\"\n                               value={this.state.name}\n                               onChange={this.groupNameChanged}\n                               minLength={1}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label\n                            htmlFor=\"description1\"\n                        >\n                            Beschreibung\n                        </label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"description1\"\n                            rows=\"3\"\n                            value={this.state.description}\n                            onChange={this.descriptionChanged}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"check-container\">\n                            öffentlicher chat\n                            <input\n                                type=\"checkbox\"\n                                checked={this.state.isPublic}\n                                onChange={this.isPublicChanged}\n                            />\n                            <span className=\"checkmark\">\n                                <i className=\"fas fa-check\" />\n                            </span>\n                        </label>\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            type=\"submit\"\n                            className=\"float-right btn btn-primary m-3\"\n                        >\n                            Gruppe erstellen\n                        </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport GroupInfoForm from \"./GroupInfoForm\";\nimport {createGroupChat, fetchUsers} from \"../apiCalls\";\n\nconst tabs = {\n    selectUsers: 0,\n    enterChatInfo: 1\n};\n\nclass NewGroup extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.selectUsers,\n            selectedUsers: []\n        }\n    }\n\n    showEnterChatInfo = selectedUsers => {\n\n        this.setState({\n            currentTab: tabs.enterChatInfo,\n            selectedUsers: selectedUsers\n        });\n    };\n\n    submitGroup = data => {\n\n        const users = new Array(this.state.selectedUsers.length);\n        for(let i=0;i<this.state.selectedUsers.length;i++){\n            users[i] = {\n                uid: this.state.selectedUsers[i].uid,\n                username: this.state.selectedUsers[i].username,\n                isAdmin: false\n            };\n        }\n\n        this.createGroupChat(data,users).then(r => {});\n    };\n\n    createGroupChat = async (data,users) => {\n        try {\n            const response = await createGroupChat({\n                data: data,\n                users: users\n            });\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok)\n                this.props.history.goBack();\n\n        }catch(error){\n\n        }\n    };\n\n    loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n        /*\n            response is returned\n         */\n        return await fetchUsers({\n            search: searchValue,\n            limit: 10,\n            start: numAlreadyLoaded\n        })\n    };\n\n    render() {\n\n        switch(this.state.currentTab){\n\n            case tabs.selectUsers:\n                return (\n                    <SelectUsers\n                        onNext={this.showEnterChatInfo}\n                        loadUsers={this.loadUsers}\n                    />\n                );\n\n            case tabs.enterChatInfo:\n                return(\n                    <GroupInfoForm\n                        submitGroup={this.submitGroup}\n                    />\n                );\n\n            default:\n                return null;\n        }\n    }\n}\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\nimport ChooseUser from \"./chooseUser/ChooseUser\";\nimport NewGroup from \"./newGroup/NewGroup\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\n\nimport './newChat.scss';\n\nexport const tabs = {\n    chooseUser: 0,\n    newGroup: 1,\n    chooseGroup: 2\n};\n\nexport default class NewChat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.chooseUser\n        }\n    }\n\n    setCurrentTab = newTab => {\n        this.setState({\n            currentTab: newTab\n        });\n    };\n\n    render() {\n\n        const router = () => {\n\n            switch (this.state.currentTab) {\n\n                case tabs.chooseUser:{\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n\n                }\n\n                case tabs.newGroup:{\n                    return(\n                        <NewGroup />\n                    );\n                }\n\n                case tabs.chooseGroup:{\n                    return(\n                        <div>\n                            <h4>chooseGroup</h4>\n                        </div>\n                    );\n                }\n\n\n                default: {\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n                }\n            }\n        };\n\n        const getHeader = () => {\n\n            switch(this.state.currentTab){\n\n                case tabs.chooseUser:\n                    return 'Neuer Chat';\n\n                case tabs.newGroup:\n                    return 'Neue Gruppe';\n\n                case tabs.chooseGroup:\n                    return 'Gruppe auswählen';\n\n                default:\n                    return 'Neuer Chat';\n\n            }\n        };\n\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>{getHeader()}</h1>\n                </ModalHeader>\n                <ModalMain>\n                    <div className=\"newChat\">\n                        {router()}\n                    </div>\n                </ModalMain>\n            </Dummy>\n        )\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport const fetchUserInfo = async (uid) => {\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await makeRequest('/user/' + uid, config);\n\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error fetching UserInfo\");\n    }\n}","import React, {Component} from \"react\";\nimport {Link} from 'react-router-dom';\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {fetchUserInfo} from \"./userInfoApiCalls\";\n\nexport const errorCode = {\n    none: 0,\n    isSelf: 1,\n    //not a number\n    nan: 2,\n    notExisting: 3,\n    blocked: 4,\n    defaultError: 5\n};\n\nexport default class UserInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: errorCode.none,\n            userInfo: null\n        }\n    }\n\n    render() {\n        /*\n            if not already loaded, show nothing\n         */\n        if(!this.state.loaded){\n            return null;\n        }\n        /*\n            if the user self is requested\n         */\n        else if(this.state.error === errorCode.isSelf){\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            Du\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        xx\n                    </ModalMain>\n                </Dummy>\n            )\n        /*\n            if there is a error, show a generic error message\n         */\n        }else if(this.state.error !== errorCode.none){\n            return(\n                <div>Error!</div>\n            )\n        /*\n            no error, show the userInfo\n         */\n        }else{\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            {this.state.userInfo.username}\n                            &nbsp;\n                            <Link to={\"/chat/user/\" + this.state.uid}>\n                                <i className=\"far fa-comment-alt\" />\n                            </Link>\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        <h2>Gruppen</h2>\n                    </ModalMain>\n                </Dummy>\n            )\n        }\n    }\n\n    setUser = async() => {\n\n        if(isNaN(this.props.uid)){\n            this.setState({\n                error: errorCode.nan\n            });\n        }else{\n            const uid = parseInt(this.props.uid);\n            this.setState({\n                uid: uid,\n                error: errorCode.none,\n                loaded: false\n            });\n            try {\n                const data = await fetchUserInfo(uid)\n\n                if (data.uidSelf === uid) {\n                    this.setState({\n                        error: errorCode.isSelf,\n                        loaded: true\n                    });\n                }else if(!data.userExists){\n                    this.setState({\n                        error: errorCode.notExisting,\n                        loaded: true\n                    });\n                }else if(data.blocked){\n                    this.setState({\n                        error: errorCode.blocked,\n                        loaded: true\n                    });\n                }else {\n                    this.setState({\n                        userInfo: data,\n                        loaded: true\n                    });\n                }\n            }catch(err){\n                this.setState({\n                    error: errorCode.defaultError,\n                    loaded: true\n                });\n            }\n        }\n    };\n\n    async componentDidMount() {\n        try {\n            await this.setUser();\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n\n    async componentDidUpdate(prevProps, prevState, snapshot) {\n        try{\n            /*\n                check if uid changed\n             */\n            if(prevProps.uid !== this.props.uid){\n                await this.setUser();\n            }\n        }catch(err){\n            this.setState({\n                error: 4,\n                loaded: true\n            });\n        }\n    }\n}","import {makeRequest} from \"../../global/requests\";\n\nexport const getUserSelf = async () => {\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n        }\n    };\n\n    const response =\n        await makeRequest(\n            '/user/self',\n            config\n        );\n    if(response.ok){\n        return await response.json();\n    }else{\n        throw new Error(\"Error requesting user info!\");\n    }\n}\n\nexport const setEmail = async (body) => {\n\n    const config = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body)\n    };\n\n    const response =  await makeRequest(\n        '/user/setEmail',\n        config\n    );\n    return response;\n}","import React,{Component} from \"react\";\nimport \"./EditableLabel.scss\";\n\nexport default class EditableLabel extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            value: this.props.value\n        }\n    }\n\n    startEdit = () => {\n        this.setState({\n            isEditing: true\n        });\n    }\n\n    cancelEdit = () => {\n        this.setState({\n            isEditing: false,\n            value: this.props.value\n        });\n    }\n\n    submitEdit = event => {\n        event.preventDefault();\n        this.setState({\n            isEditing: false\n        });\n        if(typeof this.props.onChange === \"function\")\n            this.props.onChange(this.state.value)\n    }\n\n    render() {\n        return (\n            <span className={\"label-edit \" + this.props.className}>\n                {this.state.isEditing ?\n                    <form\n                        onSubmit={this.submitEdit}\n                    >\n                        <input\n                            type=\"text\"\n                            value={this.state.value}\n                            style={{width: this.state.value.length + \"ch\"}}\n                            onChange={(event) => {\n                                this.setState({\n                                    value: event.target.value\n                                })\n                            }}\n                        />\n                        &nbsp;\n                        <i\n                            className=\"fas fa-check fa-lg\"\n                            onClick={this.submitEdit}\n                        />\n                        &nbsp;\n                        <i\n                            className=\"fas fa-times fa-lg\"\n                            onClick={this.cancelEdit}\n                        />\n                    </form>\n                    :\n\n                    <span\n                        onDoubleClick={this.startEdit}\n                    >\n                        {this.props.children}\n                        &nbsp;\n                        <i\n                            className=\"fas fa-pen\"\n                            onClick={this.startEdit}\n                        />\n                    </span>\n                }\n            </span>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {ModalHeader, ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {Link} from \"react-router-dom\";\n\nimport \"./Settings.scss\";\nimport {getUserSelf, setEmail} from \"./apiCalls\";\nimport EditableLabel from \"../../util/EditableLabel\";\n\nexport default class Settings extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state  = {\n            userDataSelf: null,\n            loaded: false,\n            error: false,\n            isEditing: false,\n            emailChangeRequested: false,\n            setEmailError: false,\n            setEmailErrorMessage: ''\n        }\n    }\n\n    changeEmail = value => {\n        //did the mail address change?\n        if(this.state.userDataSelf.email !== value)\n            setEmail({\n                email: value\n            }).then(async response => {\n                if(response.status === 200) {\n                    const data = await response.json();\n                    // check email taken\n                    if(data.emailTaken){\n                        console.log('email taken')\n                        this.setState({\n                            emailChangeRequested: false,\n                            setEmailError: true,\n                            setEmailErrorMessage: 'E-Mail wird bereits verwendet!'\n                        });\n                    }else{\n                        this.setState({\n                            setEmailError: false,\n                            emailChangeRequested: true\n                        });\n                    }\n                }else {\n                    this.setState({\n                        setEmailError: true,\n                        setEmailErrorMessage: 'Fehler beim Versenden der E-Mail!',\n                        emailChangeRequested: false\n                    })\n                }\n            }).catch(err => {\n                console.log(err);\n            });\n    }\n\n    render() {\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>Einstellungen</h1>\n                </ModalHeader>\n                <ModalMain>\n                    {this.state.loaded ?\n                        <div className={\"settings\"}>\n                            <span className=\"settings-header\">\n                                E-Mail Addresse: <br/>\n                            </span>\n                            <EditableLabel\n                                className = \"email\"\n                                value = {this.state.userDataSelf.email}\n                                onChange = {this.changeEmail}\n                            >\n                                {this.state.userDataSelf.email === '' ?\n                                    <Dummy>\n                                        Noch keine E-Mail Addresse!\n                                    </Dummy>\n                                    :\n                                    <Dummy>\n                                        {this.state.userDataSelf.email}\n                                    </Dummy>\n                                }\n                            </EditableLabel>\n                            {this.state.emailChangeRequested ?\n                                <Dummy>\n                                    &nbsp;\n                                    <span className=\"emailChanged\">Mail mit Verifizierungslink wurde versendet!</span>\n                                </Dummy>\n                                :\n                                null\n                            }\n                            {this.state.setEmailError ?\n                                <Dummy>\n                                    &nbsp;\n                                    <span className=\"set-email-error\">\n                                        {this.state.setEmailErrorMessage}\n                                    </span>\n                                </Dummy>\n                                :\n                                null\n                            }\n                            <div className={\"settings-about\"}>\n                                <Link to={\"/about\"}>über diese Seite</Link>\n                            </div>\n                        </div>\n                    : (!this.state.error ?\n                        <span>\n                            laden...\n                        </span>\n                    : <span>\n                            ein Fehler ist aufgetreten!\n                    </span>)}\n                </ModalMain>\n            </Dummy>\n        )\n    }\n\n    async componentDidMount() {\n        try {\n            const userDataSelf = await getUserSelf();\n            this.setState({\n                loaded: true,\n                userDataSelf: userDataSelf\n            })\n        }catch (e) {\n            this.setState({error: true})\n        }\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport Modal from \"../utilComp/Modal\";\nimport NewChat from \"./newChat/NewChat\";\nimport Dummy from \"../utilComp/Dummy\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterBigScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                {props.children}\n                <Modal>\n                    <NewChat />\n                </Modal>\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <Dummy>\n                        {props.children}\n                        <Modal>\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\n                        </Modal>\n                    </Dummy>\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                {props.children}\n                <Modal>\n                    <Settings/>\n                </Modal>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\n\nexport default function GridBigScreens(props){\n\n    const { path } = useRouteMatch();\n\n    return(\n        <div className=\"main-container\">\n            <div className=\"mc-left\">\n\n                <ChatList />\n            </div>\n            <div className=\"mc-right\">\n\n                <Switch>\n                    <Route path={`${path}/user/:uid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/group/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/groupInfo/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.info}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={path}>\n                        <ModalRouterBigScreens>\n                            <h1>noch kein chat ausgewählt</h1>\n                        </ModalRouterBigScreens>\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    )\n}\n","import React,{Component} from \"react\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nimport './typeMessageContainer.scss';\n\nexport default class TypeMsgContainer extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersTyping: []\n        };\n    }\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        this.setState({\n            usersTyping: chat.getUsersTyping()\n        });\n    };\n\n    render() {\n\n        return(\n            <div className=\"typeMsg-container\">\n                {this.state.usersTyping.map((user,index) => (\n                    <div key={index} className=\"typeMsg\">\n                        {user.username + \" schreibt...\"}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn ja, werden events neu initialisiert\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n        }\n    }\n\n    componentWillUnmount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport NewChat from \"./newChat/NewChat\";\nimport UserInfo from \"./userInfo/UserInfo\";\nimport Settings from \"./settings/Settings\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                <NewChat />\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                <Settings/>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React,{useGlobal} from \"reactn\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\n\nexport default function RouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n    const [global,setGlobal] = useGlobal();\n\n    const renderTypeMsgContainer = () => {\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\n            return(\n                <TypeMsgContainer\n                    chatType={global.currentChat.type}\n                    chatId={global.currentChat.id}\n                />\n            )\n        }\n        return null;\n    };\n\n    return(\n            <Switch>\n                <Route path={`${path}/user/:uid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <div className=\"main-container\">\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </div>\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                }>\n                </Route>\n                <Route path={`${path}/group/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <div className=\"main-container\">\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </div>\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={`${path}/groupInfo/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.info}\n                            />\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={path}>\n                    <ModalRouterSmallScreens>\n                        <div className=\"chat-list-outer-small\">\n                            <ChatList/>\n                        </div>\n                    </ModalRouterSmallScreens>\n                </Route>\n                <Route path = \"*\">\n                    <h3>Not found!</h3>\n                </Route>\n            </Switch>\n    )\n\n}","import React,{Component} from \"react\";\nimport Header from \"./Header/Header\";\nimport Responsive from \"../responsive/Responsive\";\nimport GridBigScreens from \"./GridBigScreens\";\nimport RouterSmallScreens from \"./RouterSmallScreens\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nimport './Grid.scss';\n\nexport default class Chat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                which modal is currently open\n                    0: none\n             */\n            modal: 0,\n            /*\n                info about the currently open modal\n             */\n            modalInfo: null,\n            /*\n                is shown at the user-icon\n             */\n            notifications: 0\n        };\n    }\n\n    componentDidMount() {\n        /*\n            if chatsocket is undefined, it gets initialized\n         */\n        if (!chatSocket.initCalled) {\n            chatSocket.init().then(r => {});\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"h-100\">\n\n                <Header/>\n\n                <Responsive displayIn={[\"Mobile\"]}>\n\n                    <RouterSmallScreens />\n                </Responsive>\n\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n\n                    <GridBigScreens/>\n                </Responsive>\n\n            </div>\n        );\n    }\n}","import React from \"react\";\n\nimport \"./About.scss\";\n\nexport default function About(){\n    return(\n        <div className={\"about\"}>\n            <h2>Über diese Seite</h2>\n            <h4>Erstellt von:</h4>\n            Stefan Schlaghuber<br/>\n            2002 Großmugl<br/>\n            stefan.schlaghuber@gmail.com<br/>\n        </div>\n    )\n}","import {makeRequest} from \"./requests\";\n\nexport async function reqUserSelf(tokens){\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    return await makeRequest(\n        '/user/self',\n        config,\n        tokens\n    );\n}","import {addReducer} from 'reactn';\nimport {fetchData} from \"./globalData\";\nimport {resetChatSocket} from \"../chatData/chatSocket\";\nimport {reqUserSelf} from \"./apiCalls\";\n\nexport function authTokens(){\n\n    addReducer('deleteAuthTokens',(global,dispatch) => {\n\n        localStorage.removeItem(\"authTokens\");\n        /*\n            TODO: without reload\n         */\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        dispatch.deleteUserSelf();\n        dispatch.resetGlobal();\n        resetChatSocket();\n\n        return {\n            loaded: true,\n            authTokens: undefined\n        };\n    });\n\n    addReducer('initAuthTokens',async(global,dispatch,existingTokens) => {\n\n        try {\n            /*\n                util data is fetched from the server\n             */\n            await fetchData();\n\n            const response = await reqUserSelf(existingTokens);\n            /*\n                not authenticated\n                    --> token is deleted\n                    --> login page\n             */\n            if (response.status === 403) {\n                localStorage.removeItem(\"authTokens\");\n                return {\n                    loaded: true,\n                    authTokens: undefined\n                };\n            }\n            /*\n                userSelf is updated\n             */\n            else {\n                const data = await response.json();\n\n                const {uid, username} = data;\n                dispatch.setUserSelf(uid, username);\n\n                return ({\n                    loaded: true,\n                    authTokens: existingTokens\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            return({\n                loaded: false\n            })\n        }\n    });\n\n    addReducer('setAuthTokens',(global,dispatch,tokens) => {\n\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n\n        return({\n            loaded: true,\n            authTokens: tokens\n        });\n    });\n}","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {isVerificationCodeValid, setPassword} from \"./apiCalls\";\nimport {ErrorMsg, SuccessMsg} from \"./MsgBox\";\nimport TogglePassword from \"./TogglePassword\";\nimport BackToLogin from \"./BackToLogin\";\n\nexport default class ResetPassword extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            linkValid: true,\n            error: false,\n            errorMessage: '',\n            password: '',\n            passwordRepeat: '',\n            passwordResetSuccess: false\n        };\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const valConstraints = {\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'Passwort muss mindestens 8 Zeichen lang sein',\n                    maximum: 50,\n                    tooLong: 'Passwort darf höchstens 50 Zeichen lang sein'\n                }\n            }\n        };\n        /*\n            validate\n         */\n        const valResult = validate({\n            password: this.state.password,\n            passwordRepeat: this.state.passwordRepeat\n        },valConstraints);\n\n        if(typeof(valResult) != \"undefined\") {\n\n            let errorMessage;\n\n            if (typeof (valResult.password) != \"undefined\")\n                errorMessage = valResult.password[0];\n            else if (typeof (valResult.passwordRepeat) != \"undefined\")\n                errorMessage = \"Passwörter stimmen nicht überein!\"\n            errorMessage = errorMessage.replace(\"Username \",\"\").replace(\"Password \",\"\");\n\n            this.setState({\n                error: true,\n                errorMessage: errorMessage\n            });\n        }else {\n\n            const {password} = this.state;\n\n            setPassword(this.props.verificationCode, password)\n                .then(response => {\n                    if (response.status === 200)\n                        this.setState({\n                            error: false,\n                            passwordResetSuccess: true\n                        });\n                    else if(response.status === 403)\n                        this.setState({\n                            error: true,\n                            errorMessage: 'Fehler: Dieser Link ist ungültig!'\n                        })\n                    else\n                        this.setState({\n                            error: true,\n                            errorMessage: 'ein Fehler ist aufgetreten'\n                        });\n                })\n                .catch(err => {\n                    this.setState({\n                        error: true,\n                        errorMessage: 'ein Fehler ist aufgetreten'\n                    });\n                });\n        }\n    }\n    errorMessage = () => {\n        if(this.state.error)\n            return (\n                <ErrorMsg>\n                    {this.state.errorMessage}\n                </ErrorMsg>\n            )\n    };\n    successMessage = () => {\n        if(this.state.passwordResetSuccess)\n            return (\n                <SuccessMsg>\n                    Passwort erfolgreich zurückgesetzt!\n                </SuccessMsg>\n            )\n    }\n    componentDidMount = () => {\n        isVerificationCodeValid(this.props.verificationCode)\n            .then(response => {\n                if(response.status !== 200)\n                    this.setState({\n                        linkValid: false\n                    })\n            })\n            .catch(err => {\n                this.setState({\n                    linkValid: false\n                })\n            });\n    }\n    render() {\n        if(this.state.linkValid)\n            return (\n                <div className=\"h-100\" style={{display: \"flex\"}}>\n                    <div className=\"col-sm-12 my-auto\">\n                        <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                            <BackToLogin/>\n                            <h1>neues Passwort eingeben</h1>\n                            {this.errorMessage()}\n                            <form onSubmit={this.submitHandler}>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Passwort:</label>\n                                    <TogglePassword\n                                        name=\"password\"\n                                        className=\"form-control\"\n                                        placeholder=\"Passwort eingeben\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"passwordRepeat\">Passwort wiederholen:</label>\n                                    <TogglePassword\n                                        name=\"passwordRepeat\"\n                                        className=\"form-control\"\n                                        placeholder=\"Passwort eingeben\"\n                                        onChange={this.changeHandler}\n                                    />\n                                </div>\n                                {this.successMessage()}\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\"\n                                    value=\"Passwort zurücksetzen\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            );\n        else\n            return (\n                <ErrorMsg>\n                    Ungültiger Link!\n                </ErrorMsg>\n            )\n    }\n}","import React, {useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport VerifyEmail from \"./Auth/VerifyEmail\";\nimport ForgotPassword from \"./Auth/ForgotPassword\";\nimport PrivateRoute from \"./utilComp/PrivateRoute\";\nimport Chat from \"./Home/Home\";\nimport About from \"./About/About\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\nimport ResetPassword from \"./Auth/ResetPassword\";\n\ninitGlobal();\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"authTokens\"));\n        dispatch.initAuthTokens(existingTokens);\n    },[]);\n\n    return (\n        <Router>\n            <Switch>\n                <PrivateRoute path=\"/chat\" component={Chat}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/register\" component={Register}/>\n                <Route path={\"/verifyEmail/:code\"} render={\n                    routeProps => (\n                        <VerifyEmail verificationCode={routeProps.match.params.code}/>\n                    )\n                } />\n                <Route exact path=\"/forgotPassword\" component={ForgotPassword}/>\n                <Route path={\"/resetPassword/:code\"} render={\n                    routeProps => (\n                        <ResetPassword verificationCode={routeProps.match.params.code}/>\n                    )\n                } />\n                <Route path={\"/about\"}>\n                    <About/>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to={\"/chat\"}/>\n                </Route>\n                <Route path=\"*\">\n                    <NoMatch/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\nimport {initChats} from \"./initChats\";\nimport {initChatReducers} from \"./chats\";\nimport {authTokens} from \"./authTokens\";\n\nexport function initGlobal(){\n\n    setGlobal({\n        /*\n            is the page ready to be shown?\n         */\n        loaded: false,\n        /*\n            the authentication token\n         */\n        authTokens: undefined,\n        /*\n            info about the user self\n         */\n        userSelf: {},\n        /*\n            what info should be shown at the left center of the header?\n         */\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        /*\n            the chat that is currently selected\n         */\n        currentChat: {\n            type: '',\n            id: 0,\n            /*\n                unread messages inside the currentChat\n             */\n            newMessages: 0,\n            /*\n                the messages in the currentChat, displayed in chatContainer\n             */\n            messages: []\n        },\n        /*\n            the shown tempChat\n         */\n        tempChat: null,\n        /*\n            all chats of the user are stored here\n         */\n        chats: [],\n        /*\n            number of chats with new messages\n         */\n        newMessages: 0\n        /*\n            TODO: notifications\n         */\n    });\n\n    initChats();\n\n    /*\n        the userSelf gets set\n     */\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\n\n        return {\n            userSelf: {\n                uid: uid,\n                username: username\n            }\n        }\n    });\n    /*\n        userSelf is deleted\n     */\n    addReducer('deleteUserSelf',(global,dispatch) => {\n\n       return {\n           userSelf: {}\n       }\n    });\n    /*\n        // eslint-disable-next-line no-unused-vars\n        global gets reseted\n     */\n    addReducer('resetGlobal',(global,dispatch) => ({\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        currentChat: {\n            type: '',\n            id: 0,\n            newMessages: 0,\n            messages: []\n        },\n        tempChat: null,\n        chats: [],\n        newMessages: 0\n    }));\n    /*\n        chat reducers are initialized\n     */\n    initChatReducers();\n    /*\n        authTokens reducers are initialized\n     */\n    authTokens();\n}","import chatSocket from \"../chatData/chatSocket\";\nimport {setGlobal} from \"reactn\";\n\nexport function initChats(){\n\n    function chatsLoaded(chats){\n        setGlobal({\n            chats: chats\n        });\n    }\n    /*\n       chats get initialized\n       is loading of chats already finished?\n           --> chatArray gets requested immediately\n    */\n    if(chatSocket.finishedLoading){\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\n        /*\n            otherwise --> event handler that gets triggered when loading finished\n         */\n    }else{\n        chatSocket.event.on('chats loaded',chatsLoaded);\n    }\n}","import {addReducer} from \"reactn\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nexport function initChatReducers(){\n\n    /*\n        is the chat the current chat?\n     */\n    function isSelected(global,chat){\n\n        const currentChat = global.currentChat;\n        return currentChat.type === chat.type\n            && currentChat.id === chat.id;\n    }\n    /*\n        index of the chat is searched\n     */\n    function findIndex(global,chat){\n\n        return global.chats.findIndex(\n            element => (\n                element.id === chat.id\n                && element.type === chat.type)\n        );\n    }\n    /*\n        is called when there is a new message\n     */\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1){\n            /*\n                is the chat selected?\n             */\n            if(isSelected(global,chat)) {\n                /*\n                    chat is selected\n                        latestMessageObject is updated\n                        newMessage counter is set to 0\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                chatObject.unreadMessages = 0;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n                /*\n                    message is added to messages in currentChat\n                 */\n                const currentChat = {\n                    ...global.currentChat,\n                    messages: global.currentChat.messages.concat(message),\n                    newMessages: global.currentChat.newMessages + 1\n                };\n                return {\n                    chats: chatsClone,\n                    currentChat: currentChat\n                };\n            }else{\n                /*\n                    chat is not selected\n                        latestMessageObject is updated\n                        newMessage counter gets incremented\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                /*\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\n                 */\n                let newMessages = global.newMessages;\n                if(chatObject.unreadMessages === 0){\n                    newMessages++;\n                }\n\n                chatObject.unreadMessages = unreadMessages + 1;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n\n                return {\n                    chats: chatsClone,\n                    newMessages: newMessages\n                };\n            }\n        }\n    });\n    /*\n        gets called out of changeCurrentChat in chatSocket\n     */\n    addReducer('selectChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1) {\n            /*\n                chats is cloned\n             */\n            const chatsClone = global.chats.splice(0);\n            const item = chatsClone[index];\n            /*\n                if there where unread messages, newMessages counter is decremented by 1\n             */\n            let newMessages = global.newMessages;\n            if(item.unreadMessages > 0){\n                newMessages--;\n            }\n            /*\n                unreadMessages is set to 0\n             */\n            item.unreadMessages = 0;\n            chatsClone[index] = item;\n            /*\n                change is emitted to server\n             */\n            chatSocket.socket.emit('change chat', {\n                type: chat.type,\n                id: chat.id\n            });\n\n            return {\n                currentChat: {\n                    type: chat.type,\n                    id: chat.id,\n                    messages: chat.getMessages(),\n                    newMessages: 0\n                },\n                chats: chatsClone,\n                tempChat: null,\n                newMessages: newMessages\n            }\n        }\n    });\n    /*\n        is called when no chat should be selected\n     */\n    addReducer('selectNoChat',(global,dispatch) => {\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            currentChat: {\n                type: '',\n                id: 0,\n                messages: []\n            },\n        }\n    });\n    /*\n        loaded messages are added\n     */\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\n\n        return {\n            currentChat: {\n                ...global.currentChat,\n                messages: messages ?\n                    messages.concat(global.currentChat.messages)\n                    : global.currentChat.messages\n            }\n        };\n    });\n    /*\n        new chat is added\n     */\n    addReducer('addChat',(global,dispatch,chat) => {\n\n        function isDateBefore(chat1,chat2){\n            /*\n                do latestMessages exist?\n             */\n            if(!chat1.latestMessage)\n                return true;\n            else if(!chat2.latestMessage)\n                return false;\n            else\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\n        }\n        /*\n            place the chat at the right position\n            chats is cloned\n         */\n        const chatsClone = global.chats.splice(0);\n        const chatObject = chat.getChatObject();\n\n        if(chatsClone.length === 0)\n            return {\n                chats: [chatObject]\n            };\n\n        for (let i = 0; i < chatsClone.length; i++) {\n            if (isDateBefore(chatsClone[i], chatObject)) {\n                chatsClone.splice(i, 0, chatObject);\n                break;\n            }\n        }\n\n        return {\n            chats: chatsClone\n        }\n\n    });\n    /*\n        chat is removed\n     */\n    addReducer('removeChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            chats is cloned\n         */\n        const chatsClone = this.state.chats.splice(0);\n        /*\n            item is deleted from array\n         */\n        chatsClone.splice(index,1);\n\n        return {\n            chats: chatsClone\n        }\n    });\n    /*\n        tempChat is shown\n     */\n    addReducer('showTempChat',(global,dispatch) => {\n\n        const chat = chatSocket.temporaryChat.chatNow;\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            tempChat: chat.getChatObject(),\n            currentChat: {\n                type: 'tempChat',\n                id: 0,\n                messages: []\n            }\n        }\n    });\n    /*\n        tempChat is updated\n     */\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\n        tempChat: chat.getChatObject(),\n        currentChat: {\n            type: 'tempChat',\n            id: 0,\n            messages: []\n        }\n    }));\n    /*\n        tempChat is hidden\n     */\n    addReducer('hideTempChat',(global,dispatch) => ({\n        tempChat: null\n    }));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}