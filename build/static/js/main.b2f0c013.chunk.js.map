{"version":3,"sources":["Auth/MsgBox.js","Auth/authUI.js","Auth/Login.js","Auth/Register.js","utilComp/PrivateRoute.js","responsive/utilResponsive.js","responsive/Responsive.js","utilComp/Dummy.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","util/Color.js","util/BinSearch.js","global/requests.js","chatData/User.js","global/globalData.js","Home/chatView/chatContainer/message/NormalMessage.js","Home/chatView/chatContainer/message/StatusMessage.js","chatData/message/statusMessage.js","Home/chatView/chatContainer/message/Message.js","chatData/message/message.js","util/Event.js","chatData/chat/chat.js","chatData/chat/normalChat.js","chatData/chat/groupChat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/chatContainer/MessageForm.js","Home/chatView/chatContainer/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/chatViewErrorMessages.js","Home/chatView/NormalChatView.js","Home/chatView/groupChatInfo/UserOptions.js","Home/chatView/groupChatInfo/ChatOptions.js","utilComp/Modal.js","Home/selectUsers/UserItem.js","Home/selectUsers/UserList.js","Home/selectUsers/SelectUsers.js","Home/chatView/groupChatInfo/AddUsersModal.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/GroupChatView.js","Home/selectChat/UserItem.js","Home/selectChat/SelectChat.js","Home/newChat/chooseUser/ChooseUser.js","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/UserInfo.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","global/authTokens.js","App.js","global/global.js","global/initChats.js","global/chats.js","serviceWorker.js","index.js"],"names":["ErrorMsg","className","this","props","children","Component","extendJQuery","$","fn","extend","pwToggle","prepend","addClass","css","position","right","top","color","cursor","width","height","hover","icon","get","input","addEventListener","type","classList","remove","add","Login","changeHandler","event","nam","target","name","val","value","setState","submitHandler","preventDefault","uNameErr","pwErr","valConstraints","username","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","password","valResult","validate","state","valid","login","then","data","success","undefined","a","config","method","headers","body","JSON","stringify","fetch","response","ok","json","dispatch","setUserSelf","uid","setAuthTokens","tokens","history","push","redirect","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","id","to","withRouter","Register","pwRepeatErr","passwordRepeat","equality","pwRepeat","register","PrivateRoute","component","rest","useGlobal","global","render","loaded","authTokens","pathname","referer","location","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","removeEventListener","React","PureComponent","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","infoHeaderCenter","HeaderLeft","onClick","goBack","newMessages","HeaderCenter","ihcData","data-toggle","title","gcid","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","setTimeout","clickDocument","changeChecked","logout","deleteAuthTokens","checked","userSelf","tooltip","ChatSearchBox","searchChanged","onSearch","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","k","floor","i","getIndex","splice","getNearestKey","Array","makeRequest","tokensP","getGlobal","configI","status","getDispatch","Error","UserErrorCode","chatSocket","users","normalChat","user","temporaryChat","createNew","doesExist","userExists","blocked","User","_normalChat","_groupChats","groupChats","_uid","_username","_color","globalData","fetchData","NormalMessage","msg","bySelf","userTop","UsernameSpan","content","text","mDateString","StatusMessage","StatusMsgContent","middleStringD","hatHast","ist","statusMessagesD","passiveUsers","statusMessageTypes","chatCreated","renderStringD","usersAdded","usersRemoved","usersJoined","usersLeft","usersMadeAdmin","usersRemovedAdmin","getStatusMessageStringD","middle","statusMessage","getMiddleString","getPassiveUsers","getStatusMessageString","Message","messageTypes","normalMessage","statusMessages","mid","chat","date","Date","now","userTopShown","getMessageViewDateString","dateString","getDateString","getUserTop","isBySelf","isDateToday","getTimeString","isDateYesterday","s2","msgString","substr","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_date","_chat","_type","_content","EventHandler","events","Map","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","messageData","empty","messages","num","reachedTopMessages","getLastMsgId","getLastMessage","chatType","chatId","lastMsgId","lMessages","showUserInfoMessage","getMessageObject","rMessages","newMsg","unreadMessages","latestMessage","getLatestMessageObject","lm","getFirstMessage","getChatViewMsgString","getChatViewDateString","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","trigger","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","isShown","showTempChat","updateTempChat","hideTempChat","otherUid","otherUsername","mentions","media","newChat","ncid","chats","normal","addChat","selectChat","hide","_chatNow","ChatSocket","_userSelf","_chats","group","_finishedLoading","_temporaryChat","_initCalled","socket","removeAllListeners","disconnect","initCalled","userInfo","io","connect","secure","emit","on","initChats","getChat","isCurrentChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","initFirstMessage","firstMessage","member","addGroupChat","_socket","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","paddingTop","found","tempChat","map","includes","ChatViewLoader","borderWidth","role","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","replace","sendMessage","catch","err","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","loadMessages","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","typeMessages","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","onScroll","ref","date1","renderDateContainer","_messagesNode","TempChatContainer","show","update","AddressNotValid","CannotWriteYourself","BlockedByThisUser","UserNotExisting","NoMemberInPublicChat","NoAuthorization","ChatNotExisting","GeneralError","NormalChatView","userChanged","parseInt","error","getUserNormalChat","res","selectNormalChat","selectTempChat","renderLoader","isNaN","UserOptions","isSelfAdmin","memberSelf","isAdmin","removeMemberFromChat","makeMemberAdmin","removeMemberAdmin","isMemberSelf","ChatOptions","leaveChat","console","log","removeSelfAdmin","Modal","ModalHeader","ModalMain","UserItem","clicked","deselectUser","index","selectUser","errorCode","searchResult","hasMore","loadUsers","concat","scrollParentRef","pageStart","loadMore","loader","useWindow","getScrollParent","item","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","AddUsersModal","path","useRouteMatch","useHistory","submitUsers","numAlreadyLoaded","search","limit","start","GroupChatInfo","uidSelf","overlay","animation","alignPoint","groupChatErrorCode","groupChatTabs","GroupChatView","loadGroupChatInfo","chatData","chatExists","r","selectGroupChat","tab","renderChat","elementClicked","SelectChat","loadChats","showOptions","showSearchBar","ChooseUser","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","options","GroupInfoForm","groupNameChanged","groupName","formSubmitted","submitGroup","description","isPublic","NewGroup","showEnterChatInfo","currentTab","createGroupChat","chooseUser","NewChat","newTab","getHeader","router","UserInfo","setUser","fetchUser","ModalRouterBigScreens","routeProps","match","params","uidInfo","GridBigScreens","padding","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","modal","modalInfo","notifications","init","addReducer","localStorage","removeItem","deleteUserSelf","resetGlobal","destruct","existingTokens","setItem","App","useDispatch","useEffect","parse","getItem","initAuthTokens","exact","NoMatch","useLocation","chatsLoaded","element","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initChatReducers","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2f0c013.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nclass ErrorMsg extends Component{\r\n    render() {\r\n        return(\r\n            <small className=\"alert alert-danger p-1 message d-block\">\r\n                {this.props.children}\r\n            </small>\r\n        )\r\n    }\r\n}\r\n\r\nexport {ErrorMsg};","import $ from 'jquery';\r\n/*\r\n    benötigt:\r\n        jQuery\r\n        font-awesome\r\n\r\n    Password-toggle\r\n */\r\nexport function extendJQuery(){\r\n    $.fn.extend({\r\n        pwToggle: function(){\r\n            this.prepend($('<i>')\r\n                .addClass(\"fas fa-eye-slash psw-toggle-icon\")\r\n                .css({\r\n                    position: 'absolute',\r\n                    right: '20px',\r\n                    top: '11px',\r\n                    color: '#666',\r\n                    cursor: 'pointer',\r\n                    width: '16px',\r\n                    height: '16px'\r\n                })\r\n                .hover(function() {\r\n                    $(this).css('color','#666');\r\n                }, function() {\r\n                    $(this).css('color','#000');\r\n                }));\r\n            this.css({\r\n                position:\"relative\"\r\n            });\r\n\r\n            let icon = this.get(0).children[0];\r\n            let input = this.get(0).children[1];\r\n\r\n            icon.addEventListener(\"click\",function(){\r\n                if(input.type === \"password\"){\r\n                    icon.classList.remove(\"fa-eye-slash\");\r\n                    icon.classList.add(\"fa-eye\");\r\n                    input.type = \"text\";\r\n                }else{\r\n                    icon.classList.remove(\"fa-eye\");\r\n                    icon.classList.add(\"fa-eye-slash\");\r\n                    input.type = \"password\";\r\n                }\r\n            });\r\n        }\r\n    });\r\n}","import React,{Component} from \"reactn\";\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\n\r\nclass Login extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr\r\n            });\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: ''\r\n            });\r\n           /*\r\n                request to server\r\n            */\r\n           this.login(this.state.username,this.state.password).then(data => {\r\n               if(!data.success){\r\n\r\n                   if(data.username !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           uNameErr: data.username\r\n                       });\r\n                   if(data.password !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           pwErr: data.password\r\n                       });\r\n               }\r\n           });\r\n        }\r\n\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n\r\n    login = async (username,password) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            };\r\n            const response = await fetch('/auth/login', config);\r\n            //const json = await response.json()\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.success) {\r\n                    this.dispatch.setUserSelf(data.uid,username);\r\n\r\n                    this.dispatch.setAuthTokens(data.tokens);\r\n\r\n                    this.props.history.push('/chat');\r\n                }\r\n                return data;\r\n            } else {\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                <div className=\"col-sm-12 my-auto\">\r\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                        <h1>Login</h1>\r\n                        <form onSubmit={this.submitHandler}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">Benutzername:</label>\r\n                                {this.uNameErr()}\r\n                                <input type=\"text\"\r\n                                       name=\"username\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"Benutzernamen eingeben\"\r\n                                       onChange={this.changeHandler}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Passwort:</label>\r\n                                {this.pwErr()}\r\n                                <div id=\"psw-group\">\r\n                                    <input type=\"password\"\r\n                                           name=\"password\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Passwort eingeben\"\r\n                                           onChange={this.changeHandler}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\r\n                            </div>\r\n                            <input\r\n                                type=\"submit\"\r\n                                className=\"btn btn-primary\"\r\n                                value=\"Login\"\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","import React,{Component} from \"reactn\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass Register extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            pwRepeatErr: '',\r\n            pwRepeat: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            },\r\n            passwordRepeat: {\r\n                presence: true,\r\n                equality: \"password\",\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            passwordRepeat: this.state.pwRepeat\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n            let pwRepeatErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.passwordRepeat)!=\"undefined\") {\r\n                pwRepeatErr = valResult.passwordRepeat[0];\r\n            }else{\r\n                pwRepeatErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr,\r\n                pwRepeatErr: pwRepeatErr\r\n            });\r\n\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: '',\r\n                pwRepeatErr: ''\r\n            });\r\n            /*\r\n                request to server\r\n             */\r\n            this.register(this.state.username,this.state.password).then(data => {\r\n                if(!data.success){\r\n\r\n                    if (data.username !== undefined)\r\n                        this.setState({\r\n                            valid: false,\r\n                            uNameErr: data.username\r\n                        });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwRepeatErr = () => {\r\n        if(this.state.pwRepeatErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwRepeatErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n\r\n    register = async(username,password) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            };\r\n            const response = await fetch('/auth/register', config);\r\n            //const json = await response.json()\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.success) {\r\n                    this.dispatch.setUserSelf(data.uid,username);\r\n\r\n                    this.dispatch.setAuthTokens(data.tokens);\r\n\r\n                    this.props.history.push('/chat');\r\n                }\r\n                return data;\r\n            }else\r\n                return null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                <div className=\"col-sm-12 my-auto\">\r\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                        <h1>Registrieren</h1>\r\n                        <form onSubmit={this.submitHandler}>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"username\">Benutzername:</label>\r\n                                {this.uNameErr()}\r\n                                <input type=\"text\"\r\n                                       name=\"username\"\r\n                                       className=\"form-control\"\r\n                                       placeholder=\"Benutzernamen eingeben\"\r\n                                       onChange={this.changeHandler}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Passwort:</label>\r\n                                {this.pwErr()}\r\n                                <div id=\"psw-group\">\r\n                                    <input type=\"password\"\r\n                                           name=\"password\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Passwort eingeben\"\r\n                                           onChange={this.changeHandler}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Passwort wiederholen:</label>\r\n                                {this.pwRepeatErr()}\r\n                                <div id=\"psw-group-repeat\">\r\n                                    <input type=\"password\"\r\n                                           name=\"pwRepeat\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Passwort eingeben\"\r\n                                           onChange={this.changeHandler}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group-repeat, #psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default withRouter(Register);","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport {useGlobal} from \"reactn\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n\r\n    const [global,setGlobal] = useGlobal();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                global.loaded ? (\r\n                    global.authTokens ?\r\n                    (\r\n                        <Component {...props} />\r\n                    )\r\n                    : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    referer: props.location\r\n                                }\r\n                            }}\r\n                        />\r\n                    )\r\n                ) : null\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\r\n\r\nexport const DeviceWidthObject = {\r\n\r\n    MobileSmall      : { max: 320, min: 0 },\r\n    MobileMedium     : { max: 375, min: 321 },\r\n    MobileLarge      : { max: 767, min: 376 },\r\n\r\n    Tablet           : { max: 991, min: 768 },\r\n\r\n    LaptopSmall      : { max: 1024, min: 992 },\r\n    LaptopLarge      : { max: 1440, min: 1025 },\r\n\r\n    LargerThanLaptop : { max: 2560, min: 1441 },\r\n    LargeScreenMax   : { max: 999999, min: 2561 }\r\n\r\n};\r\n\r\nexport const IdDeviceBreakpointsByWidth = {\r\n\r\n    laptop_max : 1440,\r\n    laptop_min : 992,\r\n    tablet_min : 768,\r\n    tablet_max : 991,\r\n    mobile_max : 767,\r\n    default_min : 768 // Unrecognized device\r\n};\r\n\r\nexport const IdMobileHeight = {\r\n    mobileLandscape_min : 320,\r\n    mobileLandscape_max : 425\r\n};\r\n\r\nexport const getWindowDimension = () => {\r\n\r\n    const width = window.innerWidth\r\n        || document.documentElement.clientWidth\r\n        || document.body.clientWidth;\r\n\r\n    const height = window.innerHeight\r\n        || document.documentElement.clientHeight\r\n        || document.body.clientHeight;\r\n\r\n    return {width, height}\r\n\r\n};\r\n\r\nexport const getDeviceTypeInfo = () => {\r\n    const { width, height } = getWindowDimension();\r\n    const buildDeviceDetails = {\r\n        deviceType: '',\r\n        deviceTypeVariant: '',\r\n        orientation: 'Portrait',\r\n        width,\r\n        height,\r\n        isFallback: false\r\n    };\r\n//  Edge case\r\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\r\n    if (hasEdgeCase) {\r\n        return hasEdgeCase\r\n    }\r\n    if (height < width) {\r\n        // Orientation is landscape\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        if (height <= IdMobileHeight.mobileLandscape_max) {\r\n            // Mobile (landscape)\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    height <= DeviceWidthObject[devc].max &&\r\n                    height >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            // Tablet (landscape)\r\n            buildDeviceDetails.deviceType = 'Tablet';\r\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            // Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'Laptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            // Larger than Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc\r\n                    break\r\n                }\r\n            }\r\n        } else {\r\n\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\r\n            buildDeviceDetails.isFallback = true\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    } else {\r\n        // Orientation is portrait\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        for (const devc in DeviceWidthObject) {\r\n            if (\r\n                width <= DeviceWidthObject[devc].max &&\r\n                width >= DeviceWidthObject[devc].min\r\n            ) {\r\n                buildDeviceDetails.deviceTypeVariant = devc;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Laptop'\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Tablet'\r\n        }\r\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\r\n            buildDeviceDetails.deviceType = 'Mobile'\r\n        }\r\n\r\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    }\r\n};\r\n\r\nconst handleExceptions = (buildDeviceDetails, width, height) => {\r\n    //  iPadPro\r\n    if (width === 1024 && height === 1366) {\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        return buildDeviceDetails\r\n    } else if (width === 1366 && height === 1024) {\r\n        //  Edge case\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        return buildDeviceDetails\r\n    }\r\n\r\n    return undefined\r\n};","import React from 'react'\r\nimport {\r\n    getWindowDimension,\r\n    IdDeviceBreakpointsByWidth,\r\n    IdMobileHeight\r\n} from './utilResponsive';\r\n\r\nconst { width, height } = getWindowDimension();\r\nconst initialState = { width, height };\r\n\r\nexport default class Responsive extends React.PureComponent {\r\n\r\n    state = initialState;\r\n    componentDidMount () {\r\n        window.addEventListener('resize', this.handleResize, false)\r\n    }\r\n    componentWillUnmount () {\r\n        window.removeEventListener('resize', this.handleResize, false)\r\n    }\r\n    render = () => {\r\n        const { children, displayIn } = this.props;\r\n        const { width, height } = this.state;\r\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\r\n        return (\r\n            <React.Fragment>\r\n                {shouldRenderChildren ? children : null}\r\n            </React.Fragment>\r\n        )\r\n    };\r\n    handleResize = () => {\r\n        const { width, height } = getWindowDimension();\r\n        this.setState({ width, height })\r\n    };\r\n    shouldRender = (display, width, height) => {\r\n        if (\r\n            display.indexOf('Laptop') !== -1 &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('Tablet') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\r\n        ) {\r\n            return true\r\n        }\r\n        // For mobile regardless of orientation\r\n        if (\r\n            display.indexOf('Mobile') !== -1 &&\r\n            width <= IdDeviceBreakpointsByWidth.mobile_max\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('MobilePortrait') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height >= IdMobileHeight.mobileLandscape_max)\r\n        ) {\r\n            return true\r\n        }    return !!(\r\n            display.indexOf('MobileLandScape') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height <= IdMobileHeight.mobileLandscape_min)\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class Dummy extends Component {\r\n\r\n    componentDidMount() {\r\n        if(typeof(this.props.didMount) === 'function')\r\n            this.props.didMount();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(typeof(this.props.didUpdate) === 'function')\r\n            this.props.didUpdate();\r\n    }\r\n\r\n    render() {\r\n        if(this.props.children)\r\n            return this.props.children;\r\n        return null;\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport Responsive from \"../../responsive/Responsive\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nimport \"./headerLeft.scss\";\r\n\r\nexport const infoHeaderCenter = {\r\n    none: 0,\r\n    normalChat: 1,\r\n    groupChat: 2\r\n};\r\n\r\nclass HeaderLeft extends Component{\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n        /*\r\n            renders number of new messages\r\n         */\r\n        const renderNewMsgNumber = () => {\r\n            if(this.global.newMessages > 0){\r\n                return (\r\n                    <div className=\"btnBack-number\">\r\n                        {this.global.newMessages}\r\n                    </div>\r\n                )\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const renderBtnBack = () => {\r\n            /*\r\n                only small screens\r\n             */\r\n            return (\r\n                <div className=\"float-left left\">\r\n                    <i id=\"btnBackToChatList\"\r\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\r\n                       onClick={() => {this.props.history.goBack()}}\r\n                    />\r\n                    {renderNewMsgNumber()}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const renderChatInfo = () => {\r\n            /*\r\n                if there is a normal chat open, this info gets displayed\r\n             */\r\n            switch(this.global.infoHeaderCenter){\r\n\r\n                case infoHeaderCenter.normalChat:\r\n                    return (\r\n                        <HeaderCenter>\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </HeaderCenter>\r\n                    );\r\n\r\n                case infoHeaderCenter.groupChat:\r\n                    return(\r\n                        <HeaderCenter>\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </HeaderCenter>\r\n                    );\r\n\r\n                default:\r\n                    return(\r\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\r\n                        </Responsive>\r\n                    );\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n                    {renderBtnBack()}\r\n                </Responsive>\r\n                {renderChatInfo()}\r\n            </Dummy>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(HeaderLeft);\r\n\r\nfunction HeaderCenter(props){\r\n    return(\r\n        <div id=\"chat-info\" className=\"center pt-2\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"reactn\";\r\nimport $ from 'jquery';\r\nimport HeaderLeft from \"./HeaderLeft\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nimport './header.scss';\r\n\r\nclass Header extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checkBoxClicked: false\r\n        };\r\n    }\r\n    clickCheckBox = event => {\r\n        if(this.state.checkBoxClicked)\r\n            event.stopPropagation();\r\n        else {\r\n            setTimeout(() => {\r\n                this.setState(state => ({\r\n                    checkBoxClicked: true\r\n                }));\r\n            }, 20);\r\n        }\r\n    };\r\n    clickDocument = event => {\r\n        if (this.state.checkBoxClicked)\r\n            this.changeChecked(event);\r\n    };\r\n    changeChecked = event => {\r\n        this.setState(state => ({\r\n            checkBoxClicked: !state.checkBoxClicked\r\n        }));\r\n    };\r\n\r\n    logout = () => {\r\n        /*\r\n            authTokens are deleted\r\n         */\r\n        this.dispatch.deleteAuthTokens();\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return(\r\n            <div className=\"c-header\">\r\n\r\n                <HeaderLeft />\r\n\r\n                <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\r\n\r\n                    <div className=\"right-l\" />\r\n\r\n                    <input type=\"checkbox\"\r\n                           id=\"btnControlTopRight\"\r\n                           className=\"btnControl\"\r\n                           checked={this.state.checkBoxClicked}\r\n                           onChange={this.changeChecked}\r\n                    />\r\n                    <label htmlFor=\"btnControlTopRight\">\r\n\r\n                        <div className=\"right-c\">\r\n                            <div className=\"d-only-when-small\">\r\n                                <i  id=\"user-info\"\r\n                                    className=\"fas fa-user fa-2x user-icon\"\r\n                                    data-toggle=\"tooltip\"\r\n                                    title=\"Benutzer-Info\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"d-only-when-big top-2right\">\r\n\r\n                                <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\r\n                                    <h4 id=\"username\"\r\n                                        className=\"p-2 username\"\r\n                                        data-toggle=\"tooltip\"\r\n                                        title=\"Benutzer-Info\"\r\n                                    >\r\n                                            {this.global.userSelf.username}\r\n                                    </h4>\r\n                                </Link>\r\n                                <div className=\"float-right\">\r\n                                    <Link to={pathname + \"/settings\"}>\r\n                                        <i className=\"fas fa-user-cog fa-2x\"\r\n                                           data-toggle=\"tooltip\"\r\n                                           title=\"Einstellungen\"\r\n                                        />\r\n                                    </Link>\r\n                                    &nbsp;\r\n                                    <i id=\"user-logout\"\r\n                                       className=\"fas fa-sign-out-alt fa-2x logout\"\r\n                                       data-toggle=\"tooltip\"\r\n                                       title=\"logout\"\r\n                                       onClick={this.logout}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n        document.addEventListener('click',this.clickDocument,false);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click',this.clickDocument,false);\r\n    }\r\n\r\n}\r\nexport default withRouter(Header);","import React,{Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nimport \"./chatSearchBox.scss\";\r\n\r\nclass ChatSearchBox extends Component{\r\n\r\n    searchChanged = event => {\r\n        this.props.onSearch(event.target.value);\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return(\r\n            <div className=\"chatSearchBox\">\r\n                <div className=\"chat-select-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chat-search\"\r\n                        className=\"chat-search\"\r\n                        placeholder=\"Chat suchen\"\r\n                        onChange={this.searchChanged}\r\n                    />\r\n                    <Link to={pathname + \"/newChat\"}>\r\n                        <button id=\"btn-newChat\"\r\n                                className=\"btn-newChat\"\r\n                        >\r\n                            <i className=\"fas fa-plus fa-lg\" />\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(ChatSearchBox);","let Colors = {};\r\nColors.names = {\r\n    aqua: \"#00ffff\",\r\n    black: \"#000000\",\r\n    blue: \"#0000ff\",\r\n    brown: \"#a52a2a\",\r\n    cyan: \"#00ffff\",\r\n    darkblue: \"#00008b\",\r\n    darkcyan: \"#008b8b\",\r\n    darkgrey: \"#a9a9a9\",\r\n    darkgreen: \"#006400\",\r\n    darkkhaki: \"#bdb76b\",\r\n    darkmagenta: \"#8b008b\",\r\n    darkolivegreen: \"#556b2f\",\r\n    darkorange: \"#ff8c00\",\r\n    darkorchid: \"#9932cc\",\r\n    darkred: \"#8b0000\",\r\n    darksalmon: \"#e9967a\",\r\n    darkviolet: \"#9400d3\",\r\n    fuchsia: \"#ff00ff\",\r\n    gold: \"#ffd700\",\r\n    green: \"#008000\",\r\n    indigo: \"#4b0082\",\r\n    khaki: \"#f0e68c\",\r\n    lightblue: \"#add8e6\",\r\n    lightgreen: \"#90ee90\",\r\n    lightgrey: \"#d3d3d3\",\r\n    lightpink: \"#ffb6c1\",\r\n    lime: \"#00ff00\",\r\n    magenta: \"#ff00ff\",\r\n    maroon: \"#800000\",\r\n    navy: \"#000080\",\r\n    olive: \"#808000\",\r\n    orange: \"#ffa500\",\r\n    pink: \"#ffc0cb\",\r\n    purple: \"#800080\",\r\n    violet: \"#800080\",\r\n    red: \"#ff0000\",\r\n    silver: \"#c0c0c0\"\r\n};\r\nColors.random = function() {\r\n    let result;\r\n    let count = 0;\r\n    for (let prop in this.names)\r\n        if (Math.random() < 1/++count)\r\n            result = prop;\r\n    return result;\r\n};\r\nexport default Colors;","\r\nexport default class BinSearchArray extends Array{\r\n\r\n    getIndex(key){\r\n\r\n        let left = 0;\r\n        let right = this.length-1;\r\n\r\n        while(left<=right){\r\n            let k= Math.floor((left+right)/2);\r\n            if(this[k].key === key)\r\n                return k;\r\n            else if(this[k].key < key)\r\n                left = k+1;\r\n            else //a[k]>v\r\n                right = k-1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getNearestKey(key){\r\n        /*\r\n            besseren Algorithmus finden\r\n         */\r\n        let i;\r\n        ++key;\r\n\r\n        while((i = this.getIndex(--key)) === -1){\r\n            /*\r\n                wenn key 0 ist, wird vorne eingefügt\r\n             */\r\n            if(key === 0) return -1;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    get(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            return this[i].value;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    add(key,value){\r\n        /*\r\n            key darf noch nicht vorhanden sein\r\n         */\r\n        if(this.getIndex(key) === -1) {\r\n\r\n            this.splice(this.getNearestKey(key) + 1, 0, {\r\n                key: key,\r\n                value: value\r\n            });\r\n        }\r\n    }\r\n\r\n    remove(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            this.splice(i,1);\r\n    }\r\n}","import {getGlobal,getDispatch} from 'reactn';\r\n\r\nexport async function makeRequest(target,config,tokensP){\r\n    /*\r\n        if parameter tokens is defined, this is taken\r\n        else the one from global\r\n     */\r\n    const tokens = tokensP ? tokensP : getGlobal().authTokens;\r\n\r\n    const configI = {\r\n        ...config,\r\n        method: config.method,\r\n        headers: {\r\n            ...config.headers,\r\n            /*\r\n                jwt\r\n             */\r\n            'Authorization': tokens\r\n        }\r\n    };\r\n\r\n    const response = await fetch(target,configI);\r\n    /*\r\n        http-status 401: jwt timeout\r\n     */\r\n    if(response.status === 401){\r\n        /*\r\n            autToken is deleted\r\n         */\r\n        getDispatch().deleteAuthTokens();\r\n        /*\r\n            error is thrown\r\n         */\r\n        throw new Error('jwt expired');\r\n    }\r\n    return response;\r\n}","import Colors from \"../util/Color\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\nimport chatSocket from \"./chatSocket\";\r\nimport {makeRequest} from \"../global/requests\";\r\n\r\nexport const UserErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    tempChat: 2,\r\n    userNotExisting: 3,\r\n    blocked: 4,\r\n    isSelf: 5,\r\n    error: 6\r\n};\r\n\r\nexport async function getUserNormalChat(uid){\r\n    /*\r\n        does the user exist & does normal chat exist\r\n     */\r\n    if(chatSocket.users.getIndex(uid) !== -1){\r\n        /*\r\n            does a normalChat exist at the user\r\n         */\r\n        if(chatSocket.users.get(uid).normalChat !== 0) {\r\n\r\n            return UserErrorCode.none;\r\n        }else{\r\n            /*\r\n                chat does not exist in server\r\n                it gets created\r\n             */\r\n            const user = chatSocket.users.get(uid);\r\n            chatSocket.temporaryChat.createNew(uid,user.username);\r\n\r\n            return UserErrorCode.tempChat;\r\n        }\r\n        /*\r\n            does there exist a temporary chat with this user\r\n        */\r\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\r\n        /*\r\n            user and chat does not exist in server\r\n         */\r\n        return UserErrorCode.tempChat;\r\n\r\n    }else{\r\n        /*\r\n            request user from server\r\n         */\r\n        try {\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await makeRequest('/user/' + uid, config);\r\n            /*\r\n                if ok, modal is closed\r\n             */\r\n            if(response.ok) {\r\n\r\n                const data = await response.json();\r\n\r\n                if(data.userExists && !data.blocked) {\r\n\r\n                    chatSocket.temporaryChat.createNew(uid,data.username);\r\n                    return UserErrorCode.tempChat;\r\n\r\n                }else{\r\n\r\n                    if(!data.userExists)\r\n\r\n                        return UserErrorCode.userNotExisting;\r\n\r\n                    else\r\n\r\n                        return UserErrorCode.blocked;\r\n                }\r\n\r\n            }else\r\n                return UserErrorCode.error;\r\n\r\n        }catch(error){\r\n            return UserErrorCode.error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class User{\r\n\r\n    _uid;\r\n    _username;\r\n    _color;\r\n    //ids der chats des Users\r\n    _normalChat = 0;\r\n    //ids of the groupchats\r\n    _groupChats = new BinSearchArray();\r\n\r\n    constructor(uid,username) {\r\n        this.uid = uid;\r\n        this.username = username;\r\n        this.color = Colors.random();\r\n    }\r\n    /*\r\n        groupChat is added\r\n     */\r\n    addGroupChat(gcid){\r\n        this.groupChats.add(gcid,gcid);\r\n    }\r\n\r\n    removeGroupChat(gcid){\r\n        this.groupChats.remove(gcid);\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get username() {\r\n        return this._username;\r\n    }\r\n\r\n    set username(value) {\r\n        this._username = value;\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n\r\n    get normalChat() {\r\n        return this._normalChat;\r\n    }\r\n\r\n    set normalChat(value) {\r\n        this._normalChat = value;\r\n    }\r\n\r\n    get groupChats() {\r\n        return this._groupChats;\r\n    }\r\n\r\n    set groupChats(value) {\r\n        this._groupChats = value;\r\n    }\r\n}","\r\nexport let globalData = {};\r\n\r\n/*\r\n    is called in isLoggedIn in App.js\r\n */\r\nexport async function fetchData(){\r\n\r\n    const config = {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json'\r\n        }\r\n    };\r\n    const response = await fetch('/data.json', config);\r\n\r\n    if(response.ok){\r\n\r\n        globalData = await response.json();\r\n    }else{\r\n        throw new Error();\r\n    }\r\n}","import React from \"react\";\r\nimport {UsernameSpan} from \"./Message\";\r\n\r\nexport default function NormalMessage(props){\r\n\r\n    const msg = props.msg;\r\n\r\n    return(\r\n        <div className={\r\n            (msg.bySelf ? \"self \" : \"other \") +\r\n            \"msg-container\"\r\n        }>\r\n            {msg.userTop ?\r\n                <div className=\"w-100\">\r\n                    <strong className=\"header\">\r\n                        <UsernameSpan user={msg.userTop}/>\r\n                    </strong>\r\n                </div>\r\n                : null}\r\n            <div className=\"content\">\r\n                <p>\r\n                    {msg.content.text}\r\n                </p>\r\n            </div>\r\n            <div className=\"date-outer\">\r\n                <div className=\"date\">\r\n                    {msg.mDateString}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Dummy from \"../../../../utilComp/Dummy\";\r\nimport {getStatusMessageString} from \"../../../../chatData/message/statusMessage\";\r\n\r\nexport default function StatusMessage(props){\r\n\r\n    const msg = props.msg;\r\n\r\n    return(\r\n        <div className={\r\n            (msg.bySelf ? \"self \" : \"other \") +\r\n            \"msg-container\"\r\n        }>\r\n            <StatusMsgContent msg={msg}/>\r\n            <div className=\"date-outer\">\r\n                <div className=\"date\">\r\n                    {msg.mDateString}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nfunction StatusMsgContent(props) {\r\n\r\n    const msg = props.msg;\r\n\r\n    return(\r\n        <Dummy>\r\n            {getStatusMessageString(msg)}\r\n        </Dummy>\r\n    );\r\n}","import {UsernameSpan} from \"../../Home/chatView/chatContainer/message/Message\";\r\nimport {globalData} from \"../../global/globalData\";\r\nimport React from \"react\";\r\nimport chatSocket from \"../chatSocket\";\r\n\r\nexport function getStatusMessageString(msg){\r\n\r\n    const middleStringD = {\r\n        hatHast: 0,\r\n        ist: 1\r\n    };\r\n\r\n    const statusMessagesD = [\r\n        \"den chat erstellt\",\r\n        \"hinzugefügt\",\r\n        \"entfernt\",\r\n        \"dem chat beigetreten\",\r\n        \"den chat verlassen\",\r\n        \"zum Admin gemacht\",\r\n        \"nicht mehr Admin\"\r\n    ];\r\n\r\n    return getStatusMessageStringD();\r\n\r\n    function getStatusMessageStringD() {\r\n\r\n        const userTop = msg.userTop;\r\n        const passiveUsers = msg.content.passiveUsers;\r\n\r\n        switch (msg.content.type) {\r\n\r\n            case globalData.statusMessageTypes.chatCreated:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.hatHast,\r\n                    passiveUsers,\r\n                    globalData.statusMessageTypes.chatCreated\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersAdded:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.hatHast,\r\n                    passiveUsers,\r\n                    globalData.statusMessageTypes.usersAdded\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersRemoved:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.hatHast,\r\n                    passiveUsers,\r\n                    globalData.statusMessageTypes.usersRemoved\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersJoined:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.ist,\r\n                    [],\r\n                    globalData.statusMessageTypes.usersJoined\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersLeft:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.hatHast,\r\n                    [],\r\n                    globalData.statusMessageTypes.usersLeft\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersMadeAdmin:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.hatHast,\r\n                    passiveUsers,\r\n                    globalData.statusMessageTypes.usersMadeAdmin\r\n                );\r\n\r\n            case globalData.statusMessageTypes.usersRemovedAdmin:\r\n                return renderStringD(\r\n                    userTop,\r\n                    middleStringD.ist,\r\n                    [],\r\n                    globalData.statusMessageTypes.usersRemovedAdmin\r\n                );\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function renderStringD(userTop,middle,passiveUsers,statusMessage){\r\n\r\n        function getMiddleString(){\r\n\r\n            switch (middle) {\r\n\r\n                case middleStringD.hatHast:\r\n                    return msg.bySelf ? \" hast \" : \" hat \";\r\n\r\n                case middleStringD.ist:\r\n                    return ' ist';\r\n            }\r\n        }\r\n\r\n        function getPassiveUsers(){\r\n\r\n            if(passiveUsers.length < 1 ){\r\n                return \"\";\r\n            }else if(passiveUsers.length === 1){\r\n\r\n                const user = chatSocket.users.get(passiveUsers[0]);\r\n\r\n                if(user)\r\n                    return(\r\n                        <UsernameSpan user={user}/>\r\n                    );\r\n                else\r\n                    return \"1 Benutzer\";\r\n\r\n            }else{\r\n                return passiveUsers.length + \" Benutzer\";\r\n            }\r\n        }\r\n\r\n        return(\r\n            <span>\r\n                <UsernameSpan user={msg.userTop}/>\r\n                {getMiddleString()}\r\n                {getPassiveUsers()}\r\n                {\" \" + statusMessagesD[statusMessage]}\r\n            </span>\r\n        )\r\n    }\r\n\r\n}\r\nexport const statusMessages =\r\n    [\r\n        \"den chat erstellt\",\r\n        \"hinzugefügt\",\r\n        \"entfernt\",\r\n        \"beigetreten\",\r\n        \"den chat verlassen\",\r\n        \"zum Admin gemacht\",\r\n        \"Admin entzogen\"\r\n    ];","import React from \"react\";\r\nimport {globalData} from \"../../../../global/globalData\";\r\nimport NormalMessage from \"./NormalMessage\";\r\nimport StatusMessage from \"./StatusMessage\";\r\nimport Colors from \"../../../../util/Color\";\r\n\r\nimport './message.scss'\r\n\r\nexport default function Message(props){\r\n\r\n    const msg = props.msg;\r\n\r\n    switch (msg.type) {\r\n\r\n        case globalData.messageTypes.normalMessage: {\r\n\r\n            return (\r\n                <NormalMessage msg={msg}/>\r\n            )\r\n        }\r\n\r\n        case globalData.messageTypes.statusMessage: {\r\n\r\n            return (\r\n                <StatusMessage msg={msg}/>\r\n            );\r\n        }\r\n\r\n        default:\r\n            return <span />;\r\n    }\r\n}\r\n\r\nexport function UsernameSpan(props){\r\n\r\n    return(\r\n        <span\r\n            style={{\r\n                color: Colors.names[props.user.color]\r\n            }}>\r\n                {props.user.username}\r\n        </span>\r\n    );\r\n}","import chatSocket from \"../chatSocket\";\r\nimport {globalData} from \"../../global/globalData\";\r\nimport {statusMessages} from \"./statusMessage\";\r\n\r\nexport function isDifferentDay(date1,date2){\r\n    return date1.getDay() !== date2.getDay()\r\n        || date1.getMonth() !== date2.getMonth()\r\n        || date1.getFullYear() !== date2.getFullYear();\r\n}\r\n\r\nexport default class Message {\r\n\r\n    _mid;\r\n    _uid;\r\n    _date;\r\n    _chat;\r\n    _type;\r\n    _content;\r\n\r\n    constructor(\r\n        mid,\r\n        uid,\r\n        chat,\r\n        date = new Date(Date.now()),\r\n        type,\r\n        content\r\n    ) {\r\n        this.mid = mid;\r\n        this.uid = uid;\r\n        this.date = date;\r\n        //type: object of Chat\r\n        this.chat = chat;\r\n        this.type = type;\r\n        this.content = content;\r\n    }\r\n    /*\r\n        a object representing the message is returned\r\n     */\r\n    getMessageObject(userTopShown){\r\n\r\n        const message = {\r\n            mDateString: this.getMessageViewDateString(),\r\n            dateString: this.getDateString(),\r\n            date: this.date,\r\n            bySelf: this.uid === chatSocket.userSelf.uid,\r\n            type: this.type,\r\n            content: this.content\r\n        };\r\n        /*\r\n            if the user top should be shown, the property is added\r\n         */\r\n        if(userTopShown)\r\n            message.userTop = this.getUserTop();\r\n\r\n        return message;\r\n    }\r\n    /*\r\n        a object for the userinfo at the top of the message is returned\r\n     */\r\n    getUserTop(){\r\n        /*\r\n            is the message written by the user self?\r\n         */\r\n        if(this.isBySelf())\r\n            return {\r\n                uid: this.uid,\r\n                username: 'Du',\r\n                color: chatSocket.userSelf.color\r\n            };\r\n        /*\r\n            if the user is not self\r\n         */\r\n        const user = chatSocket.users.get(this.uid);\r\n        return {\r\n            uid: this.uid,\r\n            username: user.username,\r\n            color: user.color\r\n        };\r\n    }\r\n    /*\r\n        is the message by the client self?\r\n     */\r\n    isBySelf(){\r\n        return this.uid === chatSocket.userSelf.uid;\r\n    }\r\n\r\n    getChatViewDateString(){\r\n        /*\r\n            Wenn weniger als 1 Tag her: Uhrzeit\r\n         */\r\n        if(this.isDateToday()){\r\n\r\n            return 'heute ' + this.getTimeString();\r\n        }\r\n        /*\r\n            Wenn gestern: gestern\r\n         */\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern';\r\n        }\r\n        /*\r\n            sonst: Datum\r\n         */\r\n        else{\r\n            return this.getDateString();\r\n        }\r\n    }\r\n\r\n    getChatViewMsgString(){\r\n\r\n        const getStatusMsgString = (s2) => {\r\n\r\n            return this.getUserTop().username +\r\n            (this.isBySelf() ? \" hast \" : \" hat \") +\r\n            (this.content.passiveUsers.length > 0\r\n                ? (this.content.passiveUsers.length + \" Benutzer \")\r\n                : \"\"\r\n            ) + s2;\r\n        };\r\n\r\n        switch(this.type) {\r\n\r\n            case globalData.messageTypes.normalMessage: {\r\n\r\n                let msgString = this.content.text;\r\n                /*\r\n                    Wenn string länger als 18 Zeichen, wird verkürzt\r\n                 */\r\n                if(msgString.length > 18)\r\n                msgString = msgString.substr(0, 18) + '...';\r\n                /*\r\n                    wenn selbst geschrieben, steht Du: davor\r\n                 */\r\n                if(this.uid === chatSocket.userSelf.uid)\r\n                    return`Du: ${msgString}`;\r\n\r\n                else if (this.chat.type === 'normalchat')\r\n                    return this.content.text;\r\n\r\n                else\r\n                    return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\r\n            }\r\n            case globalData.messageTypes.statusMessage: {\r\n\r\n                return getStatusMsgString(\r\n                    statusMessages[this.content.type]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getMessageViewDateString(){\r\n        if(this.isDateToday()){\r\n\r\n            return this.getTimeString();\r\n        }\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern ' + this.getTimeString();\r\n        }else{\r\n\r\n            return this.getDateString() + ' ' + this.getTimeString();\r\n        }\r\n    }\r\n\r\n    isDateToday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    isDateYesterday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() - 1 &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    getDateString(){\r\n        const d = this.date.getDate();\r\n        let ds;\r\n        if(d<10)\r\n            ds = '0'+d;\r\n        else\r\n            ds = d;\r\n        const m = this.date.getMonth();\r\n        let ms;\r\n        if(m+1<10)\r\n            ms = '0'+(m+1);\r\n        else\r\n            ms = m+1;\r\n        const y = this.date.getFullYear();\r\n\r\n        return `${ds}.${ms}.${y}`;\r\n    }\r\n\r\n    getTimeString(){\r\n        const h = this.date.getHours();\r\n        let hs;\r\n        if(h<10)\r\n            hs = '0'+h;\r\n        else\r\n            hs = h;\r\n        const m = this.date.getMinutes();\r\n        let ms;\r\n        if(m<10)\r\n            ms = '0'+m;\r\n        else\r\n            ms = m;\r\n\r\n        return `${hs}:${ms}`;\r\n    }\r\n    /*\r\n        es wird überprüft, ob date2 an einem anderen Tag war\r\n     */\r\n    isDifferentDay(date2){\r\n        return this.date.getDay() !== date2.getDay()\r\n            || this.date.getMonth() !== date2.getMonth()\r\n            || this.date.getFullYear() !== date2.getFullYear();\r\n    }\r\n\r\n    get mid() {\r\n        return this._mid;\r\n    }\r\n\r\n    set mid(value) {\r\n        this._mid = value;\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get date() {\r\n        return this._date;\r\n    }\r\n\r\n    set date(value) {\r\n        this._date = value;\r\n    }\r\n\r\n    get chat() {\r\n        return this._chat;\r\n    }\r\n\r\n    set chat(value) {\r\n        this._chat = value;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    set content(value) {\r\n        this._content = value;\r\n    }\r\n}","export default class EventHandler{\r\n\r\n    _events;\r\n\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    /*\r\n        event-handler wird hinzugefügt\r\n     */\r\n    on(event,fn){\r\n        /*\r\n            wenn event in Map vorhanden, wird event hinzugefügt\r\n         */\r\n        if(this.events.has(event))\r\n            this.events.get(event).push(fn);\r\n        /*\r\n            wenn event in map noch nicht vorhanden,\r\n            wird entry in map hinzugefügt\r\n         */\r\n        else\r\n            this.events.set(event,[fn]);\r\n    }\r\n    /*\r\n        event-handler wird entfernt\r\n     */\r\n    rm(event,fn){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            const e = this.events.get(event);\r\n            for(let i=0;i<e.length;i++)\r\n                //wenn element die gesuchte function, wird sie gelöscht\r\n                if(e[i] === fn)\r\n                    e.splice(i,1);\r\n        }\r\n    }\r\n    /*\r\n        alle registrierten functions eines events werden ausgelöst\r\n     */\r\n    trigger(event,...rest){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            /*\r\n                es werden alle functions aufgerufen\r\n             */\r\n            for(let i=0;i<this.events.get(event).length;i++)\r\n                this.events.get(event)[i](...rest);\r\n        }\r\n    }\r\n\r\n    get events() {\r\n        return this._events;\r\n    }\r\n\r\n    set events(value) {\r\n        this._events = value;\r\n    }\r\n}","import BinSearchArray from \"../../util/BinSearch\";\r\nimport Message from \"../message/message\";\r\nimport EventHandler from \"../../util/Event\";\r\nimport {getDispatch} from 'reactn';\r\nimport {makeRequest} from \"../../global/requests\";\r\n\r\nexport class Chat {\r\n\r\n    _type;\r\n    _id;\r\n    _chatName;\r\n    _messages = new BinSearchArray();\r\n    _event = new EventHandler();\r\n    _unreadMessages = 0;\r\n    /*\r\n        are all messages already loaded?\r\n     */\r\n    _reachedTopMessages = false;\r\n\r\n    constructor(type, id,chatName) {\r\n        this.type = type;\r\n        this.id = id;\r\n        this.chatName = chatName;\r\n    }\r\n    /*\r\n        the first message of the object is initialized\r\n     */\r\n    initFirstMessage(messageData){\r\n\r\n        if(!messageData.empty)\r\n            this.messages.add(\r\n                messageData.mid,\r\n                new Message(\r\n                    messageData.mid,\r\n                    messageData.uid,\r\n                    this,\r\n                    new Date(messageData.date),\r\n                    messageData.type,\r\n                    messageData.content\r\n                )\r\n            );\r\n    }\r\n    /*\r\n        messages are loaded\r\n     */\r\n    async loadMessages(num){\r\n        /*\r\n            messages are only loaded, if top not already reached\r\n         */\r\n        if(!this.reachedTopMessages) {\r\n\r\n            const getLastMsgId = () => {\r\n                const msg = this.getLastMessage();\r\n                if (msg !== null)\r\n                    return msg.mid;\r\n                return -1;\r\n            };\r\n            /*\r\n                messages are loaded from server\r\n             */\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    chatType: this.type,\r\n                    chatId: this.id,\r\n                    lastMsgId: getLastMsgId(),\r\n                    num: num\r\n                })\r\n            };\r\n            const response = await makeRequest('/message/load', config);\r\n\r\n            if (response.ok) {\r\n\r\n                const data = await response.json();\r\n                /*\r\n                    is top already reached?\r\n                 */\r\n                this.reachedTopMessages = data.status === 'reached top';\r\n\r\n                const lMessages = data.messages;\r\n                /*\r\n                    the array that will be returned\r\n                 */\r\n                const messages = new Array(lMessages.length);\r\n                const userTopShown = this.showUserInfoMessage();\r\n\r\n                for (let i = lMessages.length - 1; i >= 0; i--) {\r\n\r\n                    const messageData = lMessages[i];\r\n                    /*\r\n                        message is created\r\n                     */\r\n                    const message =\r\n                        new Message(\r\n                            messageData.mid,\r\n                            messageData.uid,\r\n                            this,\r\n                            new Date(messageData.date),\r\n                            messageData.type,\r\n                            messageData.content\r\n                        );\r\n                    /*\r\n                        message is added to chat\r\n                     */\r\n                    this.messages.add(\r\n                        messageData.mid,\r\n                        message\r\n                    );\r\n                    messages[i] = message.getMessageObject(userTopShown);\r\n                }\r\n                return messages;\r\n            }\r\n            throw new Error();\r\n        }\r\n    }\r\n    /*\r\n        gibt die Nachricht, die am längsten zurück liegt, zurück\r\n     */\r\n    getLastMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[0].value;\r\n        return null;\r\n    }\r\n    /*\r\n        gibt die neueste Nachricht im chat zurück\r\n     */\r\n    getFirstMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[this.messages.length - 1].value;\r\n        return null;\r\n    }\r\n    /*\r\n        returns all messages in an array\r\n            userTopShown    should the user at the top be shown?\r\n     */\r\n    getMessages(){\r\n\r\n        const userTopShown = this.showUserInfoMessage();\r\n        const rMessages = new Array(this.messages.length);\r\n\r\n        for(let i=0;i<this.messages.length;i++){\r\n\r\n            const message = this.messages[i].value;\r\n            rMessages[i] = message.getMessageObject(userTopShown);\r\n        }\r\n\r\n        return rMessages;\r\n    }\r\n    /*\r\n        neue Nachricht wird hinzugefügt\r\n     */\r\n    addMessage(uid,mid,type,content){\r\n        const message =\r\n            new Message(\r\n                mid,\r\n                uid,\r\n                this,\r\n                new Date(Date.now()),\r\n                type,\r\n                content\r\n            );\r\n        this.messages.add(mid,message);\r\n        getDispatch().newMsg(\r\n            this,\r\n            this.unreadMessages,\r\n            message.getMessageObject(\r\n                this.showUserInfoMessage()\r\n            ));\r\n    }\r\n    /*\r\n        should the userInfo at the messages be shown (--> only in groupChats)\r\n     */\r\n    showUserInfoMessage(){\r\n        return(this.type === 'groupChat')\r\n    }\r\n    /*\r\n        an object of this chat is returned\r\n     */\r\n    getChatObject(){\r\n        return {\r\n            type: this.type,\r\n            id: this.id,\r\n            chatName: this.chatName,\r\n            latestMessage: this.getLatestMessageObject(),\r\n            unreadMessages: this.unreadMessages\r\n        };\r\n    }\r\n    /*\r\n        an object with the latest message is returned\r\n     */\r\n    getLatestMessageObject(){\r\n        /*\r\n            are there messages?\r\n        */\r\n        if(this.messages.length === 0){\r\n            return null;\r\n        }else{\r\n            const lm = this.getFirstMessage();\r\n            return {\r\n                msgString: lm.getChatViewMsgString(),\r\n                dateString: lm.getChatViewDateString(),\r\n                date: lm.date\r\n            };\r\n        }\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get chatName() {\r\n        return this._chatName;\r\n    }\r\n\r\n    set chatName(value) {\r\n        this._chatName = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get unreadMessages() {\r\n        return this._unreadMessages;\r\n    }\r\n\r\n    set unreadMessages(value) {\r\n        this._unreadMessages = value;\r\n    }\r\n\r\n    get reachedTopMessages() {\r\n        return this._reachedTopMessages;\r\n    }\r\n\r\n    set reachedTopMessages(value) {\r\n        this._reachedTopMessages = value;\r\n    }\r\n}\r\n","import chatSocket from \"../chatSocket\";\r\nimport {Chat} from \"./chat\";\r\n\r\nexport class NormalChat extends Chat{\r\n\r\n    _otherUser;\r\n    _isTyping = false;\r\n\r\n    constructor(id,chatName,uid,unreadMessages = 0) {\r\n        super('normalChat',id,chatName);\r\n        this.otherUser = uid;\r\n        this.unreadMessages = unreadMessages;\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return [\r\n                {\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                }\r\n            ];\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = true;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = false;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n\r\n    get otherUser() {\r\n        return this._otherUser;\r\n    }\r\n\r\n    set otherUser(value) {\r\n        this._otherUser = value;\r\n    }\r\n\r\n    get isTyping() {\r\n        return this._isTyping;\r\n    }\r\n\r\n    set isTyping(value) {\r\n        this._isTyping = value;\r\n    }\r\n}","import chatSocket from \"../chatSocket\";\r\nimport {Chat} from \"./chat\";\r\n\r\nexport class GroupChat extends Chat{\r\n    //array with uids\r\n    _users = [];\r\n    //Array mit uids von den usern, die gerade schreibem\r\n    _usersTyping = [];\r\n\r\n    constructor(id,chatName,uids,unreadMessages = 0) {\r\n        super('groupChat',id,chatName);\r\n        this.users = uids;\r\n        this.unreadMessages = unreadMessages;\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n\r\n            let rc = [];\r\n            for(let i=0;i<this.usersTyping.length;i++){\r\n                const user = chatSocket.users.get(this.usersTyping[i]);\r\n                rc.push({\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                });\r\n            }\r\n            return rc;\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der am neuestem schriebt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(!this.isTyping(uid)){\r\n                /*\r\n                    the user is added to the currently typing users\r\n                 */\r\n                this.usersTyping.push(uid);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(this.isTyping(uid)){\r\n                /*\r\n                    user is removed from the array of currently typing users\r\n                 */\r\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        returns true if the uid is member of the chat and not self\r\n     */\r\n    isMember(uid){\r\n        if(uid === chatSocket.userSelf.uid)\r\n            return false;\r\n        return this.users.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns true if the user is currently typing\r\n     */\r\n    isTyping(uid){\r\n        return this.usersTyping.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns the index of a currently typing user\r\n     */\r\n    getIndexOfTyping(uid){\r\n        return this.usersTyping.findIndex(e => e === uid);\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get usersTyping() {\r\n        return this._usersTyping;\r\n    }\r\n\r\n    set usersTyping(value) {\r\n        this._usersTyping = value;\r\n    }\r\n}","import {NormalChat} from \"./chat/normalChat\";\r\nimport chatSocket from \"./chatSocket\";\r\nimport User from \"./User\";\r\nimport Message from \"./message/message\";\r\nimport {getDispatch} from 'reactn';\r\nimport {globalData} from \"../global/globalData\";\r\nimport {makeRequest} from \"../global/requests\";\r\n\r\nexport default class TempChatLoader{\r\n\r\n    _isShown = false;\r\n    _chatNow;\r\n    /*\r\n        a new temporary chat gets created.\r\n        parameters uid and username required\r\n     */\r\n    createNew(uid,username){\r\n        this.chatNow = new NormalChat(0, username, uid);\r\n    }\r\n    /*\r\n        is the current tempChat already the one with this uid?\r\n     */\r\n    doesExist(uid){\r\n        if(this.chatNow === undefined)\r\n            return false;\r\n        return this.chatNow.otherUser === uid;\r\n    }\r\n    /*\r\n        tempChat gets shown\r\n     */\r\n    show(){\r\n        this.isShown = true;\r\n        getDispatch().showTempChat(this.chatNow);\r\n    }\r\n\r\n    update(){\r\n        getDispatch().updateTempChat(this.chatNow);\r\n    }\r\n\r\n    hide(){\r\n        this.isShown = false;\r\n        getDispatch().hideTempChat();\r\n    }\r\n    /*\r\n        a new normalChat is created out of the current tempChat\r\n     */\r\n    async createNewNormalChat(msg){\r\n\r\n        /*\r\n            the request gets sent to the server\r\n         */\r\n        const otherUid = this.chatNow.otherUser;\r\n        const otherUsername = this.chatNow.chatName;\r\n\r\n        const config = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                uid: otherUid,\r\n                username: otherUsername,\r\n                message: {\r\n                    type: globalData.messageTypes.normalMessage,\r\n                    content: {\r\n                        text: msg,\r\n                        mentions: [],\r\n                        media: []\r\n                    }\r\n                }\r\n            })\r\n        };\r\n\r\n        const response = await makeRequest('/user/chat', config);\r\n\r\n        if(response.ok){\r\n\r\n            const data = await response.json();\r\n\r\n            if(chatSocket.users.getIndex(otherUid) === -1){\r\n                chatSocket.users.add(otherUid,new User(otherUid,otherUsername));\r\n            }\r\n            const otherUser = chatSocket.users.get(otherUid);\r\n\r\n            const newChat = new NormalChat(data.ncid,otherUsername,otherUid);\r\n            /*\r\n                chat gets added to user\r\n             */\r\n            otherUser.normalChat = newChat.id;\r\n            /*\r\n                chat is added in binsearchArray\r\n             */\r\n            chatSocket.chats.normal.add(data.ncid,newChat);\r\n            /*\r\n                message is added to chat\r\n             */\r\n            const message = new Message(\r\n                data.mid,\r\n                chatSocket.userSelf.uid,\r\n                newChat,\r\n                new Date(Date.now()),\r\n                globalData.messageTypes.normalMessage,\r\n                {\r\n                    text: msg,\r\n                    mentions: [],\r\n                    media: []\r\n                }\r\n            );\r\n            newChat.messages.add(message.mid,message);\r\n\r\n            //args: chat\r\n            getDispatch().addChat(newChat);\r\n            /*\r\n                currentChat gets changed\r\n             */\r\n            getDispatch().selectChat(newChat);\r\n            /*\r\n                tempChat is hidden\r\n             */\r\n            this.hide();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    get isShown() {\r\n        return this._isShown;\r\n    }\r\n\r\n    set isShown(value) {\r\n        this._isShown = value;\r\n    }\r\n\r\n    get chatNow() {\r\n        return this._chatNow;\r\n    }\r\n\r\n    set chatNow(value) {\r\n        this._chatNow = value;\r\n    }\r\n}\r\n\r\n","import io from 'socket.io-client';\r\nimport User from \"./User\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\nimport {NormalChat} from './chat/normalChat';\r\nimport {GroupChat} from \"./chat/groupChat\";\r\nimport EventHandler from \"../util/Event\";\r\nimport TempChatLoader from \"./tempChatLoader\";\r\nimport {getGlobal,getDispatch} from 'reactn';\r\nimport {makeRequest} from \"../global/requests\";\r\n\r\nclass ChatSocket{\r\n\r\n    _socket;\r\n    _userSelf = {\r\n        uid: 0,\r\n        username: \"\"\r\n    };\r\n    _users = new BinSearchArray();\r\n    _chats = {\r\n        normal: new BinSearchArray(),\r\n        group: new BinSearchArray()\r\n    };\r\n    _event = new EventHandler();\r\n    _finishedLoading = false;\r\n    /*\r\n        normalchat not saved in the database\r\n     */\r\n    _temporaryChat = new TempChatLoader();\r\n    _initCalled = false;\r\n\r\n    destruct(){\r\n\r\n        if(this.socket) {\r\n            this.socket.removeAllListeners();\r\n            this.socket.disconnect();\r\n        }\r\n        this.initCalled = false;\r\n    }\r\n\r\n    async init(){\r\n\r\n        const {uid,username} = getGlobal().userSelf;\r\n        /*\r\n            user-Object is created\r\n         */\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n\r\n        this.initCalled = true;\r\n\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n\r\n        this.socket = io.connect('/', {secure: true});\r\n        /*\r\n            userInfo wird an client gesendet\r\n         */\r\n        this.socket.emit('auth', getGlobal().authTokens);\r\n        /*\r\n            is called when user is initialized\r\n         */\r\n        this.socket.on('initialized',() => {\r\n\r\n            this.initChats();\r\n        });\r\n        /*\r\n            msg-handler\r\n         */\r\n        this.socket.on('chat message',data => {\r\n            /*\r\n                gets chat of msg\r\n                adds this message to chat\r\n            */\r\n            const chat = this.getChat(\r\n                data.chat.type,\r\n                data.chat.id\r\n            );\r\n            if(chat !== null) {\r\n                const isCurrentChat = this.isCurrentChat(\r\n                    chat.type,\r\n                    chat.id\r\n                );\r\n                chat.addMessage(\r\n                    data.uid,\r\n                    data.mid,\r\n                    data.type,\r\n                    data.content\r\n                );\r\n                /*\r\n                    hasNewMsg gets updated\r\n                    if current chat --> false\r\n                 */\r\n                chat.hasNewMsg = !isCurrentChat;\r\n                /*\r\n                    if chat is not currentChat, unreadMessages gets incremented\r\n                 */\r\n                chat.unreadMessages ++;\r\n                /*\r\n                    new message event is triggered\r\n                 */\r\n                this.event.trigger(\r\n                    'new message',\r\n                    data.chat.type,\r\n                    data.chat.id\r\n                );\r\n            }\r\n        });\r\n        /*\r\n            started typing\r\n         */\r\n        this.socket.on('started typing',data => {\r\n            /*\r\n                chat is searched\r\n             */\r\n            const chat = this.getChat(\r\n                data.chat.type,\r\n                data.chat.id\r\n            );\r\n            chat.startedTyping(data.uid);\r\n        });\r\n        /*\r\n            stopped typing\r\n         */\r\n        this.socket.on('stopped typing',data => {\r\n            /*\r\n                chat is searched\r\n             */\r\n            const chat = this.getChat(\r\n                data.chat.type,\r\n                data.chat.id\r\n            );\r\n            chat.stoppedTyping(data.uid);\r\n        });\r\n        /*\r\n            the result of the search in new chat\r\n         */\r\n        this.socket.on('users-noChat',data => {\r\n            chatSocket.event.trigger('users-noChat',data);\r\n        });\r\n        /*\r\n            the user has been added to a new chat\r\n         */\r\n        this.socket.on(\"new chat\",data => {\r\n            this.addNewChat(data);\r\n        });\r\n        /*\r\n            Bei disconnect wird Seite neu geladen\r\n         */\r\n        this.socket.on('disconnect',() => {\r\n            setTimeout(function() {\r\n\r\n                alert('Verbindung verloren! Seite wird neu geladen');\r\n                // eslint-disable-next-line no-restricted-globals\r\n                location.reload();\r\n            },1000);\r\n        });\r\n    }\r\n\r\n    async initChats(){\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        /*\r\n            chats are requested\r\n         */\r\n        const response = await makeRequest('/chats', config);\r\n\r\n        if(response.status === 200) {\r\n\r\n            const data = await response.json();\r\n            for (let i = 0; i < data.length; i++) {\r\n                if (data[i].type === 'normalChat') {\r\n                    /*\r\n                        normalChat is added\r\n                     */\r\n                    this.addNewNormalChat(data[i]);\r\n                } else if (data[i].type === 'groupChat') {\r\n                    /*\r\n                        groupChat is added\r\n                     */\r\n                    this.addNewGroupChat(data[i]);\r\n                }\r\n            }\r\n        }\r\n        this.finishedLoading = true;\r\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\r\n    }\r\n\r\n    getChatArraySortedByDate(){\r\n\r\n        function getMessageTime (chat) {\r\n            const c = chat.latestMessage;\r\n            if(c !== null)\r\n                return c.date.getTime();\r\n            return new Date(0).getTime();\r\n        }\r\n\r\n        function getMaxDate (chats,iFrom) {\r\n            let max = iFrom;\r\n            for(let i = iFrom+1;i<chats.length;i++){\r\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\r\n                    max = i;\r\n            }\r\n            return max;\r\n        }\r\n        function swap (items, firstIndex, secondIndex) {\r\n            let temp = items[firstIndex];\r\n            items[firstIndex] = items[secondIndex];\r\n            items[secondIndex] = temp;\r\n        }\r\n        /*\r\n            Array is cloned\r\n         */\r\n        function cloneArr (arr) {\r\n            const clone = new Array(arr.length);\r\n            for(let i=0;i<arr.length;i++){\r\n                const chat = arr[i].value;\r\n                clone[i] = chat.getChatObject();\r\n            }\r\n            return clone;\r\n        }\r\n        /*\r\n            es wird ein sortiertes Array zurückgegeben\r\n         */\r\n        function getSorted (chats) {\r\n            //Array wird erzeugt\r\n            const sorted = cloneArr(chats);\r\n            /*\r\n                es wird immer das höchste eingefügt, um Array zu sortieren\r\n             */\r\n            for(let i=0;i<sorted.length-1;i++){\r\n                let max = getMaxDate(sorted,i);\r\n                swap(sorted,i,max);\r\n            }\r\n            return sorted;\r\n        }\r\n        /*\r\n            Arrays werden gemerged\r\n         */\r\n        function mergeArr (arr1,arr2) {\r\n\r\n            const merged = new Array(arr1.length + arr2.length);\r\n            let p1 = 0;\r\n            let p2 = 0;\r\n            for(let i=0;i<merged.length;i++){\r\n                if(! (p2 < arr2.length)){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else if (! (p1 < arr1.length)){\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else{\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }\r\n            }\r\n            return merged;\r\n        }\r\n        const ncSorted = getSorted(this.chats.normal);\r\n        const gcSorted = getSorted(this.chats.group);\r\n\r\n        return mergeArr(ncSorted, gcSorted);\r\n    }\r\n\r\n    isCurrentChat(type,id){\r\n        const currentChat = getGlobal().currentChat;\r\n        return currentChat.type === type && currentChat.id === id;\r\n    };\r\n\r\n    getChat(type,id){\r\n        /*\r\n            type can be:\r\n                normalChat\r\n                tempChat\r\n                groupChat\r\n         */\r\n        if(type === 'normalChat')\r\n            return this.chats.normal.get(id);\r\n        else if(type === 'tempChat') {\r\n            return this.temporaryChat.chatNow;\r\n        }\r\n        else if(type === 'groupChat')\r\n            return this.chats.group.get(id);\r\n    }\r\n    /*\r\n        a new chat gets added\r\n     */\r\n    addNewChat(data){\r\n\r\n        let newChat;\r\n\r\n        if(data.type === 'normalChat'){\r\n            /*\r\n                new normalChat gets created\r\n             */\r\n            newChat = this.addNewNormalChat(data);\r\n\r\n        }else if(data.type === 'groupChat'){\r\n\r\n            newChat = this.addNewGroupChat((data));\r\n        }\r\n        newChat.unreadMessages = 1;\r\n        /*\r\n            event gets triggered\r\n         */\r\n        getDispatch().addChat(newChat);\r\n    }\r\n    /*\r\n        a new normalChat gets added\r\n     */\r\n    addNewNormalChat(data){\r\n        /*\r\n            check if the other user does already exist\r\n                if not --> gets created\r\n         */\r\n        let otherUser;\r\n        if(this.users.getIndex(data.members[0].uid) === -1){\r\n            otherUser = new User(\r\n                data.members[0].uid,\r\n                data.members[0].username\r\n            );\r\n            this.users.add(otherUser.uid,otherUser);\r\n        }else{\r\n            otherUser = this.users.get(data.members[0].uid);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat = new NormalChat(\r\n            data.id,\r\n            data.chatName,\r\n            otherUser.uid,\r\n            data.unreadMessages\r\n        );\r\n        /*\r\n            normalChat is set at other user\r\n         */\r\n        otherUser.normalChat = newChat.id;\r\n        /*\r\n            first message is initialized\r\n         */\r\n        newChat.initFirstMessage(data.firstMessage);\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.normal.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n    /*\r\n        a new groupChat gets added\r\n     */\r\n    addNewGroupChat(data){\r\n        /*\r\n            check which do not exist already --> get added\r\n         */\r\n        const members = [];\r\n\r\n        for(let i=0;i<data.members.length;i++) {\r\n\r\n            const member = data.members[i];\r\n            /*\r\n                does the user already exist?\r\n             */\r\n            let user;\r\n            if (this.users.getIndex(member.uid) === -1) {\r\n                user = new User(\r\n                    member.uid,\r\n                    member.username\r\n                );\r\n                this.users.add(user.uid, user);\r\n            } else {\r\n                user = this.users.get(member.uid);\r\n            }\r\n            /*\r\n                member gets added\r\n             */\r\n            members.push(user.uid);\r\n            /*\r\n                chat is added at user\r\n             */\r\n            user.addGroupChat(data.id);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat =\r\n            new GroupChat(\r\n                data.id,\r\n                data.chatName,\r\n                members,\r\n                data.unreadMessages\r\n            );\r\n        /*\r\n            first message is initialized\r\n         */\r\n        newChat.initFirstMessage(data.firstMessage);\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.group.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n\r\n    get socket() {\r\n        return this._socket;\r\n    }\r\n\r\n    set socket(value) {\r\n        this._socket = value;\r\n    }\r\n\r\n    get userSelf() {\r\n        return this._userSelf;\r\n    }\r\n\r\n    set userSelf(value) {\r\n        this._userSelf = value;\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get chats() {\r\n        return this._chats;\r\n    }\r\n\r\n    set chats(value) {\r\n        this._chats = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get finishedLoading() {\r\n        return this._finishedLoading;\r\n    }\r\n\r\n    set finishedLoading(value) {\r\n        this._finishedLoading = value;\r\n    }\r\n\r\n    get temporaryChat() {\r\n        return this._temporaryChat;\r\n    }\r\n\r\n    set temporaryChat(value) {\r\n        this._temporaryChat = value;\r\n    }\r\n\r\n    get initCalled() {\r\n        return this._initCalled;\r\n    }\r\n\r\n    set initCalled(value) {\r\n        this._initCalled = value;\r\n    }\r\n}\r\n\r\nlet chatSocket = new ChatSocket();\r\n\r\nexport function resetChatSocket(){\r\n    chatSocket.destruct();\r\n    chatSocket = new ChatSocket();\r\n}\r\n\r\nexport default chatSocket;\r\n","import React,{Component} from \"reactn\";\r\nimport {Link} from \"react-router-dom\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class ChatItem extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lastMsg: undefined,\r\n            typeMsg: ''\r\n        }\r\n    }\r\n    /*\r\n        is this chat selected?\r\n     */\r\n    isSelected = () => {\r\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\r\n    };\r\n    /*\r\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\r\n        um die typeMsg zu aktualisieren\r\n     */\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        let typeMsg = '';\r\n        /*\r\n            wenn latestuserTyping = null, schreibt gerade keiner\r\n         */\r\n        const userTyping = chat.getLatestUserTyping();\r\n        if(userTyping !== null){\r\n            typeMsg = userTyping.username + \" schreibt...\";\r\n        }\r\n        //state wird aktualisiert\r\n        this.setState({\r\n            typeMsg: typeMsg\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const renderUnreadMsg = () => {\r\n            if(this.props.unreadMessages === 0)\r\n                return null;\r\n            else\r\n                return(\r\n                    <div className=\"newMsg-number\">\r\n                        {this.props.unreadMessages}\r\n                    </div>\r\n                );\r\n        };\r\n        /*\r\n            in der unteren Hälfte wird angezeigt wer schreibt\r\n            schreibt keiner, wird letzte Nachricht angezeigt\r\n         */\r\n        const renderLowerHalf = () => {\r\n            if(this.state.typeMsg === '')\r\n                return (\r\n                    <div className=\"w-100 lastMsg\">\r\n                        {renderMsg()}\r\n                        {renderDate()}\r\n                    </div>\r\n                );\r\n            else{\r\n                return (\r\n                    <div className=\"w-100 typeMsg\">\r\n                        {this.state.typeMsg}\r\n                    </div>\r\n                );\r\n            }\r\n        };\r\n\r\n        const renderMsg = () => {\r\n            if(this.props.latestMessage)\r\n                return(\r\n                    <span>\r\n                        {this.props.latestMessage.msgString}\r\n                    </span>\r\n                );\r\n            else\r\n                return(\r\n                    <span>\r\n                        Noch keine Nachrichten vorhanden\r\n                    </span>\r\n                );\r\n        };\r\n\r\n        const renderDate = () => {\r\n            if(this.props.latestMessage)\r\n                return(\r\n                    <div className=\"lastMsg-date\">\r\n                        {this.props.latestMessage.dateString}\r\n                    </div>\r\n                );\r\n            else\r\n                return null;\r\n        };\r\n\r\n        const getLink = () => {\r\n            if(this.props.type === 'normalChat'){\r\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\r\n            }else if(this.props.type === 'groupChat'){\r\n                return '/chat/group/' + this.props.id;\r\n            }else if(this.props.type === 'tempChat'){\r\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\r\n            }\r\n        };\r\n\r\n        return(\r\n            <li className={(this.isSelected() ? \"selected \" : \"\")}>\r\n                <Link to={getLink()}>\r\n                    <div className=\"w-100\">\r\n                        <strong>\r\n                            {this.props.name}\r\n                        </strong>\r\n                        {renderUnreadMsg()}\r\n                    </div>\r\n                    {renderLowerHalf()}\r\n                </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        /*\r\n            event listener werden angelegt\r\n         */\r\n        //if(chat)\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n        /*else{\r\n            console.log('error',chatSocket.chats.group,this.props.type,this.props.id)\r\n        }*/\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did component update?\r\n         */\r\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\r\n            //Listeners get replaced\r\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n\r\n            //typeMsg gets deleted\r\n            this.setState({\r\n                typeMsg: ''\r\n            });\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        /*\r\n            event listener werden entfernt\r\n         */\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport ChatSearchBox from \"./ChatSearchBox\";\r\nimport ChatItem from \"./ChatItem\";\r\n\r\nimport './chatList.scss';\r\n\r\nexport default class ChatList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //the current searchValue at the chatlist\r\n            searchValue: ''\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const paddingTop = this.props.paddingTop || '1rem';\r\n        let found = 0;\r\n\r\n        const showNothingFoundMsg = () => {\r\n            if(found === 0)\r\n                return(\r\n                    <span>\r\n                        Nichts gefunden\r\n                    </span>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderTempChat = () => {\r\n            /*\r\n                is tempChat not null?\r\n             */\r\n            if(this.global.tempChat){\r\n                return(\r\n                    <ChatItem\r\n                        key={-1}\r\n                        id={0}\r\n                        type={'tempChat'}\r\n                        name={this.global.tempChat.chatName}\r\n                        unreadMessages={0}\r\n                        latestMessage={null}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div style={{\r\n                paddingTop: paddingTop,\r\n                height: '100%'\r\n            }}>\r\n                <div className=\"chat-c-list\">\r\n                    <ChatSearchBox\r\n                        onSearch={searchValue => {\r\n                            this.setState({\r\n                                searchValue: searchValue\r\n                            })\r\n                        }}\r\n                    />\r\n\r\n                    <ul className=\"chat-list\">\r\n                        {renderTempChat()}\r\n                        {this.global.chats.map((chat,i) => {\r\n                            if(chat.chatName.includes(this.state.searchValue)) {\r\n                                found++;\r\n                                return (\r\n                                    <ChatItem\r\n                                        key={i}\r\n                                        id={chat.id}\r\n                                        type={chat.type}\r\n                                        name={chat.chatName}\r\n                                        unreadMessages={chat.unreadMessages}\r\n                                        latestMessage={chat.latestMessage}\r\n                                    />\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })}\r\n                    </ul>\r\n                    {showNothingFoundMsg()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport './chatViewLoader.scss';\r\n\r\nexport default function ChatViewLoader (props){\r\n    return(\r\n        <div className=\"loader-init\">\r\n            <div className=\"col-sm-12 my-auto\">\r\n                <div className=\"init-container border rounded\">\r\n                    <div className=\"spinner-border text-secondary\"\r\n                         style={{\r\n                             width: '15rem',\r\n                             height: '15rem',\r\n                             borderWidth: '0.5rem'\r\n                         }}\r\n                         role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div className=\"loader-text\">{props.msg}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport { Picker } from 'emoji-mart';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\nimport {globalData} from \"../../../global/globalData\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\n\r\nimport './messageForm.scss';\r\n\r\nclass MessageForm extends Component{\r\n\r\n    _userTyping = false;\r\n    _typeEventEmitted = false;\r\n    _typeTimeout;\r\n    /*\r\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\r\n     */\r\n    _isTempChat;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            showEmoji: false\r\n        }\r\n    }\r\n\r\n    onTyping = event => {\r\n\r\n        this.setState({\r\n           message: event.target.value\r\n        });\r\n\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    handleTypeMessage = () => {\r\n        /*\r\n            type message get only handled if the chat is not temporary\r\n         */\r\n        if(!this.isTempChat) {\r\n\r\n            if (this.userTyping) {\r\n                clearTimeout(this.typeTimeout);\r\n            }\r\n            this.userTyping = true;\r\n            if (!this.typeEventEmitted) {\r\n                this.typeEventEmitted = true;\r\n                chatSocket.socket.emit('started typing');\r\n            }\r\n            this.typeTimeout = setTimeout(() => {\r\n                this.userTyping = false;\r\n                if (this.typeEventEmitted) {\r\n                    this.typeEventEmitted = false;\r\n                    chatSocket.socket.emit('stopped typing');\r\n                }\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n        /*\r\n            es kann keine leere Nachricht geschickt werden\r\n         */\r\n        if(this.state.message !== ''){\r\n            const message = this.state.message;\r\n            /*\r\n                input wird geleert\r\n             */\r\n            this.setState({\r\n                message: ''\r\n            });\r\n            if(this.isTempChat) {\r\n\r\n                const {pathname} = this.props.location;\r\n                /*\r\n                    the chat is created\r\n                 */\r\n                chatSocket.temporaryChat.createNewNormalChat(message)\r\n                    .then(redirect => {\r\n                        if(redirect) {\r\n                            this.props.history.replace(\"/chat\");\r\n                            this.props.history.replace(pathname);\r\n                        }\r\n                    });\r\n            }else{\r\n\r\n                this.sendMessage(message)\r\n                    .then(mid => {\r\n                        /*\r\n                            message is added to chat\r\n                         */\r\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\r\n                        chat.addMessage(\r\n                            chatSocket.userSelf.uid,\r\n                            mid,\r\n                            globalData.messageTypes.normalMessage,\r\n                            {\r\n                                text: message,\r\n                                mentions: [],\r\n                                media: []\r\n                            }\r\n                        );\r\n                    })\r\n                    .catch(err => {});\r\n            }\r\n        }\r\n    };\r\n\r\n    sendMessage = async msg => {\r\n        /*\r\n            message is sent to server\r\n         */\r\n        const config = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                type: globalData.messageTypes.normalMessage,\r\n                content: {\r\n                    text: msg,\r\n                    mentions: [],\r\n                    media: []\r\n                }\r\n            })\r\n        };\r\n        const response = await makeRequest('/message', config);\r\n\r\n        if (response.ok) {\r\n\r\n            const data = await response.json();\r\n            /*\r\n                mid is returned\r\n             */\r\n            return data.mid;\r\n        }\r\n        return new Error();\r\n    };\r\n\r\n    onEmojiInput = emoji => {\r\n\r\n        this.setState({\r\n            message: this.state.message + emoji.native\r\n        });\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    toggleEmoji = event => {\r\n        this.setState(state => ({\r\n            showEmoji: !state.showEmoji\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Dummy>\r\n                <form onSubmit={this.onSubmit}\r\n                      className=\"msg-form\">\r\n                    <div className=\"message-input\">\r\n                        <input autoComplete=\"off\"\r\n                               placeholder=\"Nachricht:\"\r\n                               value={this.state.message}\r\n                               onChange={this.onTyping}\r\n                        />\r\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\r\n                           onClick={this.toggleEmoji}\r\n                        />\r\n                    </div>\r\n                    <button className=\"btn-submit\" type=\"submit\">\r\n                        <i className=\"far fa-paper-plane fa-2x\"\r\n                           data-toggle=\"tooltip\"\r\n                           title=\"send message\" />\r\n                    </button>\r\n                </form>\r\n                {this.state.showEmoji ?\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        bottom: '60px',\r\n                        right: '50px',\r\n                        width: '350px',\r\n                        height: '425px'\r\n                    }}>\r\n                        <Picker onSelect={this.onEmojiInput}/>\r\n                    </div>\r\n                : null}\r\n            </Dummy>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n            isTempChat gets set\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            isTempChat gets updated\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    get userTyping() {\r\n        return this._userTyping;\r\n    }\r\n\r\n    set userTyping(value) {\r\n        this._userTyping = value;\r\n    }\r\n\r\n    get typeEventEmitted() {\r\n        return this._typeEventEmitted;\r\n    }\r\n\r\n    set typeEventEmitted(value) {\r\n        this._typeEventEmitted = value;\r\n    }\r\n\r\n    get typeTimeout() {\r\n        return this._typeTimeout;\r\n    }\r\n\r\n    set typeTimeout(value) {\r\n        this._typeTimeout = value;\r\n    }\r\n\r\n    get isTempChat() {\r\n        return this._isTempChat;\r\n    }\r\n\r\n    set isTempChat(value) {\r\n        this._isTempChat = value;\r\n    }\r\n}\r\n\r\nexport default withRouter(MessageForm);","import React,{Component} from \"reactn\";\r\nimport ReactDOM from 'react-dom';\r\nimport MessageForm from \"./MessageForm\";\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\nimport Message from \"./message/Message\";\r\nimport {isDifferentDay} from '../../../chatData/message/message'\r\n\r\nimport './chatContainer.scss';\r\n\r\nexport default class ChatContainer extends Component{\r\n\r\n    _isMounted = false;\r\n    _messages;\r\n    _messagesNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\r\n        this.state = {\r\n            msgLoading: false,\r\n            scrollToBottom: 0,\r\n            messages: [],\r\n            typeMessages: []\r\n        };\r\n    }\r\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\r\n    scrollHandler = event => {\r\n        this.setState({\r\n            scrollToBottom: this.getScrollToBottom()\r\n        });\r\n        /*\r\n            wenn oben angelangt, werden Nachrichten geladen\r\n         */\r\n        if (this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\r\n    };\r\n\r\n    assignMessagesRef = target => {\r\n        this.messages = target;\r\n    };\r\n\r\n    loadMessages = () => {\r\n\r\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\r\n        /*\r\n            loader is only shown, if top not reached\r\n         */\r\n        if(!chat.reachedTopMessages)\r\n            this.setState({\r\n                msgLoading: true\r\n            });\r\n        /*\r\n            messages are loaded\r\n         */\r\n        chat.loadMessages(10)\r\n            .then(messages => {\r\n                /*\r\n                    loader is hidden\r\n                    messages are added\r\n                 */\r\n                this.dispatch.addLoadedMessages(messages);\r\n                this.setState(state => ({\r\n                    msgLoading: false\r\n                }));\r\n                this.setScrollToBottom(this.state.scrollToBottom);\r\n            })\r\n            .catch(err => this.setState({\r\n                msgLoading: false\r\n            }));\r\n    };\r\n    /*\r\n        is called when the selected chat changed\r\n     */\r\n    chatChanged = () => {\r\n        /*\r\n            if scrollToBottom is 0, the messages are loaded\r\n         */\r\n        if (this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\r\n\r\n        this.chatChanged();\r\n\r\n        this.isMounted = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn das der Fall ist:\r\n                wird messages loaded listener auf neuen chat angewandt\r\n                scrollToBottom wird auf 0 gesetzt\r\n                scrolltop wird überprüft\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n\r\n            //scrollToBottom wird auf 0 gesetzt\r\n            this.setScrollToBottom(0);\r\n\r\n            this.chatChanged();\r\n        }\r\n        /*\r\n            wenn scrollToBottom 0 wird zu bottom gescrollt\r\n         */\r\n        if(this.state.scrollToBottom === 0) {\r\n            this.setScrollToBottom(0);\r\n            /*\r\n                newMessages is set to 0\r\n             */\r\n            if(this.global.currentChat.newMessages > 0)\r\n                this.setGlobal(global => ({\r\n                   currentChat: {\r\n                       ...global.currentChat,\r\n                       newMessages: 0\r\n                   }\r\n                }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const showLoaderTop = () => {\r\n            if(this.state.msgLoading)\r\n                return(\r\n                    <div className=\"messageLoader-top\">\r\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderNewMessages = () => {\r\n\r\n            if(this.global.currentChat.newMessages > 0)\r\n                return(\r\n                    <div id=\"scroll-down-number\" className=\"number\">\r\n                        {this.global.currentChat.newMessages}\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderBtnToBottom = () => {\r\n            if(this.isMounted) {\r\n                if (this.getScrollToBottom() > 10) {\r\n                    return (\r\n                        <div id=\"messages-bottom\"\r\n                             className=\"messages-bottom\"\r\n                             onClick={() => {\r\n                                 this.setState({\r\n                                     scrollToBottom: 0\r\n                                 })\r\n                             }}\r\n                        >\r\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\r\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\r\n                            </div>\r\n                            {renderNewMessages()}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        let lastDate = new Date(0);\r\n        /*\r\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\r\n            wird ein Container mit Datum gerendert\r\n         */\r\n        const renderDateContainer = msg => {\r\n            if(isDifferentDay(msg.date,lastDate)){\r\n                lastDate = msg.date;\r\n                return(\r\n                    <div className = \"date-container\">\r\n                        <div>\r\n                            {msg.dateString}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            lastDate = msg.date;\r\n            return null;\r\n        };\r\n\r\n        const renderAlertNoMessages = () => {\r\n            if(this.global.currentChat.messages.length === 0)\r\n                return(\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\"\r\n                     onScroll={this.scrollHandler}\r\n                     ref={this.assignMessagesRef}\r\n                >\r\n                    {showLoaderTop()}\r\n                    {this.global.currentChat.messages.map((msg,i) => {\r\n                        return (\r\n                            <div key={i}>\r\n                                {renderDateContainer(msg)}\r\n                                <Message\r\n                                    msg={msg}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {renderAlertNoMessages()}\r\n                    {renderBtnToBottom()}\r\n                </div>\r\n                <MessageForm\r\n                    chatType={this.props.chatType}\r\n                    chatId={this.props.chatId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.isMounted = false;\r\n    }\r\n\r\n    get isMounted() {\r\n        return this._isMounted;\r\n    }\r\n\r\n    set isMounted(value) {\r\n        this._isMounted = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get messagesNode() {\r\n        return this._messagesNode;\r\n    }\r\n\r\n    set messagesNode(value) {\r\n        this._messagesNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport MessageForm from \"./chatContainer/MessageForm\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class TempChatContainer extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\">\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                </div>\r\n                <MessageForm\r\n                    chatType={'tempChat'}\r\n                    chatId={0}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        chatSocket.temporaryChat.show();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.uid !== this.props.uid)\r\n            chatSocket.temporaryChat.update();\r\n    }\r\n    componentWillUnmount() {\r\n        chatSocket.temporaryChat.hide();\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport function AddressNotValid() {\r\n    return(\r\n        <div>\r\n            <h2>ungültige Addresse</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function CannotWriteYourself(){\r\n    return(\r\n        <div>\r\n            <h2>Du kannst dir selbst nicht schreiben</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function BlockedByThisUser(){\r\n    return(\r\n        <div>\r\n            <h2>Dieser User hat dich blockiert</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function UserNotExisting(){\r\n    return(\r\n        <div>\r\n            <h2>Dieser User existiert nicht</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function NoMemberInPublicChat(){\r\n    return (\r\n        <div>\r\n            <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function NoAuthorization(){\r\n    return (\r\n        <div>\r\n            <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function ChatNotExisting(){\r\n    return (\r\n        <div>\r\n            <h2>Dieser Chat existiert nicht</h2>\r\n        </div>\r\n    );\r\n}\r\nexport function GeneralError(){\r\n    return (\r\n        <div>\r\n            <h2>Fehler</h2>\r\n        </div>\r\n    );\r\n}","import React, {Component} from \"reactn\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./chatContainer/ChatContainer\";\r\nimport TempChatContainer from \"./TempChatContainer\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/User\";\r\nimport {\r\n    AddressNotValid,\r\n    BlockedByThisUser,\r\n    CannotWriteYourself,\r\n    UserNotExisting\r\n} from \"./chatViewErrorMessages\";\r\n\r\nexport default class NormalChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: UserErrorCode.none\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if(this.state.error === UserErrorCode.nan){\r\n                return(\r\n                    <AddressNotValid/>\r\n                );\r\n            }\r\n            else if(this.state.error === UserErrorCode.isSelf){\r\n                return(\r\n                    <CannotWriteYourself/>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if(this.state.loaded){\r\n\r\n                if(this.state.error === UserErrorCode.none){\r\n\r\n                    return(\r\n                        <ChatContainer\r\n                            chatType={this.global.currentChat.type}\r\n                            chatId={this.global.currentChat.id}\r\n                        />\r\n                    )\r\n                }else if(this.state.error === UserErrorCode.tempChat){\r\n                    return(\r\n                        <TempChatContainer uid={this.state.uid}/>\r\n                    )\r\n                }else if(this.state.error === UserErrorCode.blocked){\r\n                    return(\r\n                        <BlockedByThisUser/>\r\n                    )\r\n                }else{\r\n                    return(\r\n                        <UserNotExisting/>\r\n                    )\r\n                }\r\n            }\r\n        };\r\n\r\n        return <div className=\"h-100\">\r\n            {renderLoader()}\r\n            {renderChat()}\r\n        </div>;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.userChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did uid change?\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            /*\r\n                is props.uid a number?\r\n             */\r\n            if(isNaN(this.props.uid)){\r\n                this.setState({\r\n                    error: UserErrorCode.nan\r\n                });\r\n            }\r\n            else{\r\n                this.userChanged();\r\n            }\r\n\r\n        }\r\n    }\r\n    /*\r\n        is called when the user changed and when the component mounted\r\n            this is checked after each update\r\n     */\r\n    userChanged = () => {\r\n\r\n        const uid = parseInt(this.props.uid);\r\n\r\n        /*\r\n            is the user self?\r\n         */\r\n        if(this.global.userSelf.uid === uid){\r\n            this.setState({\r\n                error: UserErrorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else {\r\n\r\n            const userExists = () => {\r\n\r\n                getUserNormalChat(uid)\r\n                    .then(res => {\r\n                        /*\r\n                            no error\r\n                                checks if existing or tempChat\r\n                         */\r\n                        if (res === UserErrorCode.none) {\r\n                            this.setState({\r\n                                error: res\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.users.get(uid).username,\r\n                                    uid: uid\r\n                                }\r\n                            }).then();\r\n                            /*\r\n                                normalChat is selected\r\n                             */\r\n                            this.selectNormalChat(uid);\r\n                            /*\r\n                                tempChat\r\n                             */\r\n                        } else if (res === UserErrorCode.tempChat) {\r\n                            this.setState({\r\n                                error: res\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\r\n                                    uid: uid\r\n                                }\r\n                            }).then();\r\n                            /*\r\n                                the temporary chat is selected\r\n                             */\r\n                            this.selectTempChat();\r\n                        }\r\n                        /*\r\n                            some error has occured, state is set\r\n                         */\r\n                        else{\r\n                           this.setState({\r\n                               error: UserErrorCode.error\r\n                           })\r\n                        }\r\n                        this.setState({\r\n                            loaded: true\r\n                        });\r\n\r\n                    })\r\n                    .catch(err => this.setState({\r\n                        error: UserErrorCode.error\r\n                    }));\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                userExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    userExists();\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                uid: parseInt(this.props.uid)\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        the tempChat is selected\r\n     */\r\n    selectTempChat(){\r\n        this.dispatch.showTempChat();\r\n    }\r\n    /*\r\n        a normalCHat is selected\r\n     */\r\n    selectNormalChat(uid){\r\n        /*\r\n            does the user exist?\r\n         */\r\n        if (chatSocket.users.getIndex(uid) === -1) {\r\n\r\n            this.setState({\r\n                error: UserErrorCode.userNotExisting\r\n            });\r\n        }else {\r\n            /*\r\n                chat is pulled from chatSocket\r\n             */\r\n            const id = chatSocket.users.get(uid).normalChat;\r\n            const chat = chatSocket.getChat('normalChat', id);\r\n\r\n            this.dispatch.selectChat(chat);\r\n        }\r\n    }\r\n    /*\r\n        property- display normalChat is removed from global\r\n     */\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n}","import React,{Component} from \"reactn\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\n\r\nclass UserOptions extends Component {\r\n\r\n    isSelfAdmin = () => {\r\n        return this.props.memberSelf.isAdmin;\r\n    };\r\n\r\n    isMemberSelf(){\r\n        return this.props.member.uid === this.global.userSelf.uid;\r\n    };\r\n\r\n    removeMemberFromChat = async () => {\r\n        if(this.isSelfAdmin()) {\r\n\r\n            const config = {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n\r\n            const response =\r\n                await makeRequest(\r\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid,\r\n                    config\r\n                );\r\n        }\r\n    };\r\n\r\n    makeMemberAdmin = async () => {\r\n        if(this.isSelfAdmin()) {\r\n\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n\r\n            const response =\r\n                await makeRequest(\r\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/giveAdmin',\r\n                    config\r\n                );\r\n\r\n        }\r\n    };\r\n\r\n    removeMemberAdmin = async () => {\r\n        if(this.isSelfAdmin()) {\r\n\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n\r\n            const response =\r\n                await makeRequest(\r\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/removeAdmin',\r\n                    config\r\n                );\r\n        }\r\n    };\r\n\r\n    render(){\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return (\r\n            <ul className=\"userOptions\">\r\n                <li key={0}>\r\n                    <Link to={pathname + \"/userInfo/\" + this.props.member.uid}>\r\n                        zeige {this.props.member.username} an\r\n                    </Link>\r\n                </li>\r\n                <li key={1}>\r\n                    <Link to={\"/chat/user/\" + this.props.member.uid}>\r\n                        Nachricht an {this.props.member.username}\r\n                    </Link>\r\n                </li>\r\n                {/*\r\n                    if the member is admin, he has more options\r\n                    */\r\n                    this.isSelfAdmin() && ! this.isMemberSelf() ?\r\n                        <Dummy>\r\n                            <li\r\n                                key={2}\r\n                                className=\"noLink\"\r\n                                onClick={this.removeMemberFromChat}\r\n                            >\r\n                                aus chat entfernen\r\n                            </li>\r\n                            {this.props.member.isAdmin ?\r\n                                <li\r\n                                    key={3}\r\n                                    className=\"noLink\"\r\n                                    onClick={this.removeMemberAdmin}\r\n                                >\r\n                                    admin status entfernen\r\n                                </li>\r\n                                :\r\n                                <li\r\n                                    key={4}\r\n                                    className=\"noLink\"\r\n                                    onClick={this.makeMemberAdmin}\r\n                                >\r\n                                    zu admin machen\r\n                                </li>\r\n                            }\r\n                        </Dummy>\r\n                        : null\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(UserOptions);","import React,{Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\n\r\nclass ChatOptions extends Component {\r\n\r\n    isSelfAdmin = () => {\r\n        return this.props.memberSelf.isAdmin;\r\n    };\r\n\r\n    leaveChat = async () => {\r\n\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        const response =\r\n            await makeRequest(\r\n                '/group/' + this.props.gcid + '/leave',\r\n                config\r\n            );\r\n\r\n        if(response.ok) {\r\n\r\n            const data = await response.json();\r\n\r\n            if(data.error){\r\n                console.log(data.error);\r\n            }\r\n        }\r\n    };\r\n\r\n    removeSelfAdmin = async () => {\r\n\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n\r\n        const response =\r\n            await makeRequest(\r\n                '/group/' + this.props.gcid + '/removeAdmin',\r\n                config\r\n            );\r\n\r\n        if(response.ok) {\r\n\r\n            const data = await response.json();\r\n\r\n            if(data.error){\r\n                console.log(data.error);\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return(\r\n            <ul className=\"chatOptions\">\r\n                {this.isSelfAdmin() ?\r\n                    <Dummy>\r\n                        <li key={0}>\r\n                            <Link to={pathname + \"/addUsers\"}>\r\n                                Benutzer hinzufügen\r\n                            </Link>\r\n                        </li>\r\n                        <li\r\n                            key={1}\r\n                            className=\"noLink\"\r\n                            onClick={this.removeSelfAdmin}\r\n                        >\r\n                            admin status entfernen\r\n                        </li>\r\n                    </Dummy>\r\n                    : null}\r\n                <li\r\n                    key={2}\r\n                    className=\"noLink\"\r\n                    onClick={this.leaveChat}\r\n                >\r\n                    Chat verlassen\r\n                </li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(ChatOptions);","import React,{Component} from \"react\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './modal.scss';\r\n\r\nclass Modal extends Component{\r\n\r\n    render() {\r\n        const clickedOutside = () => {\r\n            this.props.history.goBack();\r\n        };\r\n        return(\r\n            <div\r\n                className=\"modal-outer\"\r\n                onClick={clickedOutside}>\r\n                <div className=\"h-100\" style={{display: \"flex\"}}>\r\n\r\n                        <div\r\n                            className=\"modal-inner\"\r\n                            onClick={event => {event.stopPropagation()}}>\r\n                            <div\r\n                                className=\"btn-close\"\r\n                                onClick={() => {this.props.history.goBack()}}>\r\n                                &times;\r\n                            </div>\r\n                            {this.props.children}\r\n                        </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Modal);\r\n\r\nexport function ModalHeader(props){\r\n    return(\r\n        <div className=\"m-header\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ModalMain(props){\r\n    return(\r\n        <div className=\"m-main\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class UserItem extends Component{\r\n\r\n    clicked = event => {\r\n        if(this.props.isSelected){\r\n            this.props.deselectUser(this.props.index);\r\n        }else\r\n            this.props.selectUser(this.props.index);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <li key={this.props.index}\r\n                onClick={this.clicked}\r\n            >\r\n                <div className=\"username\">\r\n                    {this.props.username}\r\n                </div>\r\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\r\n                    <i className=\"fas fa-check\" />\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class extends Component {\r\n\r\n    scrollParentRef;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            error: errorCode.none,\r\n            /*\r\n                are there items left?\r\n             */\r\n            hasMore: true\r\n        }\r\n    }\r\n\r\n    searchChanged = event => {\r\n        this.setState({\r\n            searchValue: event.target.value,\r\n            searchResult: [],\r\n            hasMore: true\r\n        });\r\n    };\r\n    /*\r\n        more users are loaded\r\n     */\r\n    loadUsers = async () => {\r\n        try {\r\n\r\n            const response = await this.props.loadUsers(\r\n                this.state.searchValue,\r\n                this.state.searchResult.length\r\n            );\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0){\r\n                    this.setState({\r\n                        hasMore: false\r\n                    })\r\n                } else {\r\n                    this.setState(state => ({\r\n                        searchResult: state.searchResult.concat(data)\r\n                    }));\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        is called when an user is selected\r\n     */\r\n    selectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.selectUser(user.uid,user.username);\r\n    };\r\n\r\n    deselectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.deselectUser(user.uid);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Dummy>\r\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\r\n                    <input type=\"text\"\r\n                           className=\"form-control p-2 m-2\"\r\n                           placeholder=\"Benutzer suchen\"\r\n                           value={this.state.searchValue}\r\n                           onChange={this.searchChanged}\r\n                    />\r\n                </form>\r\n                <div\r\n                    className=\"selectUsers\"\r\n                    ref={ref => this.scrollParentRef = ref}\r\n                >\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={this.loadUsers}\r\n                        hasMore={this.state.hasMore}\r\n                        loader={\r\n                            <div className=\"loader\" key={-1}>\r\n                                <div\r\n                                    className=\"spinner-border text-secondary\"\r\n                                    role=\"status\"\r\n                                >\r\n                                    <span className=\"sr-only\">\r\n                                        Loading...\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        useWindow={false}\r\n                        getScrollParent={() => this.scrollParentRef}\r\n                    >\r\n                        <ul className=\"selectUsers\">\r\n                            {this.state.searchResult.map((item, index) => (\r\n                                <UserItem\r\n                                    key={index}\r\n                                    index={index}\r\n                                    uid={item.uid}\r\n                                    username={item.username}\r\n                                    selectUser={this.selectUser}\r\n                                    deselectUser={this.deselectUser}\r\n                                    isSelected={this.props.isUserSelected(item.uid)}\r\n                                />\r\n                            ))}\r\n                            {this.state.searchResult.length === 0 ?\r\n                                <div key={-1} className=\"nothingFound\">\r\n                                    Nichts gefunden!\r\n                                </div>\r\n                                :\r\n                                null\r\n                            }\r\n                        </ul>\r\n                    </InfiniteScroll>\r\n                </div>\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport UserList from \"./UserList\";\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nimport './selectUsers.scss';\r\n\r\nexport default class SelectUsers extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the users already selected\r\n             */\r\n            selectedUsers: [],\r\n            showOnlySelected: false\r\n        }\r\n    }\r\n    /*\r\n        gets called when a user gets selected\r\n     */\r\n    selectUser = (uid,username) => {\r\n        this.setState(state => ({\r\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\r\n        }));\r\n    };\r\n\r\n    deselectUser = (uid) => {\r\n        this.setState(state => {\r\n            const arrClone = [...state.selectedUsers];\r\n            const index = arrClone.findIndex(item => {\r\n                return item.uid === uid;\r\n            });\r\n            arrClone.splice(index,1);\r\n            return {\r\n                selectedUsers: arrClone\r\n            }\r\n        });\r\n    };\r\n\r\n    deselectIndex = index => {\r\n        this.deselectUser(this.state.selectedUsers[index].uid);\r\n    };\r\n\r\n    isUserSelected = (uid) => {\r\n        return this.state.selectedUsers.find(item => {\r\n            return item.uid === uid;\r\n        });\r\n    };\r\n    /*\r\n        an Array with the uids of the users gets returned to the parent component\r\n     */\r\n    btnNextClicked = event => {\r\n\r\n        this.props.onNext(this.state.selectedUsers);\r\n    };\r\n\r\n    render() {\r\n\r\n        const renderSelectedUsers = () => {\r\n            if(this.state.selectedUsers.length === 0){\r\n                return (\r\n                    <h4>\r\n                        Noch niemand ausgewählt\r\n                    </h4>);\r\n            }else{\r\n                return(\r\n                    <h4 className=\"w-100\">\r\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\r\n                              onClick={event => {\r\n                                  this.setState(state => ({\r\n                                      showOnlySelected: !state.showOnlySelected\r\n                                  }));\r\n                              }}\r\n                        >\r\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\r\n                        </span>\r\n                        &nbsp;ausgewählt\r\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\r\n                           onClick={this.btnNextClicked}\r\n                        />\r\n                    </h4>\r\n                )\r\n            }\r\n        };\r\n        /*\r\n            selected users cannot be shown if there is no one selected.\r\n                --> showOnlySelected = false\r\n         */\r\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\r\n            this.setState({\r\n                showOnlySelected: false\r\n            });\r\n\r\n        return(\r\n            <Dummy>\r\n                <div className=\"select-users\">\r\n                    {renderSelectedUsers()}\r\n                </div>\r\n                    {!this.state.showOnlySelected ?\r\n                        <UserList selectUser={this.selectUser}\r\n                                  deselectUser={this.deselectUser}\r\n                                  isUserSelected={this.isUserSelected}\r\n                                  loadUsers={this.props.loadUsers}\r\n                        />\r\n                        :\r\n                        <div className=\"selectUsers\">\r\n                            <ul className=\"selectUsers only-selected\">\r\n                                {this.state.selectedUsers.map((item,index) => (\r\n                                    <UserItem\r\n                                        key={index}\r\n                                        index={index}\r\n                                        uid={item.uid}\r\n                                        username={item.username}\r\n                                        selectUser={() => {}}\r\n                                        deselectUser={this.deselectIndex}\r\n                                        isSelected={true}\r\n                                    />\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    }\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {Route, Switch, useRouteMatch,useHistory} from \"react-router-dom\";\r\nimport Modal, {ModalHeader, ModalMain} from \"../../../utilComp/Modal\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\r\n\r\nexport default function AddUsersModal(props){\r\n\r\n    let { path } = useRouteMatch();\r\n    let history = useHistory();\r\n\r\n    const submitUsers = async (selectedUsers) => {\r\n\r\n        const config = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                users: selectedUsers\r\n            })\r\n        };\r\n\r\n        const response =\r\n            await makeRequest(\r\n                '/group/' + props.gcid + '/members',\r\n                config\r\n            );\r\n        /*\r\n            if ok, modal is closed\r\n         */\r\n        if(response.ok)\r\n            history.goBack();\r\n\r\n    };\r\n\r\n    const loadUsers = async (\r\n        searchValue,\r\n        numAlreadyLoaded\r\n    ) => {\r\n\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                search: searchValue,\r\n                limit: 10,\r\n                start: numAlreadyLoaded\r\n            })\r\n        };\r\n        /*\r\n            response is returned\r\n         */\r\n        return await makeRequest(\r\n            '/user/notInGroup/' + props.gcid,\r\n            config\r\n        );\r\n    };\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/addUsers`}>\r\n                <Modal>\r\n                    <ModalHeader>\r\n                        <h1>\r\n                            Benutzer hinzufügen\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <ModalMain>\r\n                        <div className=\"addUsers\">\r\n                            <SelectUsers\r\n                                onNext={submitUsers}\r\n                                loadUsers={loadUsers}\r\n                            />\r\n                        </div>\r\n                    </ModalMain>\r\n                </Modal>\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\nimport Dropdown from \"rc-dropdown/es\";\r\nimport UserOptions from \"./UserOptions\";\r\nimport ChatOptions from \"./ChatOptions\";\r\nimport AddUsersModal from \"./AddUsersModal\";\r\n\r\nimport'./groupChatInfo.scss';\r\n\r\n/*\r\n    TODO groupchatinfo change socket events\r\n */\r\nclass GroupChatInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.error)\r\n            return(\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Ein Fehler ist aufgetreten!\r\n                </div>\r\n            );\r\n        const uidSelf = chatSocket.userSelf.uid;\r\n\r\n        return(\r\n            <div className=\"groupChatInfo\">\r\n                <div>\r\n                    <h1>\r\n                        {this.props.data.chatName}\r\n                    </h1>\r\n                    {this.props.data.memberSelf.isAdmin ?\r\n                        <i className=\"fas fa-edit fa-lg edit-chatName\"/>\r\n                        : null\r\n                    }\r\n                    <Dropdown\r\n                        trigger={['click']}\r\n                        overlay={\r\n                            <ChatOptions\r\n                                gcid={this.props.gcid}\r\n                                memberSelf={this.props.data.memberSelf}\r\n                            />\r\n                        }\r\n                        >\r\n                        <i\r\n                            className=\"fas fa-ellipsis-v fa-lg chat-options-btn fa-2x\"\r\n                            role=\"button\"\r\n                        />\r\n                    </Dropdown>\r\n                </div>\r\n                <h4>\r\n                    {this.props.data.members.length}\r\n                    &nbsp;Mitglieder:\r\n                </h4>\r\n                <ul className=\"userList\">\r\n                    {this.props.data.members.map((item,index) => (\r\n                        <li key={index}>\r\n                            <div className=\"userItem\">\r\n                            {uidSelf === item.uid ?\r\n                                <span>Du</span>\r\n                            :\r\n                                item.username\r\n                            }\r\n                            <div className=\"right\">\r\n                                {item.isAdmin ?\r\n                                    <span className=\"user-admin\">\r\n                                        Admin&nbsp;&nbsp;\r\n                                    </span>\r\n                                : null}\r\n                                <Dropdown\r\n                                    trigger={['click']}\r\n                                    overlay={\r\n                                        <UserOptions\r\n                                            gcid={this.props.gcid}\r\n                                            memberSelf={this.props.data.memberSelf}\r\n                                            member={item}\r\n                                        />\r\n                                    }\r\n                                    animation=\"slide-up\"\r\n                                    alignPoint\r\n                                >\r\n                                    <i\r\n                                        className=\"fas fa-ellipsis-v fa-lg\"\r\n                                        role=\"button\"\r\n                                    />\r\n                                </Dropdown>\r\n                            </div>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <AddUsersModal\r\n                    gcid={this.props.gcid}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(GroupChatInfo);","import React,{Component} from \"reactn\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./chatContainer/ChatContainer\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\nimport GroupChatInfo from \"./groupChatInfo/GroupChatInfo\";\r\nimport {\r\n    AddressNotValid,\r\n    ChatNotExisting,\r\n    NoAuthorization,\r\n    NoMemberInPublicChat,\r\n    GeneralError\r\n} from \"./chatViewErrorMessages\";\r\nimport {makeRequest} from \"../../global/requests\";\r\n\r\nexport const groupChatErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    chatNotExisting: 2,\r\n    notPartOfChat: 3,\r\n    private: 4,\r\n    general: 5\r\n};\r\n\r\nexport const groupChatTabs = {\r\n    chat: 0,\r\n    info: 1\r\n};\r\n\r\nexport default class GroupChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gcid: 0,\r\n            loaded: false,\r\n            chatData: null,\r\n            error: groupChatErrorCode.none\r\n        }\r\n    }\r\n\r\n    loadGroupChatInfo = async(gcid) => {\r\n\r\n        try {\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await makeRequest('/group/' + this.props.gcid + '/', config);\r\n\r\n            if(response.status === 403)\r\n                return groupChatErrorCode.private;\r\n\r\n            else if(response.status === 404)\r\n                return groupChatErrorCode.chatNotExisting;\r\n\r\n            else if (response.ok) {\r\n\r\n                let data = await response.json();\r\n\r\n                this.setState({\r\n                    chatData: data\r\n                });\r\n\r\n                if(data.error) {\r\n\r\n                    if (data.error === 'not part of chat')\r\n                        return groupChatErrorCode.notPartOfChat;\r\n\r\n                    else\r\n                        return groupChatErrorCode.general\r\n\r\n                }else if(chatSocket.chats.group.getIndex(gcid) !== -1){\r\n\r\n                    return groupChatErrorCode.none;\r\n                }\r\n            }\r\n            else {\r\n                return groupChatErrorCode.general\r\n            }\r\n        } catch (err) {\r\n            return groupChatErrorCode.general\r\n        }\r\n    };\r\n    /*\r\n        is called after the chatId changed\r\n     */\r\n    chatChanged = () => {\r\n        /*\r\n            is props.gcid a number?\r\n         */\r\n        if(isNaN(this.props.gcid)){\r\n            this.setState({\r\n                error: groupChatErrorCode.nan,\r\n                loaded: true\r\n            });\r\n        }else{\r\n\r\n            const chatExists = () => {\r\n\r\n                const gcid = parseInt(this.props.gcid);\r\n\r\n                this.loadGroupChatInfo(gcid)\r\n                    .then(r => {\r\n                        if (r === groupChatErrorCode.none) {\r\n\r\n                            this.selectGroupChat(gcid);\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: groupChatErrorCode.none,\r\n                                gcid: gcid\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.chats.group.get(gcid).chatName,\r\n                                    gcid: gcid\r\n                                }\r\n                            }).then();\r\n                        } else {\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: r\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch();\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                chatExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    chatExists();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /*\r\n        groupChat is selected\r\n     */\r\n    selectGroupChat(gcid){\r\n        /*\r\n            does the chat exist?\r\n         */\r\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\r\n\r\n            this.setState({\r\n                error: groupChatErrorCode.chatNotExisting\r\n            })\r\n        } else {\r\n\r\n            const chat = chatSocket.chats.group.get(gcid)\r\n            this.dispatch.selectChat(chat);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.chatChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did gcid change?\r\n         */\r\n        if(prevProps.gcid !== this.props.gcid){\r\n            this.chatChanged();\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if (this.state.error === groupChatErrorCode.nan) {\r\n                return (\r\n                    <AddressNotValid/>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if (this.state.loaded) {\r\n\r\n                switch(this.state.error){\r\n\r\n                    case groupChatErrorCode.none:\r\n\r\n                        switch(this.props.tab){\r\n                            case(groupChatTabs.chat):\r\n                                return (\r\n                                    <ChatContainer\r\n                                        chatType={this.global.currentChat.type}\r\n                                        chatId={this.global.currentChat.id}\r\n                                    />\r\n                                );\r\n\r\n                            case(groupChatTabs.info):\r\n                                return(\r\n                                    <GroupChatInfo\r\n                                        gcid={this.state.gcid}\r\n                                        data={this.state.chatData}\r\n                                    />\r\n                                );\r\n\r\n                            default:\r\n                                return null;\r\n                        }\r\n\r\n                    case groupChatErrorCode.notPartOfChat:\r\n                        return (\r\n                            <NoMemberInPublicChat/>\r\n                        );\r\n\r\n                    case groupChatErrorCode.private:\r\n                        return (\r\n                            <NoAuthorization/>\r\n                        );\r\n\r\n                    case groupChatErrorCode.chatNotExisting:\r\n                        return (\r\n                            <ChatNotExisting/>\r\n                        );\r\n\r\n                    case groupChatErrorCode.general:\r\n                        return(\r\n                            <GeneralError/>\r\n                        );\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n                {renderLoader()}\r\n                {renderChat()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nclass UserItem extends Component{\r\n\r\n    elementClicked = event => {\r\n\r\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <li>\r\n                <Link to={\"/chat/user/\" + this.props.uid}\r\n                      onClick={this.elementClicked}\r\n                      replace={true}\r\n                >\r\n                {this.props.username}\r\n                </Link>\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\nimport UserItem from \"./UserItem\";\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nimport './selectChat.scss';\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n/*\r\n    props:\r\n        showSearchBar: boolean\r\n            if false: searchValue comes as prop\r\n        searchValue\r\n        loadChats: function(searchValue,numAlreadyLoaded)\r\n */\r\nexport default class SelectChat extends Component{\r\n\r\n    scrollParentRef;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: errorCode.none,\r\n            showOptions: false,\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            /*\r\n                are there items left?\r\n             */\r\n            hasMore: true\r\n        };\r\n    }\r\n    /*\r\n        gets called when the search of the user changed. the new result gets requested\r\n     */\r\n    searchChanged = (searchValue) => {\r\n\r\n        this.setState({\r\n            searchValue: searchValue,\r\n            searchResult: [],\r\n            hasMore: true\r\n        });\r\n    };\r\n    /*\r\n        more chats are loaded\r\n     */\r\n    loadChats = async () => {\r\n        try {\r\n\r\n            const response = await this.props.loadChats(\r\n                this.state.searchValue,\r\n                this.state.searchResult.length\r\n            );\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0){\r\n                    this.setState({\r\n                        hasMore: false\r\n                    })\r\n                } else {\r\n                    this.setState(state => ({\r\n                        searchResult: state.searchResult.concat(data)\r\n                    }));\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            is searchBar is not shown,\r\n                it is checked if searchValue has changed\r\n         */\r\n        if(!this.props.showSearchBar){\r\n            if(this.props.searchValue !== prevProps.searchValue){\r\n                this.searchChanged(this.props.searchValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.state.error === errorCode.error){\r\n            return(\r\n                <div className=\"alert alert-danger\" role=\"alert\" key={0}>\r\n                    Ein Fehler ist aufgetreten!\r\n                </div>\r\n            )\r\n        }\r\n            return (\r\n                <Dummy>\r\n                    {/*\r\n                        if showSearchBar is true, it gets shown\r\n                         */\r\n                        this.props.showSearchBar ?\r\n                            <div className=\"user-top\">\r\n                                <div className=\"searchUser\">\r\n                                    <input type=\"text\"\r\n                                           name=\"newChat-searchUser\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Benutzer suchen\"\r\n                                           onChange={(event) => {\r\n                                               this.searchChanged()\r\n                                           }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            : null\r\n                    }\r\n                    <div\r\n                        className=\"selectChat\"\r\n                        ref={ref => this.scrollParentRef = ref}\r\n                    >\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={this.loadChats}\r\n                            hasMore={this.state.hasMore}\r\n                            loader={\r\n                                <div className=\"loader\" key={-1}>\r\n                                    <div\r\n                                        className=\"spinner-border text-secondary\"\r\n                                        role=\"status\"\r\n                                    >\r\n                                        <span className=\"sr-only\">\r\n                                            Loading...\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            useWindow={false}\r\n                            getScrollParent={() => this.scrollParentRef}\r\n                            >\r\n                            <ul\r\n                                className=\"selectChat\">\r\n                                {this.state.searchResult.map((item, index) => (\r\n                                    <UserItem\r\n                                        key={index}\r\n                                        uid={item.uid}\r\n                                        username={item.username}\r\n                                        hide={this.props.hide}\r\n                                    />\r\n                                ))}\r\n                                {this.state.searchResult.length === 0 ?\r\n                                    <div key={-1} className=\"nothingFound\">\r\n                                        Nichts gefunden!\r\n                                    </div>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </ul>\r\n                        </InfiniteScroll>\r\n                    </div>\r\n                </Dummy>\r\n            );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {tabs} from \"../NewChat\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\nimport SelectChat from \"../../selectChat/SelectChat\";\r\nimport Dropdown from 'rc-dropdown';\r\n\r\nimport 'rc-dropdown/assets/index.css';\r\n\r\nimport './chooseUser.scss';\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class ChooseUser extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: errorCode.none,\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: ''\r\n        };\r\n    }\r\n    /*\r\n        when new group gets clicked\r\n     */\r\n    newGroupClick = event => {\r\n        event.stopPropagation();\r\n        this.props.setCurrentTab(tabs.newGroup);\r\n    };\r\n    /*\r\n        when join group is clicked\r\n     */\r\n    joinGroupClick = event => {\r\n        event.stopPropagation();\r\n        this.props.setCurrentTab(tabs.chooseGroup);\r\n    };\r\n    /*\r\n        gets called when the search of the user changed. the new result gets requested\r\n     */\r\n    searchChanged = event => {\r\n        const searchValue = event.target.value;\r\n\r\n        const searchValid = true;\r\n\r\n        this.setState({\r\n            searchValue: searchValue,\r\n            searchValid: searchValid\r\n        });\r\n    };\r\n\r\n    loadChats = async (\r\n        searchValue,\r\n        numAlreadyLoaded\r\n    ) => {\r\n\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                search: searchValue,\r\n                limit: 10,\r\n                start: numAlreadyLoaded\r\n            })\r\n        };\r\n        /*\r\n            response is returned\r\n         */\r\n        return await makeRequest('/user/noChat', config);\r\n    };\r\n\r\n    render() {\r\n\r\n        const options = (\r\n            <div className=\"options\">\r\n                <ul>\r\n                    <li onClick={this.newGroupClick}>\r\n                        neue Gruppe\r\n                    </li>\r\n                    <li onClick={this.joinGroupClick}>\r\n                        einer Gruppe beitreten\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n\r\n        return(\r\n            <Dummy>\r\n                <div className=\"user-top\">\r\n                    <div className=\"searchUser\">\r\n                        <input type=\"text\"\r\n                               name=\"newChat-searchUser\"\r\n                               className=\"form-control\"\r\n                               placeholder=\"Benutzer suchen\"\r\n                               onChange={this.searchChanged}\r\n                        />\r\n                    </div>\r\n                    <div className=\"user-more\">\r\n                        <Dropdown\r\n                            trigger={['click']}\r\n                            overlay={options}\r\n                            animation=\"slide-up\"\r\n                            alignPoint\r\n                        >\r\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\r\n                               role=\"button\"\r\n                            />\r\n                        </Dropdown>\r\n                    </div>\r\n                </div>\r\n                <SelectChat\r\n                    showSearchBar={false}\r\n                    searchValue={this.state.searchValue}\r\n                    loadChats={this.loadChats}\r\n                />\r\n            </Dummy>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class GroupInfoForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            groupName: ''\r\n        }\r\n    }\r\n\r\n    groupNameChanged = event => {\r\n        this.setState({\r\n            groupName: event.target.value\r\n        })\r\n    };\r\n\r\n    formSubmitted = event => {\r\n\r\n        event.preventDefault();\r\n        this.props.submitGroup({\r\n            name: this.state.groupName,\r\n            description: '',\r\n            isPublic: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"user-results\">\r\n                <form className=\"form-group p-3\"\r\n                      onSubmit={this.formSubmitted}\r\n                >\r\n                    <h4>\r\n                        Gruppennamen eingeben\r\n                    </h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"input-groupName\"\r\n                        name=\"groupName\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Gruppenname\"\r\n                        onChange={this.groupNameChanged}\r\n                    />\r\n                    <div>\r\n                        <button type=\"submit\" className=\"float-right btn btn-primary m-3\">\r\n                            Gruppe erstellen\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\r\nimport GroupInfoForm from \"./GroupInfoForm\";\r\nimport {makeRequest} from \"../../../global/requests\";\r\n\r\nconst tabs = {\r\n    selectUsers: 0,\r\n    enterChatInfo: 1\r\n};\r\n\r\nclass NewGroup extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.selectUsers,\r\n            selectedUsers: []\r\n        }\r\n    }\r\n\r\n    showEnterChatInfo = selectedUsers => {\r\n\r\n        this.setState({\r\n            currentTab: tabs.enterChatInfo,\r\n            selectedUsers: selectedUsers\r\n        });\r\n    };\r\n\r\n    submitGroup = data => {\r\n\r\n        const users = new Array(this.state.selectedUsers.length);\r\n        for(let i=0;i<this.state.selectedUsers.length;i++){\r\n            users[i] = {\r\n                uid: this.state.selectedUsers[i].uid,\r\n                username: this.state.selectedUsers[i].username,\r\n                isAdmin: false\r\n            };\r\n        }\r\n\r\n        this.createGroupChat(data,users).then(r => {});\r\n    };\r\n\r\n    createGroupChat = async (data,users) => {\r\n        try {\r\n            const config = {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    data: data,\r\n                    users: users\r\n                })\r\n            };\r\n            const response = await makeRequest('/group/', config);\r\n            /*\r\n                if ok, modal is closed\r\n             */\r\n            if(response.ok)\r\n                this.props.history.goBack();\r\n\r\n        }catch(error){\r\n\r\n        }\r\n    };\r\n\r\n    loadUsers = async (\r\n        searchValue,\r\n        numAlreadyLoaded\r\n    ) => {\r\n\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                search: searchValue,\r\n                limit: 10,\r\n                start: numAlreadyLoaded\r\n            })\r\n        };\r\n        /*\r\n            response is returned\r\n         */\r\n        return await makeRequest('/user/', config);\r\n    };\r\n\r\n    render() {\r\n\r\n        switch(this.state.currentTab){\r\n\r\n            case tabs.selectUsers:\r\n                return (\r\n                    <SelectUsers\r\n                        onNext={this.showEnterChatInfo}\r\n                        loadUsers={this.loadUsers}\r\n                    />\r\n                );\r\n\r\n            case tabs.enterChatInfo:\r\n                return(\r\n                    <GroupInfoForm\r\n                        submitGroup={this.submitGroup}\r\n                    />\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\r\nimport ChooseUser from \"./chooseUser/ChooseUser\";\r\nimport NewGroup from \"./newGroup/NewGroup\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\r\n\r\nimport './newChat.scss';\r\n\r\nexport const tabs = {\r\n    chooseUser: 0,\r\n    newGroup: 1,\r\n    chooseGroup: 2\r\n};\r\n\r\nexport default class NewChat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.chooseUser\r\n        }\r\n    }\r\n\r\n    setCurrentTab = newTab => {\r\n        this.setState({\r\n            currentTab: newTab\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const router = () => {\r\n\r\n            switch (this.state.currentTab) {\r\n\r\n                case tabs.chooseUser:{\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n\r\n                }\r\n\r\n                case tabs.newGroup:{\r\n                    return(\r\n                        <NewGroup />\r\n                    );\r\n                }\r\n\r\n                case tabs.chooseGroup:{\r\n                    return(\r\n                        <div>\r\n                            <h4>chooseGroup</h4>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n\r\n                default: {\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        const getHeader = () => {\r\n\r\n            switch(this.state.currentTab){\r\n\r\n                case tabs.chooseUser:\r\n                    return 'Neuer Chat';\r\n\r\n                case tabs.newGroup:\r\n                    return 'Neue Gruppe';\r\n\r\n                case tabs.chooseGroup:\r\n                    return 'Gruppe auswählen';\r\n\r\n                default:\r\n                    return 'Neuer Chat';\r\n\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <ModalHeader>\r\n                    <h1>{getHeader()}</h1>\r\n                </ModalHeader>\r\n                <ModalMain>\r\n                    <div className=\"newChat\">\r\n                        {router()}\r\n                    </div>\r\n                </ModalMain>\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\nimport {makeRequest} from \"../../global/requests\";\r\n\r\nconst errorCode = {\r\n    none: 0,\r\n    isSelf: 1,\r\n    //not a number\r\n    nan: 2\r\n};\r\n\r\nexport default class UserInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: errorCode.none,\r\n            userInfo: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.loaded){\r\n            return null;\r\n\r\n        }else if(this.state.error === errorCode.isSelf){\r\n            return(\r\n                <Dummy>\r\n                    <ModalHeader>\r\n                        <h1>\r\n                            Du\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <ModalMain>\r\n                        xx\r\n                    </ModalMain>\r\n                </Dummy>\r\n            )\r\n        }else{\r\n            return(\r\n                <Dummy>\r\n                    <ModalHeader>\r\n                        <h1>\r\n                            {this.state.userInfo.username}\r\n                            &nbsp;\r\n                            <Link to={\"/chat/user/\" + this.state.uid}>\r\n                                <i className=\"far fa-comment-alt\" />\r\n                            </Link>\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <ModalMain>\r\n                        <h2>Gruppen</h2>\r\n                    </ModalMain>\r\n                </Dummy>\r\n            )\r\n        }\r\n    }\r\n\r\n    setUser = () => {\r\n\r\n        if(isNaN(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.nan\r\n            });\r\n        }else if(chatSocket.userSelf.uid === parseInt(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else{\r\n            const uid = parseInt(this.props.uid);\r\n            this.setState({\r\n                uid: uid,\r\n                error: errorCode.none,\r\n                loaded: false\r\n            });\r\n            this.fetchUser(uid)\r\n                .then()\r\n                .catch();\r\n        }\r\n    };\r\n    /*\r\n        userInfo gets fetched from server\r\n     */\r\n    async fetchUser (uid) {\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await makeRequest('/user/' + uid, config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n\r\n            this.setState({\r\n                userInfo: data,\r\n                loaded: true\r\n            });\r\n\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUser();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            check if uid changed\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            this.setUser();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport Modal from \"../utilComp/Modal\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport Dummy from \"../utilComp/Dummy\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterBigScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <NewChat />\r\n                </Modal>\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <Dummy>\r\n                        {props.children}\r\n                        <Modal>\r\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                        </Modal>\r\n                    </Dummy>\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <h3>settings</h3>\r\n                </Modal>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch,\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\r\n\r\nexport default function GridBigScreens(props){\r\n\r\n    const { path } = useRouteMatch();\r\n\r\n    return(\r\n        <div className=\"row justify-content-end main-container\">\r\n            <div className=\"col-md-5 col-lg-4 col-xl-3 d-none d-md-block pr-3 pl-0 h-100\">\r\n\r\n                <ChatList />\r\n            </div>\r\n            <div className=\"col-md-7 col-lg-8 col-xl-9 col-overflow\"\r\n                 style={{padding:'0'}}\r\n            >\r\n\r\n                <Switch>\r\n                    <Route path={`${path}/user/:uid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <NormalChatView\r\n                                    uid={routeProps.match.params.uid}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/group/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.chat}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/groupInfo/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.info}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={path}>\r\n                        <ModalRouterBigScreens>\r\n                            <h1>noch kein chat ausgewählt</h1>\r\n                        </ModalRouterBigScreens>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nimport './typeMessageContainer.scss';\r\n\r\nexport default class TypeMsgContainer extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersTyping: []\r\n        };\r\n    }\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        this.setState({\r\n            usersTyping: chat.getUsersTyping()\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"typeMsg-container\">\r\n                {this.state.usersTyping.map((user,index) => (\r\n                    <div key={index} className=\"typeMsg\">\r\n                        {user.username + \" schreibt...\"}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn ja, werden events neu initialisiert\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n\r\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                <NewChat />\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                <h3>settings</h3>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React,{useGlobal} from \"reactn\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\r\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\r\n\r\nexport default function RouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n    const [global,setGlobal] = useGlobal();\r\n\r\n    const renderTypeMsgContainer = () => {\r\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\r\n            return(\r\n                <TypeMsgContainer\r\n                    chatType={global.currentChat.type}\r\n                    chatId={global.currentChat.id}\r\n                />\r\n            )\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return(\r\n        <div className=\"main-container\">\r\n            <Switch>\r\n                <Route path={`${path}/user/:uid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <NormalChatView\r\n                                uid={routeProps.match.params.uid}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                }>\r\n                </Route>\r\n                <Route path={`${path}/group/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.chat}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={`${path}/groupInfo/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.info}\r\n                            />\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={path}>\r\n                    <ModalRouterSmallScreens>\r\n                        <ChatList\r\n                            paddingTop=\"20px\"\r\n                        />\r\n                    </ModalRouterSmallScreens>\r\n                </Route>\r\n                <Route path = \"*\">\r\n                    <h3>Not found!</h3>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n}","import React,{Component} from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport Responsive from \"../responsive/Responsive\";\r\nimport GridBigScreens from \"./GridBigScreens\";\r\nimport RouterSmallScreens from \"./RouterSmallScreens\";\r\nimport chatSocket from \"../chatData/chatSocket\";\r\n\r\nexport default class Chat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                which modal is currently open\r\n                    0: none\r\n             */\r\n            modal: 0,\r\n            /*\r\n                info about the currently open modal\r\n             */\r\n            modalInfo: null,\r\n            /*\r\n                is shown at the user-icon\r\n             */\r\n            notifications: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n            if chatsocket is undefined, it gets initialized\r\n         */\r\n        if (!chatSocket.initCalled) {\r\n            chatSocket.init().then(r => {});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n\r\n                <Header/>\r\n\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n\r\n                    <RouterSmallScreens />\r\n                </Responsive>\r\n\r\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n\r\n                    <GridBigScreens/>\r\n                </Responsive>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import {addReducer} from 'reactn';\r\nimport {fetchData} from \"./globalData\";\r\nimport {makeRequest} from \"./requests\";\r\nimport {resetChatSocket} from \"../chatData/chatSocket\";\r\n\r\nexport function authTokens(){\r\n\r\n    addReducer('deleteAuthTokens',(global,dispatch) => {\r\n\r\n        localStorage.removeItem(\"authTokens\");\r\n        /*\r\n            TODO: without reload\r\n         */\r\n        // eslint-disable-next-line no-restricted-globals\r\n        location.reload();\r\n        dispatch.deleteUserSelf();\r\n        dispatch.resetGlobal();\r\n        resetChatSocket();\r\n\r\n        return {\r\n            loaded: true,\r\n            authTokens: undefined\r\n        };\r\n    });\r\n\r\n    addReducer('initAuthTokens',async(global,dispatch,existingTokens) => {\r\n\r\n        try {\r\n            /*\r\n                util data is fetched from the server\r\n             */\r\n            await fetchData();\r\n\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await makeRequest(\r\n                '/user/self',\r\n                config,\r\n                existingTokens\r\n            );\r\n            /*\r\n                not authenticated\r\n                    --> token is deleted\r\n                    --> login page\r\n             */\r\n            if (response.status === 403) {\r\n                localStorage.removeItem(\"authTokens\");\r\n                return {\r\n                    loaded: true,\r\n                    authTokens: undefined\r\n                };\r\n            }\r\n            /*\r\n                userSelf is updated\r\n             */\r\n            else {\r\n                const data = await response.json();\r\n\r\n                const {uid, username} = data;\r\n                dispatch.setUserSelf(uid, username);\r\n\r\n                return ({\r\n                    loaded: true,\r\n                    authTokens: existingTokens\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return({\r\n                loaded: false\r\n            })\r\n        }\r\n    });\r\n\r\n    addReducer('setAuthTokens',(global,dispatch,tokens) => {\r\n\r\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\r\n\r\n        return({\r\n            loaded: true,\r\n            authTokens: tokens\r\n        });\r\n    });\r\n}","import React, {useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport PrivateRoute from \"./utilComp/PrivateRoute\";\nimport Chat from \"./Home/Home\";\nimport 'popper.js';\n\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\n\ninitGlobal();\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"authTokens\"));\n        dispatch.initAuthTokens(existingTokens);\n    },[]);\n\n    return (\n        <Router>\n            <Switch>\n                <PrivateRoute path=\"/chat\" component={Chat}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/register\" component={Register}/>\n                <Route path={\"/about\"}>\n                    <h1>about</h1>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to={\"/chat\"}/>\n                </Route>\n                <Route path=\"*\">\n                    <NoMatch/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\r\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\r\nimport {initChats} from \"./initChats\";\r\nimport {initChatReducers} from \"./chats\";\r\nimport {authTokens} from \"./authTokens\";\r\n\r\nexport function initGlobal(){\r\n\r\n    setGlobal({\r\n        /*\r\n            is the page ready to be shown?\r\n         */\r\n        loaded: false,\r\n        /*\r\n            the authentication token\r\n         */\r\n        authTokens: undefined,\r\n        /*\r\n            info about the user self\r\n         */\r\n        userSelf: {},\r\n        /*\r\n            what info should be shown at the left center of the header?\r\n         */\r\n        infoHeaderCenter: infoHeaderCenter.none,\r\n        ihcData: null,\r\n        /*\r\n            the chat that is currently selected\r\n         */\r\n        currentChat: {\r\n            type: '',\r\n            id: 0,\r\n            /*\r\n                unread messages inside the currentChat\r\n             */\r\n            newMessages: 0,\r\n            /*\r\n                the messages in the currentChat, displayed in chatContainer\r\n             */\r\n            messages: []\r\n        },\r\n        /*\r\n            the shown tempChat\r\n         */\r\n        tempChat: null,\r\n        /*\r\n            all chats of the user are stored here\r\n         */\r\n        chats: [],\r\n        /*\r\n            number of chats with new messages\r\n         */\r\n        newMessages: 0\r\n        /*\r\n            TODO: notifications\r\n         */\r\n    });\r\n\r\n    initChats();\r\n\r\n    /*\r\n        the userSelf gets set\r\n     */\r\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\r\n\r\n        return {\r\n            userSelf: {\r\n                uid: uid,\r\n                username: username\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        userSelf is deleted\r\n     */\r\n    addReducer('deleteUserSelf',(global,dispatch) => {\r\n\r\n       return {\r\n           userSelf: {}\r\n       }\r\n    });\r\n    /*\r\n        // eslint-disable-next-line no-unused-vars\r\n        global gets reseted\r\n     */\r\n    addReducer('resetGlobal',(global,dispatch) => ({\r\n        infoHeaderCenter: infoHeaderCenter.none,\r\n        ihcData: null,\r\n        currentChat: {\r\n            type: '',\r\n            id: 0,\r\n            newMessages: 0,\r\n            messages: []\r\n        },\r\n        tempChat: null,\r\n        chats: [],\r\n        newMessages: 0\r\n    }));\r\n    /*\r\n        chat reducers are initialized\r\n     */\r\n    initChatReducers();\r\n    /*\r\n        authTokens reducers are initialized\r\n     */\r\n    authTokens();\r\n}","import chatSocket from \"../chatData/chatSocket\";\r\nimport {setGlobal} from \"reactn\";\r\n\r\nexport function initChats(){\r\n\r\n    function chatsLoaded(chats){\r\n        setGlobal({\r\n            chats: chats\r\n        });\r\n    }\r\n    /*\r\n       chats get initialized\r\n       is loading of chats already finished?\r\n           --> chatArray gets requested immediately\r\n    */\r\n    if(chatSocket.finishedLoading){\r\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\r\n        /*\r\n            otherwise --> event handler that gets triggered when loading finished\r\n         */\r\n    }else{\r\n        chatSocket.event.on('chats loaded',chatsLoaded);\r\n    }\r\n}","import {addReducer} from \"reactn\";\r\nimport chatSocket from \"../chatData/chatSocket\";\r\n\r\nexport function initChatReducers(){\r\n\r\n    /*\r\n        is the chat the current chat?\r\n     */\r\n    function isSelected(global,chat){\r\n\r\n        const currentChat = global.currentChat;\r\n        return currentChat.type === chat.type\r\n            && currentChat.id === chat.id;\r\n    }\r\n    /*\r\n        index of the chat is searched\r\n     */\r\n    function findIndex(global,chat){\r\n\r\n        return global.chats.findIndex(\r\n            element => (\r\n                element.id === chat.id\r\n                && element.type === chat.type)\r\n        );\r\n    }\r\n    /*\r\n        is called when there is a new message\r\n     */\r\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            if the index is -1, the chat does not exist\r\n         */\r\n        if(index !== -1){\r\n            /*\r\n                is the chat selected?\r\n             */\r\n            if(isSelected(global,chat)) {\r\n                /*\r\n                    chat is selected\r\n                        latestMessageObject is updated\r\n                        newMessage counter is set to 0\r\n                 */\r\n                const chatsClone = global.chats.splice(0);\r\n                const chatObject = chatsClone[index];\r\n                chatObject.latestMessage = chat.getLatestMessageObject();\r\n                chatObject.unreadMessages = 0;\r\n                /*\r\n                    item is deleted from array\r\n                 */\r\n                chatsClone.splice(index,1);\r\n                /*\r\n                    item is added to start of the array\r\n                 */\r\n                chatsClone.unshift(chatObject);\r\n                /*\r\n                    message is added to messages in currentChat\r\n                 */\r\n                const currentChat = {\r\n                    ...global.currentChat,\r\n                    messages: global.currentChat.messages.concat(message),\r\n                    newMessages: global.currentChat.newMessages + 1\r\n                };\r\n                return {\r\n                    chats: chatsClone,\r\n                    currentChat: currentChat\r\n                };\r\n            }else{\r\n                /*\r\n                    chat is not selected\r\n                        latestMessageObject is updated\r\n                        newMessage counter gets incremented\r\n                 */\r\n                const chatsClone = global.chats.splice(0);\r\n                const chatObject = chatsClone[index];\r\n                chatObject.latestMessage = chat.getLatestMessageObject();\r\n                /*\r\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\r\n                 */\r\n                let newMessages = global.newMessages;\r\n                if(chatObject.unreadMessages === 0){\r\n                    newMessages++;\r\n                }\r\n\r\n                chatObject.unreadMessages = unreadMessages + 1;\r\n                /*\r\n                    item is deleted from array\r\n                 */\r\n                chatsClone.splice(index,1);\r\n                /*\r\n                    item is added to start of the array\r\n                 */\r\n                chatsClone.unshift(chatObject);\r\n\r\n                return {\r\n                    chats: chatsClone,\r\n                    newMessages: newMessages\r\n                };\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        gets called out of changeCurrentChat in chatSocket\r\n     */\r\n    addReducer('selectChat',(global,dispatch,chat) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            if the index is -1, the chat does not exist\r\n         */\r\n        if(index !== -1) {\r\n            /*\r\n                chats is cloned\r\n             */\r\n            const chatsClone = global.chats.splice(0);\r\n            const item = chatsClone[index];\r\n            /*\r\n                if there where unread messages, newMessages counter is decremented by 1\r\n             */\r\n            let newMessages = global.newMessages;\r\n            if(item.unreadMessages > 0){\r\n                newMessages--;\r\n            }\r\n            /*\r\n                unreadMessages is set to 0\r\n             */\r\n            item.unreadMessages = 0;\r\n            chatsClone[index] = item;\r\n            /*\r\n                change is emitted to server\r\n             */\r\n            chatSocket.socket.emit('change chat', {\r\n                type: chat.type,\r\n                id: chat.id\r\n            });\r\n\r\n            return {\r\n                currentChat: {\r\n                    type: chat.type,\r\n                    id: chat.id,\r\n                    messages: chat.getMessages(),\r\n                    newMessages: 0\r\n                },\r\n                chats: chatsClone,\r\n                tempChat: null,\r\n                newMessages: newMessages\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        is called when no chat should be selected\r\n     */\r\n    addReducer('selectNoChat',(global,dispatch) => {\r\n        /*\r\n            change is emitted to server\r\n         */\r\n        chatSocket.socket.emit('change chat', null);\r\n\r\n        return {\r\n            currentChat: {\r\n                type: '',\r\n                id: 0,\r\n                messages: []\r\n            },\r\n        }\r\n    });\r\n    /*\r\n        loaded messages are added\r\n     */\r\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\r\n\r\n        return {\r\n            currentChat: {\r\n                ...global.currentChat,\r\n                messages: messages ?\r\n                    messages.concat(global.currentChat.messages)\r\n                    : global.currentChat.messages\r\n            }\r\n        };\r\n    });\r\n    /*\r\n        new chat is added\r\n     */\r\n    addReducer('addChat',(global,dispatch,chat) => {\r\n\r\n        function isDateBefore(chat1,chat2){\r\n            /*\r\n                do latestMessages exist?\r\n             */\r\n            if(!chat1.latestMessage)\r\n                return true;\r\n            else if(!chat2.latestMessage)\r\n                return false;\r\n            else\r\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\r\n        }\r\n        /*\r\n            place the chat at the right position\r\n            chats is cloned\r\n         */\r\n        const chatsClone = global.chats.splice(0);\r\n        const chatObject = chat.getChatObject();\r\n\r\n        if(chatsClone.length === 0)\r\n            return {\r\n                chats: [chatObject]\r\n            };\r\n\r\n        for (let i = 0; i < chatsClone.length; i++) {\r\n            if (isDateBefore(chatsClone[i], chatObject)) {\r\n                chatsClone.splice(i, 0, chatObject);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            chats: chatsClone\r\n        }\r\n\r\n    });\r\n    /*\r\n        chat is removed\r\n     */\r\n    addReducer('removeChat',(global,dispatch,chat) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            chats is cloned\r\n         */\r\n        const chatsClone = this.state.chats.splice(0);\r\n        /*\r\n            item is deleted from array\r\n         */\r\n        chatsClone.splice(index,1);\r\n\r\n        return {\r\n            chats: chatsClone\r\n        }\r\n    });\r\n    /*\r\n        tempChat is shown\r\n     */\r\n    addReducer('showTempChat',(global,dispatch) => {\r\n\r\n        const chat = chatSocket.temporaryChat.chatNow;\r\n        /*\r\n            change is emitted to server\r\n         */\r\n        chatSocket.socket.emit('change chat', null);\r\n\r\n        return {\r\n            tempChat: chat.getChatObject(),\r\n            currentChat: {\r\n                type: 'tempChat',\r\n                id: 0,\r\n                messages: []\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        tempChat is updated\r\n     */\r\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\r\n        tempChat: chat.getChatObject(),\r\n        currentChat: {\r\n            type: 'tempChat',\r\n            id: 0,\r\n            messages: []\r\n        }\r\n    }));\r\n    /*\r\n        tempChat is hidden\r\n     */\r\n    addReducer('hideTempChat',(global,dispatch) => ({\r\n        tempChat: null\r\n    }));\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}