{"version":3,"sources":["Auth/MsgBox.js","Auth/authUI.js","Auth/AuthContext.js","Auth/Login.js","Auth/Register.js","Auth/PrivateRoute.js","util/Color.js","util/BinSearch.js","chatData/User.js","chatData/Message.js","util/Event.js","chatData/Chat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","responsive/utilResponsive.js","responsive/Responsive.js","utilComp/Dummy.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/MessageForm.js","Home/chatView/Message.js","Home/chatView/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/NormalChatView.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/GroupChatView.js","utilComp/Modal.js","Home/newChat/chooseUser/UserItem.js","Home/newChat/chooseUser/ChooseUser.js","Home/newChat/newGroup/UserItem.js","Home/newChat/newGroup/UserList.js","Home/newChat/newGroup/SelectUsers.js","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/UserInfo.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","App.js","global/global.js","global/initChats.js","serviceWorker.js","index.js"],"names":["ErrorMsg","className","this","props","children","Component","extendJQuery","$","fn","extend","pwToggle","prepend","addClass","css","position","right","top","color","cursor","width","height","hover","icon","get","input","addEventListener","type","classList","remove","add","AuthContext","createContext","Login","changeHandler","event","nam","target","name","val","value","setState","submitHandler","preventDefault","uNameErr","pwErr","valConstraints","username","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","password","valResult","validate","state","valid","login","then","data","success","undefined","a","config","method","headers","body","JSON","stringify","fetch","response","ok","json","dispatch","setUserSelf","uid","setAuthContext","history","push","redirect","Consumer","authTokens","setAuthTokens","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","id","to","withRouter","Register","pwRepeatErr","passwordRepeat","equality","pwRepeat","register","PrivateRoute","component","rest","useContext","render","loading","pathname","referer","location","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","k","floor","i","getIndex","splice","getNearestKey","Array","UserErrorCode","chatSocket","users","normalChat","user","temporaryChat","createNew","doesExist","userExists","blocked","User","_normalChat","_groupChats","gcid","groupChats","_uid","_username","_color","Message","mid","content","chat","date","Date","now","userTopShown","mDateString","getMessageViewDateString","dateString","getDateString","bySelf","userSelf","userTop","getUserTop","isDateToday","getTimeString","isDateYesterday","msgString","substr","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_content","_date","_chat","EventHandler","events","Map","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","num","reachedTopMessages","getLastMsgId","msg","getLastMessage","chatType","chatId","lastMsgId","status","lMessages","messages","showUserInfoMessage","lm","getMessageObject","Error","rMessages","getDispatch","newMsg","unreadMessages","latestMessage","getLatestMessageObject","getFirstMessage","getChatViewMsgString","getChatViewDateString","_type","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","trigger","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","isShown","showTempChat","updateTempChat","hideTempChat","Promise","resolve","reject","otherUid","otherUsername","socket","emit","res","online","newChat","ncid","chats","normal","addChat","selectChat","hide","_chatNow","ChatSocket","_chats","group","_finishedLoading","_temporaryChat","_initCalled","removeAllListeners","disconnect","initCalled","getGlobal","userInfo","io","connect","secure","on","initChats","getChat","isCurrentChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","setTimeout","deleteUserSelf","resetGlobal","resetChatSocket","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","firstMessage","empty","member","addGroupChat","_socket","_userSelf","destruct","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","removeEventListener","React","PureComponent","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","infoHeaderCenter","HeaderLeft","onClick","goBack","global","newMessages","HeaderCenter","ihcData","data-toggle","title","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","clickDocument","changeChecked","logout","deleteAuthTokens","catch","checked","tooltip","ChatSearchBox","searchChanged","onSearch","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","paddingTop","found","tempChat","map","includes","ChatViewLoader","borderWidth","role","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","replace","sendMessage","err","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","loadMessages","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","typeMessages","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","onScroll","ref","date1","renderDateContainer","_messagesNode","TempChatContainer","show","update","NormalChatView","userChanged","parseInt","error","loaded","getUserNormalChat","selectNormalChat","selectTempChat","renderLoader","isNaN","GroupChatInfo","loadChatInfo","loadChatInfoI","r","uidSelf","item","index","isAdmin","groupChatErrorCode","groupChatTabs","GroupChatView","groupChatExists","chatExists","selectGroupChat","tab","renderChat","Modal","ModalHeader","ModalMain","UserItem","elementClicked","errorCode","ChooseUser","_numAlreadyLoaded","showOptions","clickedOutsideTimer","clickedOutsideOptions","hideOptions","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","numAlreadyLoaded","reachedBottom","requestSearchResult","search","limit","start","searchResult","scrollToBottomBuffer","concat","assignListRef","listRef","listNode","showLoaderBottom","_clickedOutsideTimer","_reachedBottom","_listRef","_listNode","clicked","deselectUser","selectUser","refreshSearch","loadUsers","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","GroupInfoForm","groupNameChanged","groupName","formSubmitted","submitGroup","description","isPublic","NewGroup","showEnterChatInfo","currentTab","createGroupChat","chooseUser","NewChat","newTab","getHeader","router","UserInfo","setUser","fetchUser","ModalRouterBigScreens","path","useRouteMatch","routeProps","match","params","uidInfo","GridBigScreens","url","useParams","padding","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","useGlobal","renderTypeMsgContainer","modal","modalInfo","notifications","init","updateUserSelf","App","useDispatch","initTokens","tokens","isLoggedIn","localStorage","removeItem","useState","useEffect","existingTokens","parse","getItem","Provider","setItem","exact","NoMatch","useLocation","element","chatsLoaded","addReducer","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initGlobal","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.db446a27.chunk.js","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nclass ErrorMsg extends Component{\r\n    render() {\r\n        return(\r\n            <small className=\"alert alert-danger p-1 message d-block\">\r\n                {this.props.children}\r\n            </small>\r\n        )\r\n    }\r\n}\r\n\r\nexport {ErrorMsg};","import $ from 'jquery';\r\n/*\r\n    benötigt:\r\n        jQuery\r\n        font-awesome\r\n\r\n    Password-toggle\r\n */\r\nexport function extendJQuery(){\r\n    $.fn.extend({\r\n        pwToggle: function(){\r\n            this.prepend($('<i>')\r\n                .addClass(\"fas fa-eye-slash psw-toggle-icon\")\r\n                .css({\r\n                    position: 'absolute',\r\n                    right: '20px',\r\n                    top: '11px',\r\n                    color: '#666',\r\n                    cursor: 'pointer',\r\n                    width: '16px',\r\n                    height: '16px'\r\n                })\r\n                .hover(function() {\r\n                    $(this).css('color','#666');\r\n                }, function() {\r\n                    $(this).css('color','#000');\r\n                }));\r\n            this.css({\r\n                position:\"relative\"\r\n            });\r\n\r\n            let icon = this.get(0).children[0];\r\n            let input = this.get(0).children[1];\r\n\r\n            icon.addEventListener(\"click\",function(){\r\n                if(input.type === \"password\"){\r\n                    icon.classList.remove(\"fa-eye-slash\");\r\n                    icon.classList.add(\"fa-eye\");\r\n                    input.type = \"text\";\r\n                }else{\r\n                    icon.classList.remove(\"fa-eye\");\r\n                    icon.classList.add(\"fa-eye-slash\");\r\n                    input.type = \"password\";\r\n                }\r\n            });\r\n        }\r\n    });\r\n}","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}","import React,{Component} from \"reactn\";\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from \"react-router-dom\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\nimport {AuthContext} from \"./AuthContext\";\r\n\r\nclass Login extends Component{\r\n\r\n    setAuthContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr\r\n            });\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: ''\r\n            });\r\n           /*\r\n                request to server\r\n            */\r\n           this.login(this.state.username,this.state.password).then(data => {\r\n               if(!data.success){\r\n\r\n                   if(data.username !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           uNameErr: data.username\r\n                       });\r\n                   if(data.password !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           pwErr: data.password\r\n                       });\r\n               }\r\n           });\r\n        }\r\n\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n\r\n    login = async (username,password) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            };\r\n            const response = await fetch('/auth/login', config);\r\n            //const json = await response.json()\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.success) {\r\n                    this.dispatch.setUserSelf(data.uid,username);\r\n                    if(this.setAuthContext)\r\n                        this.setAuthContext({\r\n                            username: username,\r\n                            uid: data.uid\r\n                        });\r\n                    this.props.history.push('/chat');\r\n                }\r\n                return data;\r\n            } else {\r\n                return null;\r\n            }\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    render(){\r\n\r\n        return (\r\n            <AuthContext.Consumer>\r\n                {({authTokens, setAuthTokens}) => {\r\n\r\n                    this.setAuthContext = setAuthTokens;\r\n\r\n                    return(\r\n                        <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                            <div className=\"col-sm-12 my-auto\">\r\n                                <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                                    <h1>Login</h1>\r\n                                    <form onSubmit={this.submitHandler}>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"username\">Benutzername:</label>\r\n                                            {this.uNameErr()}\r\n                                            <input type=\"text\"\r\n                                                   name=\"username\"\r\n                                                   className=\"form-control\"\r\n                                                   placeholder=\"Benutzernamen eingeben\"\r\n                                                   onChange={this.changeHandler}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"password\">Passwort:</label>\r\n                                            {this.pwErr()}\r\n                                            <div id=\"psw-group\">\r\n                                                <input type=\"password\"\r\n                                                       name=\"password\"\r\n                                                       className=\"form-control\"\r\n                                                       placeholder=\"Passwort eingeben\"\r\n                                                       onChange={this.changeHandler}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\r\n                                        </div>\r\n                                        <input\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-primary\"\r\n                                            value=\"Login\"\r\n                                        />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </AuthContext.Consumer>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);","import React,{Component} from \"reactn\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\nimport {AuthContext} from \"./AuthContext\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass Register extends Component{\r\n\r\n    setAuthContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            pwRepeatErr: '',\r\n            pwRepeat: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            },\r\n            passwordRepeat: {\r\n                presence: true,\r\n                equality: \"password\",\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            passwordRepeat: this.state.pwRepeat\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n            let pwRepeatErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.passwordRepeat)!=\"undefined\") {\r\n                pwRepeatErr = valResult.passwordRepeat[0];\r\n            }else{\r\n                pwRepeatErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr,\r\n                pwRepeatErr: pwRepeatErr\r\n            });\r\n\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: '',\r\n                pwRepeatErr: ''\r\n            });\r\n            /*\r\n                request to server\r\n             */\r\n            this.register(this.state.username,this.state.password).then(data => {\r\n                if(!data.success){\r\n\r\n                    if (data.username !== undefined)\r\n                        this.setState({\r\n                            valid: false,\r\n                            uNameErr: data.username\r\n                        });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwRepeatErr = () => {\r\n        if(this.state.pwRepeatErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwRepeatErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n\r\n    register = async(username,password) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            };\r\n            const response = await fetch('/auth/register', config);\r\n            //const json = await response.json()\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.success) {\r\n                    this.dispatch.setUserSelf(data.uid,username);\r\n                    if(this.setAuthContext)\r\n                        this.setAuthContext({\r\n                            username: username,\r\n                            uid: data.uid\r\n                        });\r\n                    this.props.history.push('/chat');\r\n                }\r\n                return data;\r\n            }else\r\n                return null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <AuthContext.Consumer>\r\n                {({authTokens, setAuthTokens}) => {\r\n\r\n                    this.setAuthContext = setAuthTokens;\r\n\r\n                    return (\r\n                        <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                            <div className=\"col-sm-12 my-auto\">\r\n                                <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                                    <h1>Registrieren</h1>\r\n                                    <form onSubmit={this.submitHandler}>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"username\">Benutzername:</label>\r\n                                            {this.uNameErr()}\r\n                                            <input type=\"text\"\r\n                                                   name=\"username\"\r\n                                                   className=\"form-control\"\r\n                                                   placeholder=\"Benutzernamen eingeben\"\r\n                                                   onChange={this.changeHandler}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"password\">Passwort:</label>\r\n                                            {this.pwErr()}\r\n                                            <div id=\"psw-group\">\r\n                                                <input type=\"password\"\r\n                                                       name=\"password\"\r\n                                                       className=\"form-control\"\r\n                                                       placeholder=\"Passwort eingeben\"\r\n                                                       onChange={this.changeHandler}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"password\">Passwort wiederholen:</label>\r\n                                            {this.pwRepeatErr()}\r\n                                            <div id=\"psw-group-repeat\">\r\n                                                <input type=\"password\"\r\n                                                       name=\"pwRepeat\"\r\n                                                       className=\"form-control\"\r\n                                                       placeholder=\"Passwort eingeben\"\r\n                                                       onChange={this.changeHandler}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </AuthContext.Consumer>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group-repeat, #psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default withRouter(Register);","/*\r\n    auth;\r\n        https://medium.com/better-programming/building-basic-react-authentication-e20a574d5e71\r\n        https://github.com/DennyScott/react-router-auth\r\n */\r\nimport React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from './AuthContext';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n\r\n    const { authTokens } = useAuth();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props =>\r\n                authTokens ? (\r\n                    authTokens.loading ? null : (\r\n                        <Component {...props} />\r\n                    )\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: \"/login\",\r\n                            state: {\r\n                                referer: props.location\r\n                            }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default PrivateRoute;","let Colors = {};\r\nColors.names = {\r\n    aqua: \"#00ffff\",\r\n    black: \"#000000\",\r\n    blue: \"#0000ff\",\r\n    brown: \"#a52a2a\",\r\n    cyan: \"#00ffff\",\r\n    darkblue: \"#00008b\",\r\n    darkcyan: \"#008b8b\",\r\n    darkgrey: \"#a9a9a9\",\r\n    darkgreen: \"#006400\",\r\n    darkkhaki: \"#bdb76b\",\r\n    darkmagenta: \"#8b008b\",\r\n    darkolivegreen: \"#556b2f\",\r\n    darkorange: \"#ff8c00\",\r\n    darkorchid: \"#9932cc\",\r\n    darkred: \"#8b0000\",\r\n    darksalmon: \"#e9967a\",\r\n    darkviolet: \"#9400d3\",\r\n    fuchsia: \"#ff00ff\",\r\n    gold: \"#ffd700\",\r\n    green: \"#008000\",\r\n    indigo: \"#4b0082\",\r\n    khaki: \"#f0e68c\",\r\n    lightblue: \"#add8e6\",\r\n    lightgreen: \"#90ee90\",\r\n    lightgrey: \"#d3d3d3\",\r\n    lightpink: \"#ffb6c1\",\r\n    lime: \"#00ff00\",\r\n    magenta: \"#ff00ff\",\r\n    maroon: \"#800000\",\r\n    navy: \"#000080\",\r\n    olive: \"#808000\",\r\n    orange: \"#ffa500\",\r\n    pink: \"#ffc0cb\",\r\n    purple: \"#800080\",\r\n    violet: \"#800080\",\r\n    red: \"#ff0000\",\r\n    silver: \"#c0c0c0\"\r\n};\r\nColors.random = function() {\r\n    let result;\r\n    let count = 0;\r\n    for (let prop in this.names)\r\n        if (Math.random() < 1/++count)\r\n            result = prop;\r\n    return result;\r\n};\r\nexport default Colors;","\r\nexport default class BinSearchArray extends Array{\r\n\r\n    getIndex(key){\r\n\r\n        let left = 0;\r\n        let right = this.length-1;\r\n\r\n        while(left<=right){\r\n            let k= Math.floor((left+right)/2);\r\n            if(this[k].key === key)\r\n                return k;\r\n            else if(this[k].key < key)\r\n                left = k+1;\r\n            else //a[k]>v\r\n                right = k-1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getNearestKey(key){\r\n        /*\r\n            besseren Algorithmus finden\r\n         */\r\n        let i;\r\n        ++key;\r\n\r\n        while((i = this.getIndex(--key)) === -1){\r\n            /*\r\n                wenn key 0 ist, wird vorne eingefügt\r\n             */\r\n            if(key === 0) return -1;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    get(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            return this[i].value;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    add(key,value){\r\n        /*\r\n            key darf noch nicht vorhanden sein\r\n         */\r\n        if(this.getIndex(key) === -1) {\r\n\r\n            this.splice(this.getNearestKey(key) + 1, 0, {\r\n                key: key,\r\n                value: value\r\n            });\r\n        }\r\n    }\r\n\r\n    remove(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            this.splice(i,1);\r\n    }\r\n}","import Colors from \"../util/Color\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\nimport chatSocket from \"./chatSocket\";\r\n\r\nexport const UserErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    tempChat: 2,\r\n    userNotExisting: 3,\r\n    blocked: 4,\r\n    isSelf: 5,\r\n    error: 6\r\n};\r\n\r\nexport async function getUserNormalChat(uid){\r\n    /*\r\n        does the user exist & does normal chat exist\r\n     */\r\n    if(chatSocket.users.getIndex(uid) !== -1){\r\n        /*\r\n            does a normalChat exist at the user\r\n         */\r\n        if(chatSocket.users.get(uid).normalChat !== 0) {\r\n\r\n            return UserErrorCode.none;\r\n        }else{\r\n            /*\r\n                chat does not exist in server\r\n                it gets created\r\n             */\r\n            const user = chatSocket.users.get(uid);\r\n            chatSocket.temporaryChat.createNew(uid,user.username);\r\n\r\n            return UserErrorCode.tempChat;\r\n        }\r\n        /*\r\n            does there exist a temporary chat with this user\r\n        */\r\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\r\n        /*\r\n            user and chat does not exist in server\r\n         */\r\n        return UserErrorCode.tempChat;\r\n\r\n    }else{\r\n        /*\r\n            request user from server\r\n         */\r\n        try {\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await fetch('/user/' + uid, config);\r\n            /*\r\n                if ok, modal is closed\r\n             */\r\n            if(response.ok) {\r\n\r\n                const data = await response.json();\r\n\r\n                if(data.userExists && !data.blocked) {\r\n\r\n                    chatSocket.temporaryChat.createNew(uid,data.username);\r\n                    return UserErrorCode.tempChat;\r\n\r\n                }else{\r\n\r\n                    if(!data.userExists)\r\n\r\n                        return UserErrorCode.userNotExisting;\r\n\r\n                    else\r\n\r\n                        return UserErrorCode.blocked;\r\n                }\r\n\r\n            }else\r\n                return UserErrorCode.error;\r\n\r\n        }catch(error){\r\n            return UserErrorCode.error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default class User{\r\n\r\n    _uid;\r\n    _username;\r\n    _color;\r\n    //ids der chats des Users\r\n    _normalChat = 0;\r\n    //ids of the groupchats\r\n    _groupChats = new BinSearchArray();\r\n\r\n    constructor(uid,username) {\r\n        this.uid = uid;\r\n        this.username = username;\r\n        this.color = Colors.random();\r\n    }\r\n    /*\r\n        groupChat is added\r\n     */\r\n    addGroupChat(gcid){\r\n        this.groupChats.add(gcid,gcid);\r\n    }\r\n\r\n    removeGroupChat(gcid){\r\n        this.groupChats.remove(gcid);\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get username() {\r\n        return this._username;\r\n    }\r\n\r\n    set username(value) {\r\n        this._username = value;\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n\r\n    get normalChat() {\r\n        return this._normalChat;\r\n    }\r\n\r\n    set normalChat(value) {\r\n        this._normalChat = value;\r\n    }\r\n\r\n    get groupChats() {\r\n        return this._groupChats;\r\n    }\r\n\r\n    set groupChats(value) {\r\n        this._groupChats = value;\r\n    }\r\n}","import chatSocket from \"./chatSocket\";\r\n\r\nexport function isDifferentDay(date1,date2){\r\n    return date1.getDay() !== date2.getDay()\r\n        || date1.getMonth() !== date2.getMonth()\r\n        || date1.getFullYear() !== date2.getFullYear();\r\n}\r\n\r\nexport default class Message {\r\n\r\n    _mid;\r\n    _content;\r\n    _uid;\r\n    _date;\r\n    _chat;\r\n\r\n    constructor(mid,content,uid,chat,date = new Date(Date.now())) {\r\n        this.mid = mid;\r\n        this.content = content;\r\n        this.uid = uid;\r\n        this.date = date;\r\n        //type: object of Chat\r\n        this.chat = chat;\r\n    }\r\n    /*\r\n        a object representing the message is returned\r\n     */\r\n    getMessageObject(userTopShown){\r\n\r\n        const message = {\r\n            content: this.content,\r\n            mDateString: this.getMessageViewDateString(),\r\n            dateString: this.getDateString(),\r\n            date: this.date,\r\n            bySelf: this.uid === chatSocket.userSelf.uid\r\n        };\r\n        /*\r\n            if the user top should be shown, the property is added\r\n         */\r\n        if(userTopShown)\r\n            message.userTop = this.getUserTop();\r\n\r\n        return message;\r\n    }\r\n    /*\r\n        a object for the userinfo at the top of the message is returned\r\n     */\r\n    getUserTop(){\r\n        /*\r\n            is the message written by the user self?\r\n         */\r\n        if(this.uid === chatSocket.userSelf.uid)\r\n            return {\r\n                uid: this.uid,\r\n                username: 'Du:',\r\n                color: chatSocket.userSelf.color\r\n            };\r\n        /*\r\n            if the user is not self\r\n         */\r\n        const user = chatSocket.users.get(this.uid);\r\n        return {\r\n            uid: this.uid,\r\n            username: user.username + ':',\r\n            color: user.color\r\n        };\r\n    }\r\n\r\n    getChatViewDateString(){\r\n        /*\r\n            Wenn weniger als 1 Tag her: Uhrzeit\r\n         */\r\n        if(this.isDateToday()){\r\n\r\n            return 'heute ' + this.getTimeString();\r\n        }\r\n        /*\r\n            Wenn gestern: gestern\r\n         */\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern';\r\n        }\r\n        /*\r\n            sonst: Datum\r\n         */\r\n        else{\r\n            return this.getDateString();\r\n        }\r\n    }\r\n\r\n    getChatViewMsgString(){\r\n        let msgString = this.content;\r\n        /*\r\n            Wenn string länger als 18 Zeichen, wird verkürzt\r\n         */\r\n        if(msgString.length>18)\r\n            msgString = msgString.substr(0,18) + '...';\r\n        /*\r\n            wenn selbst geschrieben, steht Du: davor\r\n         */\r\n        if(this.uid === chatSocket.userSelf.uid)\r\n            return `Du: ${msgString}`;\r\n\r\n        else if(this.chat.type === 'normalchat')\r\n            return this.content;\r\n\r\n        else\r\n            return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\r\n\r\n    }\r\n\r\n    getMessageViewDateString(){\r\n        if(this.isDateToday()){\r\n\r\n            return this.getTimeString();\r\n        }\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern ' + this.getTimeString();\r\n        }else{\r\n\r\n            return this.getDateString() + ' ' + this.getTimeString();\r\n        }\r\n    }\r\n\r\n    isDateToday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    isDateYesterday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() - 1 &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    getDateString(){\r\n        const d = this.date.getDate();\r\n        let ds;\r\n        if(d<10)\r\n            ds = '0'+d;\r\n        else\r\n            ds = d;\r\n        const m = this.date.getMonth();\r\n        let ms;\r\n        if(m+1<10)\r\n            ms = '0'+(m+1);\r\n        else\r\n            ms = m+1;\r\n        const y = this.date.getFullYear();\r\n\r\n        return `${ds}.${ms}.${y}`;\r\n    }\r\n\r\n    getTimeString(){\r\n        const h = this.date.getHours();\r\n        let hs;\r\n        if(h<10)\r\n            hs = '0'+h;\r\n        else\r\n            hs = h;\r\n        const m = this.date.getMinutes();\r\n        let ms;\r\n        if(m<10)\r\n            ms = '0'+m;\r\n        else\r\n            ms = m;\r\n\r\n        return `${hs}:${ms}`;\r\n    }\r\n    /*\r\n        es wird überprüft, ob date2 an einem anderen Tag war\r\n     */\r\n    isDifferentDay(date2){\r\n        return this.date.getDay() !== date2.getDay()\r\n            || this.date.getMonth() !== date2.getMonth()\r\n            || this.date.getFullYear() !== date2.getFullYear();\r\n    }\r\n\r\n    get mid() {\r\n        return this._mid;\r\n    }\r\n\r\n    set mid(value) {\r\n        this._mid = value;\r\n    }\r\n\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    set content(value) {\r\n        this._content = value;\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get date() {\r\n        return this._date;\r\n    }\r\n\r\n    set date(value) {\r\n        this._date = value;\r\n    }\r\n\r\n    get chat() {\r\n        return this._chat;\r\n    }\r\n\r\n    set chat(value) {\r\n        this._chat = value;\r\n    }\r\n}","export default class EventHandler{\r\n\r\n    _events;\r\n\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    /*\r\n        event-handler wird hinzugefügt\r\n     */\r\n    on(event,fn){\r\n        /*\r\n            wenn event in Map vorhanden, wird event hinzugefügt\r\n         */\r\n        if(this.events.has(event))\r\n            this.events.get(event).push(fn);\r\n        /*\r\n            wenn event in map noch nicht vorhanden,\r\n            wird entry in map hinzugefügt\r\n         */\r\n        else\r\n            this.events.set(event,[fn]);\r\n    }\r\n    /*\r\n        event-handler wird entfernt\r\n     */\r\n    rm(event,fn){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            const e = this.events.get(event);\r\n            for(let i=0;i<e.length;i++)\r\n                //wenn element die gesuchte function, wird sie gelöscht\r\n                if(e[i] === fn)\r\n                    e.splice(i,1);\r\n        }\r\n    }\r\n    /*\r\n        alle registrierten functions eines events werden ausgelöst\r\n     */\r\n    trigger(event,...rest){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            /*\r\n                es werden alle functions aufgerufen\r\n             */\r\n            for(let i=0;i<this.events.get(event).length;i++)\r\n                this.events.get(event)[i](...rest);\r\n        }\r\n    }\r\n\r\n    get events() {\r\n        return this._events;\r\n    }\r\n\r\n    set events(value) {\r\n        this._events = value;\r\n    }\r\n}","import BinSearchArray from \"../util/BinSearch\";\r\nimport Message from \"./Message\";\r\nimport EventHandler from \"../util/Event\";\r\nimport chatSocket from \"./chatSocket\";\r\nimport {getDispatch} from 'reactn';\r\n\r\nclass Chat {\r\n\r\n    _type;\r\n    _id;\r\n    _chatName;\r\n    _messages = new BinSearchArray();\r\n    _event = new EventHandler();\r\n    _unreadMessages = 0;\r\n    /*\r\n        are all messages already loaded?\r\n     */\r\n    _reachedTopMessages = false;\r\n\r\n    constructor(type, id,chatName) {\r\n        this.type = type;\r\n        this.id = id;\r\n        this.chatName = chatName;\r\n    }\r\n    /*\r\n        messages are loaded\r\n     */\r\n    async loadMessages(num){\r\n        /*\r\n            messages are only loaded, if top not already reached\r\n         */\r\n        if(!this.reachedTopMessages) {\r\n\r\n            const getLastMsgId = () => {\r\n                const msg = this.getLastMessage();\r\n                if (msg !== null)\r\n                    return msg.mid;\r\n                return -1;\r\n            };\r\n            /*\r\n                messages are loaded from server\r\n             */\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    chatType: this.type,\r\n                    chatId: this.id,\r\n                    lastMsgId: getLastMsgId(),\r\n                    num: num\r\n                })\r\n            };\r\n            const response = await fetch('/message/load', config);\r\n\r\n            if (response.ok) {\r\n\r\n                const data = await response.json();\r\n                /*\r\n                    is top already reached?\r\n                 */\r\n                this.reachedTopMessages = data.status === 'reached top';\r\n\r\n                const lMessages = data.messages;\r\n                /*\r\n                    the array that will be returned\r\n                 */\r\n                const messages = new Array(lMessages.length);\r\n                const userTopShown = this.showUserInfoMessage();\r\n\r\n                for (let i = lMessages.length - 1; i >= 0; i--) {\r\n\r\n                    const lm = lMessages[i];\r\n                    const message = new Message(lm.mid, lm.content, lm.uid, this, new Date(lm.date));\r\n                    this.messages.add(lm.mid, message);\r\n                    messages[i] = message.getMessageObject(userTopShown);\r\n                }\r\n                return messages;\r\n            }\r\n            throw new Error();\r\n        }\r\n    }\r\n    /*\r\n        gibt die Nachricht, die am längsten zurück liegt, zurück\r\n     */\r\n    getLastMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[0].value;\r\n        return null;\r\n    }\r\n    /*\r\n        gibt die neueste Nachricht im chat zurück\r\n     */\r\n    getFirstMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[this.messages.length - 1].value;\r\n        return null;\r\n    }\r\n    /*\r\n        returns all messages in an array\r\n            userTopShown    should the user at the top be shown?\r\n     */\r\n    getMessages(){\r\n\r\n        const userTopShown = this.showUserInfoMessage();\r\n        const rMessages = new Array(this.messages.length);\r\n\r\n        for(let i=0;i<this.messages.length;i++){\r\n\r\n            const message = this.messages[i].value;\r\n            rMessages[i] = message.getMessageObject(userTopShown);\r\n        }\r\n\r\n        return rMessages;\r\n    }\r\n    /*\r\n        neue Nachricht wird hinzugefügt\r\n     */\r\n    addMessage(uid,content,mid){\r\n        const message =\r\n            new Message(mid,content,uid,this,new Date(Date.now()));\r\n        this.messages.add(mid,message);\r\n        getDispatch().newMsg(\r\n            this,\r\n            this.unreadMessages,\r\n            message.getMessageObject(\r\n                this.showUserInfoMessage()\r\n            ));\r\n    }\r\n    /*\r\n        should the userInfo at the messages be shown (--> only in groupChats)\r\n     */\r\n    showUserInfoMessage(){\r\n        return(this.type === 'groupChat')\r\n    }\r\n    /*\r\n        an object of this chat is returned\r\n     */\r\n    getChatObject(){\r\n        return {\r\n            type: this.type,\r\n            id: this.id,\r\n            chatName: this.chatName,\r\n            latestMessage: this.getLatestMessageObject(),\r\n            unreadMessages: 0\r\n        };\r\n    }\r\n    /*\r\n        an object with the latest message is returned\r\n     */\r\n    getLatestMessageObject(){\r\n        /*\r\n            are there messages?\r\n        */\r\n        if(this.messages.length === 0){\r\n            return null;\r\n        }else{\r\n            const lm = this.getFirstMessage();\r\n            return {\r\n                msgString: lm.getChatViewMsgString(),\r\n                dateString: lm.getChatViewDateString(),\r\n                date: lm.date\r\n            };\r\n        }\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get chatName() {\r\n        return this._chatName;\r\n    }\r\n\r\n    set chatName(value) {\r\n        this._chatName = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get unreadMessages() {\r\n        return this._unreadMessages;\r\n    }\r\n\r\n    set unreadMessages(value) {\r\n        this._unreadMessages = value;\r\n    }\r\n\r\n    get reachedTopMessages() {\r\n        return this._reachedTopMessages;\r\n    }\r\n\r\n    set reachedTopMessages(value) {\r\n        this._reachedTopMessages = value;\r\n    }\r\n}\r\n\r\nexport class NormalChat extends Chat{\r\n\r\n    _otherUser;\r\n    _isTyping = false;\r\n\r\n    constructor(id,chatName,uid) {\r\n        super('normalChat',id,chatName);\r\n        this.otherUser = uid;\r\n\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return [\r\n                {\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                }\r\n            ];\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = true;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = false;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n\r\n    get otherUser() {\r\n        return this._otherUser;\r\n    }\r\n\r\n    set otherUser(value) {\r\n        this._otherUser = value;\r\n    }\r\n\r\n    get isTyping() {\r\n        return this._isTyping;\r\n    }\r\n\r\n    set isTyping(value) {\r\n        this._isTyping = value;\r\n    }\r\n}\r\nexport class GroupChat extends Chat{\r\n    //array with uids\r\n    _users = [];\r\n    //Array mit uids von den usern, die gerade schreibem\r\n    _usersTyping = [];\r\n\r\n    constructor(id,chatName,uids) {\r\n        super('groupChat',id,chatName);\r\n        this.users = uids;\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n\r\n            let rc = [];\r\n            for(let i=0;i<this.usersTyping.length;i++){\r\n                const user = chatSocket.users.get(this.usersTyping[i]);\r\n                rc.push({\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                });\r\n            }\r\n            return rc;\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der am neuestem schriebt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(!this.isTyping(uid)){\r\n                /*\r\n                    the user is added to the currently typing users\r\n                 */\r\n                this.usersTyping.push(uid);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(this.isTyping(uid)){\r\n                /*\r\n                    user is removed from the array of currently typing users\r\n                 */\r\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        returns true if the uid is member of the chat and not self\r\n     */\r\n    isMember(uid){\r\n        if(uid === chatSocket.userSelf.uid)\r\n            return false;\r\n        return this.users.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns true if the user is currently typing\r\n     */\r\n    isTyping(uid){\r\n        return this.usersTyping.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns the index of a currently typing user\r\n     */\r\n    getIndexOfTyping(uid){\r\n        return this.usersTyping.findIndex(e => e === uid);\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get usersTyping() {\r\n        return this._usersTyping;\r\n    }\r\n\r\n    set usersTyping(value) {\r\n        this._usersTyping = value;\r\n    }\r\n}","import {NormalChat} from \"./Chat\";\r\nimport chatSocket from \"./chatSocket\";\r\nimport User from \"./User\";\r\nimport Message from \"./Message\";\r\nimport {getDispatch} from 'reactn';\r\n\r\nexport default class TempChatLoader{\r\n\r\n    _isShown = false;\r\n    _chatNow;\r\n    /*\r\n        a new temporary chat gets created.\r\n        parameters uid and username required\r\n     */\r\n    createNew(uid,username){\r\n        this.chatNow = new NormalChat(0, username, uid);\r\n    }\r\n    /*\r\n        is the current tempChat already the one with this uid?\r\n     */\r\n    doesExist(uid){\r\n        if(this.chatNow === undefined)\r\n            return false;\r\n        return this.chatNow.otherUser === uid;\r\n    }\r\n    /*\r\n        tempChat gets shown\r\n     */\r\n    show(){\r\n        this.isShown = true;\r\n        getDispatch().showTempChat(this.chatNow);\r\n    }\r\n\r\n    update(){\r\n        getDispatch().updateTempChat(this.chatNow);\r\n    }\r\n\r\n    hide(){\r\n        this.isShown = false;\r\n        getDispatch().hideTempChat();\r\n    }\r\n    /*\r\n        a new normalChat is created out of the current tempChat\r\n     */\r\n    async createNewNormalChat(message){\r\n\r\n        return new Promise((resolve,reject) => {\r\n            /*\r\n                the request gets sent to the server\r\n             */\r\n            const otherUid = this.chatNow.otherUser;\r\n            const otherUsername = this.chatNow.chatName;\r\n\r\n            /*\r\n                TODO: http-request\r\n             */\r\n            chatSocket.socket.emit('new normalChat',{\r\n                uid: otherUid,\r\n                username: otherUsername,\r\n                message: message\r\n            },res => {\r\n                /*\r\n                    the user and the chat get created client-side\r\n                 */\r\n                if(chatSocket.users.getIndex(otherUid) === -1){\r\n                    chatSocket.users.add(otherUid,new User(otherUid,otherUsername,res.online));\r\n                }\r\n                const otherUser = chatSocket.users.get(otherUid);\r\n                otherUser.online = res.online;\r\n\r\n                const newChat = new NormalChat(res.ncid,otherUsername,otherUid);\r\n                /*\r\n                    chat gets added to user\r\n                 */\r\n                otherUser.normalChat = newChat.id;\r\n                /*\r\n                    chat is added in binsearchArray\r\n                 */\r\n                chatSocket.chats.normal.add(res.ncid,newChat);\r\n                /*\r\n                    message is added to chat\r\n                 */\r\n                newChat.messages.add(res.mid,new Message(res.mid,message,chatSocket.userSelf.uid,newChat,new Date(Date.now())));\r\n\r\n                //args: chat\r\n                getDispatch().addChat(newChat);\r\n\r\n                /*\r\n                    currentChat gets changed\r\n                 */\r\n                getDispatch().selectChat(newChat);\r\n                this.hide();\r\n\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    get isShown() {\r\n        return this._isShown;\r\n    }\r\n\r\n    set isShown(value) {\r\n        this._isShown = value;\r\n    }\r\n\r\n    get chatNow() {\r\n        return this._chatNow;\r\n    }\r\n\r\n    set chatNow(value) {\r\n        this._chatNow = value;\r\n    }\r\n}\r\n\r\n","import io from 'socket.io-client';\r\nimport User from \"./User\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\nimport {GroupChat, NormalChat} from \"./Chat\";\r\nimport Message from \"./Message\";\r\nimport EventHandler from \"../util/Event\";\r\nimport TempChatLoader from \"./tempChatLoader\";\r\nimport {getGlobal,getDispatch} from 'reactn';\r\n\r\nclass ChatSocket{\r\n\r\n    _socket;\r\n    _userSelf;\r\n    _users = new BinSearchArray();\r\n    _chats = {\r\n        normal: new BinSearchArray(),\r\n        group: new BinSearchArray()\r\n    };\r\n    _event = new EventHandler();\r\n    _finishedLoading = false;\r\n    /*\r\n        normalchat not saved in the database\r\n     */\r\n    _temporaryChat = new TempChatLoader();\r\n    _initCalled = false;\r\n\r\n    destruct(){\r\n\r\n        if(this.socket) {\r\n            this.socket.removeAllListeners();\r\n            this.socket.disconnect();\r\n        }\r\n        this.initCalled = false;\r\n    }\r\n\r\n    async init(){\r\n\r\n        const {uid,username} = getGlobal().userSelf;\r\n        /*\r\n            user-Object is created\r\n         */\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n\r\n        this.initCalled = true;\r\n\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n\r\n        this.socket = io.connect('/', {secure: true});\r\n        /*\r\n            userInfo wird an client gesendet\r\n         */\r\n        this.socket.emit('auth', uid, username);\r\n        /*\r\n            is called when user is initialized\r\n         */\r\n        this.socket.on('initialized',() => {\r\n\r\n            this.initChats();\r\n        });\r\n        /*\r\n            msg-handler\r\n         */\r\n        this.socket.on('chat message',data => {\r\n            /*\r\n                gets chat of msg\r\n                adds this message to chat\r\n            */\r\n            const chat = this.getChat(data.type,data.id);\r\n            if(chat !== null) {\r\n                const isCurrentChat = this.isCurrentChat(chat.type, chat.id);\r\n                chat.addMessage(data.uid, data.content, data.mid);\r\n                /*\r\n                    hasNewMsg gets updated\r\n                    if current chat --> false\r\n                 */\r\n                chat.hasNewMsg = !isCurrentChat;\r\n                /*\r\n                    if chat is not currentChat, unreadMessages gets incremented\r\n                 */\r\n                chat.unreadMessages ++;\r\n                /*\r\n                    new message event is triggered\r\n                 */\r\n                this.event.trigger('new message', data.type, data.id);\r\n            }\r\n        });\r\n        /*\r\n            started typing\r\n         */\r\n        this.socket.on('started typing',data => {\r\n            const chat = this.getChat(data.type,data.id);\r\n            chat.startedTyping(data.uid);\r\n        });\r\n        /*\r\n            stopped typing\r\n         */\r\n        this.socket.on('stopped typing',data => {\r\n            const chat = this.getChat(data.type,data.id);\r\n            chat.stoppedTyping(data.uid);\r\n        });\r\n        /*\r\n            the result of the search in new chat\r\n         */\r\n        this.socket.on('users-noChat',data => {\r\n            chatSocket.event.trigger('users-noChat',data);\r\n        });\r\n        /*\r\n            the user has been added to a new chat\r\n         */\r\n        this.socket.on(\"new chat\",data => {\r\n            this.addNewChat(data);\r\n        });\r\n        /*\r\n            Bei disconnect wird Seite neu geladen\r\n         */\r\n        this.socket.on('disconnect',() => {\r\n            setTimeout(function() {\r\n\r\n                getDispatch().deleteUserSelf();\r\n                getDispatch().resetGlobal();\r\n                resetChatSocket();\r\n                alert('Verbindung verloren! Seite wird neu geladen');\r\n                // eslint-disable-next-line no-restricted-globals\r\n                location.reload();\r\n            },1000);\r\n        });\r\n    }\r\n\r\n    async initChats(){\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        /*\r\n            chats are requested\r\n         */\r\n        const response = await fetch('/chats', config);\r\n\r\n        if(response.status === 200) {\r\n\r\n            const data = await response.json();\r\n            for (let i = 0; i < data.length; i++) {\r\n                if (data[i].type === 'normalChat') {\r\n                    /*\r\n                        normalChat is added\r\n                     */\r\n                    this.addNewNormalChat(data[i]);\r\n                } else if (data[i].type === 'groupChat') {\r\n                    /*\r\n                        groupChat is added\r\n                     */\r\n                    this.addNewGroupChat(data[i]);\r\n                }\r\n            }\r\n        }\r\n        this.finishedLoading = true;\r\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\r\n    }\r\n\r\n    getChatArraySortedByDate(){\r\n\r\n        function getMessageTime (chat) {\r\n            const c = chat.latestMessage;\r\n            if(c !== null)\r\n                return c.date.getTime();\r\n            return new Date(0).getTime();\r\n        }\r\n\r\n        function getMaxDate (chats,iFrom) {\r\n            let max = iFrom;\r\n            for(let i = iFrom+1;i<chats.length;i++){\r\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\r\n                    max = i;\r\n            }\r\n            return max;\r\n        }\r\n        function swap (items, firstIndex, secondIndex) {\r\n            let temp = items[firstIndex];\r\n            items[firstIndex] = items[secondIndex];\r\n            items[secondIndex] = temp;\r\n        }\r\n        /*\r\n            Array is cloned\r\n         */\r\n        function cloneArr (arr) {\r\n            const clone = new Array(arr.length);\r\n            for(let i=0;i<arr.length;i++){\r\n                const chat = arr[i].value;\r\n                clone[i] = chat.getChatObject();\r\n            }\r\n            return clone;\r\n        }\r\n        /*\r\n            es wird ein sortiertes Array zurückgegeben\r\n         */\r\n        function getSorted (chats) {\r\n            //Array wird erzeugt\r\n            const sorted = cloneArr(chats);\r\n            /*\r\n                es wird immer das höchste eingefügt, um Array zu sortieren\r\n             */\r\n            for(let i=0;i<sorted.length-1;i++){\r\n                let max = getMaxDate(sorted,i);\r\n                swap(sorted,i,max);\r\n            }\r\n            return sorted;\r\n        }\r\n        /*\r\n            Arrays werden gemerged\r\n         */\r\n        function mergeArr (arr1,arr2) {\r\n\r\n            const merged = new Array(arr1.length + arr2.length);\r\n            let p1 = 0;\r\n            let p2 = 0;\r\n            for(let i=0;i<merged.length;i++){\r\n                if(! (p2 < arr2.length)){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else if (! (p1 < arr1.length)){\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else{\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }\r\n            }\r\n            return merged;\r\n        }\r\n        const ncSorted = getSorted(this.chats.normal);\r\n        const gcSorted = getSorted(this.chats.group);\r\n\r\n        return mergeArr(ncSorted, gcSorted);\r\n    }\r\n\r\n    isCurrentChat(type,id){\r\n        const currentChat = getGlobal().currentChat;\r\n        return currentChat.type === type && currentChat.id === id;\r\n    };\r\n\r\n    getChat(type,id){\r\n        /*\r\n            type can be:\r\n                normalChat\r\n                tempChat\r\n                groupChat\r\n         */\r\n        if(type === 'normalChat')\r\n            return this.chats.normal.get(id);\r\n        else if(type === 'tempChat') {\r\n            return this.temporaryChat.chatNow;\r\n        }\r\n        else if(type === 'groupChat')\r\n            return this.chats.group.get(id);\r\n    }\r\n    /*\r\n        a new chat gets added\r\n     */\r\n    addNewChat(data){\r\n\r\n        let newChat;\r\n\r\n        if(data.type === 'normalChat'){\r\n            /*\r\n                new normalChat gets created\r\n             */\r\n            newChat = this.addNewNormalChat(data);\r\n\r\n        }else if(data.type === 'groupChat'){\r\n\r\n            newChat = this.addNewGroupChat((data));\r\n        }\r\n        newChat.unreadMessages = 1;\r\n        /*\r\n            event gets triggered\r\n         */\r\n        getDispatch().addChat(newChat);\r\n    }\r\n    /*\r\n        a new normalChat gets added\r\n     */\r\n    addNewNormalChat(data){\r\n        /*\r\n            check if the other user does already exist\r\n                if not --> gets created\r\n         */\r\n        let otherUser;\r\n        if(this.users.getIndex(data.members[0].uid) === -1){\r\n            otherUser = new User(\r\n                data.members[0].uid,\r\n                data.members[0].username\r\n            );\r\n            this.users.add(otherUser.uid,otherUser);\r\n        }else{\r\n            otherUser = this.users.get(data.members[0].uid);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat = new NormalChat(\r\n            data.id,\r\n            data.chatName,\r\n            otherUser.uid\r\n        );\r\n        /*\r\n            normalChat is set at other user\r\n         */\r\n        otherUser.normalChat = newChat.id;\r\n        /*\r\n            first message is initialized\r\n         */\r\n        const message = data.firstMessage;\r\n        /*\r\n            if message exists it gets added to the chat\r\n         */\r\n        if(!message.empty)\r\n            newChat.messages.add(\r\n                message.mid,\r\n                new Message(\r\n                    message.mid,\r\n                    message.content,\r\n                    message.uid,\r\n                    newChat,\r\n                    new Date(message.date)\r\n                )\r\n            );\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.normal.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n    /*\r\n        a new groupChat gets added\r\n     */\r\n    addNewGroupChat(data){\r\n        /*\r\n            check which do not exist already --> get added\r\n         */\r\n        const members = [];\r\n\r\n        for(let i=0;i<data.members.length;i++) {\r\n\r\n            const member = data.members[i];\r\n            /*\r\n                does the user already exist?\r\n             */\r\n            let user;\r\n            if (this.users.getIndex(member.uid) === -1) {\r\n                user = new User(\r\n                    member.uid,\r\n                    member.username\r\n                );\r\n                this.users.add(user.uid, user);\r\n            } else {\r\n                user = this.users.get(member.uid);\r\n            }\r\n            /*\r\n                member gets added\r\n             */\r\n            members.push(user.uid);\r\n            /*\r\n                chat is added at user\r\n             */\r\n            user.addGroupChat(data.id);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat = new GroupChat(data.id,data.chatName,members);\r\n        /*\r\n            first message is initialized\r\n         */\r\n        const message = data.firstMessage;\r\n        /*\r\n            if message exists it gets added to the chat\r\n         */\r\n        if(!message.empty)\r\n            newChat.messages.add(\r\n                message.mid,\r\n                new Message(\r\n                    message.mid,\r\n                    message.content,\r\n                    message.uid,\r\n                    newChat,\r\n                    new Date(message.date)\r\n                )\r\n            );\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.group.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n\r\n    get socket() {\r\n        return this._socket;\r\n    }\r\n\r\n    set socket(value) {\r\n        this._socket = value;\r\n    }\r\n\r\n    get userSelf() {\r\n        return this._userSelf;\r\n    }\r\n\r\n    set userSelf(value) {\r\n        this._userSelf = value;\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get chats() {\r\n        return this._chats;\r\n    }\r\n\r\n    set chats(value) {\r\n        this._chats = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get finishedLoading() {\r\n        return this._finishedLoading;\r\n    }\r\n\r\n    set finishedLoading(value) {\r\n        this._finishedLoading = value;\r\n    }\r\n\r\n    get temporaryChat() {\r\n        return this._temporaryChat;\r\n    }\r\n\r\n    set temporaryChat(value) {\r\n        this._temporaryChat = value;\r\n    }\r\n\r\n    get initCalled() {\r\n        return this._initCalled;\r\n    }\r\n\r\n    set initCalled(value) {\r\n        this._initCalled = value;\r\n    }\r\n}\r\n\r\nlet chatSocket = new ChatSocket();\r\n\r\nexport function resetChatSocket(){\r\n    chatSocket.destruct();\r\n    chatSocket = new ChatSocket();\r\n}\r\n\r\nexport default chatSocket;\r\n","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\r\n\r\nexport const DeviceWidthObject = {\r\n\r\n    MobileSmall      : { max: 320, min: 0 },\r\n    MobileMedium     : { max: 375, min: 321 },\r\n    MobileLarge      : { max: 767, min: 376 },\r\n\r\n    Tablet           : { max: 991, min: 768 },\r\n\r\n    LaptopSmall      : { max: 1024, min: 992 },\r\n    LaptopLarge      : { max: 1440, min: 1025 },\r\n\r\n    LargerThanLaptop : { max: 2560, min: 1441 },\r\n    LargeScreenMax   : { max: 999999, min: 2561 }\r\n\r\n};\r\n\r\nexport const IdDeviceBreakpointsByWidth = {\r\n\r\n    laptop_max : 1440,\r\n    laptop_min : 992,\r\n    tablet_min : 768,\r\n    tablet_max : 991,\r\n    mobile_max : 767,\r\n    default_min : 768 // Unrecognized device\r\n};\r\n\r\nexport const IdMobileHeight = {\r\n    mobileLandscape_min : 320,\r\n    mobileLandscape_max : 425\r\n};\r\n\r\nexport const getWindowDimension = () => {\r\n\r\n    const width = window.innerWidth\r\n        || document.documentElement.clientWidth\r\n        || document.body.clientWidth;\r\n\r\n    const height = window.innerHeight\r\n        || document.documentElement.clientHeight\r\n        || document.body.clientHeight;\r\n\r\n    return {width, height}\r\n\r\n};\r\n\r\nexport const getDeviceTypeInfo = () => {\r\n    const { width, height } = getWindowDimension();\r\n    const buildDeviceDetails = {\r\n        deviceType: '',\r\n        deviceTypeVariant: '',\r\n        orientation: 'Portrait',\r\n        width,\r\n        height,\r\n        isFallback: false\r\n    };\r\n//  Edge case\r\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\r\n    if (hasEdgeCase) {\r\n        return hasEdgeCase\r\n    }\r\n    if (height < width) {\r\n        // Orientation is landscape\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        if (height <= IdMobileHeight.mobileLandscape_max) {\r\n            // Mobile (landscape)\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    height <= DeviceWidthObject[devc].max &&\r\n                    height >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            // Tablet (landscape)\r\n            buildDeviceDetails.deviceType = 'Tablet';\r\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            // Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'Laptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            // Larger than Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc\r\n                    break\r\n                }\r\n            }\r\n        } else {\r\n\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\r\n            buildDeviceDetails.isFallback = true\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    } else {\r\n        // Orientation is portrait\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        for (const devc in DeviceWidthObject) {\r\n            if (\r\n                width <= DeviceWidthObject[devc].max &&\r\n                width >= DeviceWidthObject[devc].min\r\n            ) {\r\n                buildDeviceDetails.deviceTypeVariant = devc;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Laptop'\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Tablet'\r\n        }\r\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\r\n            buildDeviceDetails.deviceType = 'Mobile'\r\n        }\r\n\r\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    }\r\n};\r\n\r\nconst handleExceptions = (buildDeviceDetails, width, height) => {\r\n    //  iPadPro\r\n    if (width === 1024 && height === 1366) {\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        return buildDeviceDetails\r\n    } else if (width === 1366 && height === 1024) {\r\n        //  Edge case\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        return buildDeviceDetails\r\n    }\r\n\r\n    return undefined\r\n};","import React from 'react'\r\nimport {\r\n    getWindowDimension,\r\n    IdDeviceBreakpointsByWidth,\r\n    IdMobileHeight\r\n} from './utilResponsive';\r\n\r\nconst { width, height } = getWindowDimension();\r\nconst initialState = { width, height };\r\n\r\nexport default class Responsive extends React.PureComponent {\r\n\r\n    state = initialState;\r\n    componentDidMount () {\r\n        window.addEventListener('resize', this.handleResize, false)\r\n    }\r\n    componentWillUnmount () {\r\n        window.removeEventListener('resize', this.handleResize, false)\r\n    }\r\n    render = () => {\r\n        const { children, displayIn } = this.props;\r\n        const { width, height } = this.state;\r\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\r\n        return (\r\n            <React.Fragment>\r\n                {shouldRenderChildren ? children : null}\r\n            </React.Fragment>\r\n        )\r\n    };\r\n    handleResize = () => {\r\n        const { width, height } = getWindowDimension();\r\n        this.setState({ width, height })\r\n    };\r\n    shouldRender = (display, width, height) => {\r\n        if (\r\n            display.indexOf('Laptop') !== -1 &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('Tablet') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\r\n        ) {\r\n            return true\r\n        }\r\n        // For mobile regardless of orientation\r\n        if (\r\n            display.indexOf('Mobile') !== -1 &&\r\n            width <= IdDeviceBreakpointsByWidth.mobile_max\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('MobilePortrait') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height >= IdMobileHeight.mobileLandscape_max)\r\n        ) {\r\n            return true\r\n        }    return !!(\r\n            display.indexOf('MobileLandScape') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height <= IdMobileHeight.mobileLandscape_min)\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class Dummy extends Component {\r\n\r\n    componentDidMount() {\r\n        if(typeof(this.props.didMount) === 'function')\r\n            this.props.didMount();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(typeof(this.props.didUpdate) === 'function')\r\n            this.props.didUpdate();\r\n    }\r\n\r\n    render() {\r\n        if(this.props.children)\r\n            return this.props.children;\r\n        return null;\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport Responsive from \"../../responsive/Responsive\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nimport \"./headerLeft.scss\";\r\n\r\nexport const infoHeaderCenter = {\r\n    none: 0,\r\n    normalChat: 1,\r\n    groupChat: 2\r\n};\r\n\r\nclass HeaderLeft extends Component{\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n        /*\r\n            renders number of new messages\r\n         */\r\n        const renderNewMsgNumber = () => {\r\n            if(this.global.newMessages > 0){\r\n                return (\r\n                    <div className=\"btnBack-number\">\r\n                        {this.global.newMessages}\r\n                    </div>\r\n                )\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const renderBtnBack = () => {\r\n            /*\r\n                only small screens\r\n             */\r\n            return (\r\n                <div className=\"float-left left\">\r\n                    <i id=\"btnBackToChatList\"\r\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\r\n                       onClick={() => {this.props.history.goBack()}}\r\n                    />\r\n                    {renderNewMsgNumber()}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const renderChatInfo = () => {\r\n            /*\r\n                if there is a normal chat open, this info gets displayed\r\n             */\r\n            switch(this.global.infoHeaderCenter){\r\n\r\n                case infoHeaderCenter.normalChat:\r\n                    return (\r\n                        <HeaderCenter>\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </HeaderCenter>\r\n                    );\r\n\r\n                case infoHeaderCenter.groupChat:\r\n                    return(\r\n                        <HeaderCenter>\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </HeaderCenter>\r\n                    );\r\n\r\n                default:\r\n                    return(\r\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\r\n                        </Responsive>\r\n                    );\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n                    {renderBtnBack()}\r\n                </Responsive>\r\n                {renderChatInfo()}\r\n            </Dummy>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(HeaderLeft);\r\n\r\nfunction HeaderCenter(props){\r\n    return(\r\n        <div id=\"chat-info\" className=\"center pt-2\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"reactn\";\r\nimport $ from 'jquery';\r\nimport HeaderLeft from \"./HeaderLeft\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nimport './header.scss';\r\nimport {AuthContext} from \"../../Auth/AuthContext\";\r\n\r\nclass Header extends Component{\r\n\r\n    deleteAuthTokens;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            checkBoxClicked: false\r\n        };\r\n    }\r\n    clickCheckBox = event => {\r\n        if(this.state.checkBoxClicked)\r\n            event.stopPropagation();\r\n        else {\r\n            setTimeout(() => {\r\n                this.setState(state => ({\r\n                    checkBoxClicked: true\r\n                }));\r\n            }, 20);\r\n        }\r\n    };\r\n    clickDocument = event => {\r\n        if (this.state.checkBoxClicked)\r\n            this.changeChecked(event);\r\n    };\r\n    changeChecked = event => {\r\n        this.setState(state => ({\r\n            checkBoxClicked: !state.checkBoxClicked\r\n        }));\r\n    };\r\n\r\n    logout = () => {\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        fetch('/auth/logout', config)\r\n            .then(() => {\r\n                if(this.deleteAuthTokens)\r\n                    this.deleteAuthTokens();\r\n            })\r\n            .catch();\r\n\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return (\r\n            <AuthContext.Consumer>\r\n                {({authTokens, setAuthTokens,deleteAuthTokens}) => {\r\n\r\n                    this.deleteAuthTokens = deleteAuthTokens;\r\n\r\n                    return(\r\n                        <div className=\"c-header\">\r\n\r\n                            <HeaderLeft />\r\n\r\n                            <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\r\n\r\n                                <div className=\"right-l\" />\r\n\r\n                                <input type=\"checkbox\"\r\n                                       id=\"btnControlTopRight\"\r\n                                       className=\"btnControl\"\r\n                                       checked={this.state.checkBoxClicked}\r\n                                       onChange={this.changeChecked}\r\n                                />\r\n                                <label htmlFor=\"btnControlTopRight\">\r\n\r\n                                    <div className=\"right-c\">\r\n                                        <div className=\"d-only-when-small\">\r\n                                            <i  id=\"user-info\"\r\n                                                className=\"fas fa-user fa-2x user-icon\"\r\n                                                data-toggle=\"tooltip\"\r\n                                                title=\"Benutzer-Info\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"d-only-when-big top-2right\">\r\n\r\n                                            <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\r\n                                                <h4 id=\"username\"\r\n                                                    className=\"p-2 username\"\r\n                                                    data-toggle=\"tooltip\"\r\n                                                    title=\"Benutzer-Info\"\r\n                                                >\r\n                                                        {this.global.userSelf.username}\r\n                                                </h4>\r\n                                            </Link>\r\n                                            <div className=\"float-right\">\r\n                                                <Link to={pathname + \"/settings\"}>\r\n                                                    <i className=\"fas fa-user-cog fa-2x\"\r\n                                                       data-toggle=\"tooltip\"\r\n                                                       title=\"Einstellungen\"\r\n                                                    />\r\n                                                </Link>\r\n                                                &nbsp;\r\n                                                <i id=\"user-logout\"\r\n                                                   className=\"fas fa-sign-out-alt fa-2x logout\"\r\n                                                   data-toggle=\"tooltip\"\r\n                                                   title=\"logout\"\r\n                                                   onClick={this.logout}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </AuthContext.Consumer>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n        document.addEventListener('click',this.clickDocument,false);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click',this.clickDocument,false);\r\n    }\r\n\r\n}\r\nexport default withRouter(Header);","import React,{Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nimport \"./chatSearchBox.scss\";\r\n\r\nclass ChatSearchBox extends Component{\r\n\r\n    searchChanged = event => {\r\n        this.props.onSearch(event.target.value);\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return(\r\n            <div className=\"chatSearchBox\">\r\n                <div className=\"chat-select-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chat-search\"\r\n                        className=\"chat-search\"\r\n                        placeholder=\"Chat suchen\"\r\n                        onChange={this.searchChanged}\r\n                    />\r\n                    <Link to={pathname + \"/newChat\"}>\r\n                        <button id=\"btn-newChat\"\r\n                                className=\"btn-newChat\"\r\n                        >\r\n                            <i className=\"fas fa-plus fa-lg\" />\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(ChatSearchBox);","import React,{Component} from \"reactn\";\r\nimport {Link} from \"react-router-dom\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class ChatItem extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lastMsg: undefined,\r\n            typeMsg: ''\r\n        }\r\n    }\r\n    /*\r\n        is this chat selected?\r\n     */\r\n    isSelected = () => {\r\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\r\n    };\r\n    /*\r\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\r\n        um die typeMsg zu aktualisieren\r\n     */\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        let typeMsg = '';\r\n        /*\r\n            wenn latestuserTyping = null, schreibt gerade keiner\r\n         */\r\n        const userTyping = chat.getLatestUserTyping();\r\n        if(userTyping !== null){\r\n            typeMsg = userTyping.username + \" schreibt...\";\r\n        }\r\n        //state wird aktualisiert\r\n        this.setState({\r\n            typeMsg: typeMsg\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const renderUnreadMsg = () => {\r\n            if(this.props.unreadMessages === 0)\r\n                return null;\r\n            else\r\n                return(\r\n                    <div className=\"newMsg-number\">\r\n                        {this.props.unreadMessages}\r\n                    </div>\r\n                );\r\n        };\r\n        /*\r\n            in der unteren Hälfte wird angezeigt wer schreibt\r\n            schreibt keiner, wird letzte Nachricht angezeigt\r\n         */\r\n        const renderLowerHalf = () => {\r\n            if(this.state.typeMsg === '')\r\n                return (\r\n                    <div className=\"w-100 lastMsg\">\r\n                        {renderMsg()}\r\n                        {renderDate()}\r\n                    </div>\r\n                );\r\n            else{\r\n                return (\r\n                    <div className=\"w-100 typeMsg\">\r\n                        {this.state.typeMsg}\r\n                    </div>\r\n                );\r\n            }\r\n        };\r\n\r\n        const renderMsg = () => {\r\n            if(this.props.latestMessage)\r\n                return(\r\n                    <span>\r\n                        {this.props.latestMessage.msgString}\r\n                    </span>\r\n                );\r\n            else\r\n                return(\r\n                    <span>\r\n                        Noch keine Nachrichten vorhanden\r\n                    </span>\r\n                );\r\n        };\r\n\r\n        const renderDate = () => {\r\n            if(this.props.latestMessage)\r\n                return(\r\n                    <div className=\"lastMsg-date\">\r\n                        {this.props.latestMessage.dateString}\r\n                    </div>\r\n                );\r\n            else\r\n                return null;\r\n        };\r\n\r\n        const getLink = () => {\r\n            if(this.props.type === 'normalChat'){\r\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\r\n            }else if(this.props.type === 'groupChat'){\r\n                return '/chat/group/' + this.props.id;\r\n            }else if(this.props.type === 'tempChat'){\r\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\r\n            }\r\n        };\r\n\r\n        return(\r\n            <li className={(this.isSelected() ? \"selected \" : \"\")}>\r\n                <Link to={getLink()}>\r\n                    <div className=\"w-100\">\r\n                        <strong>\r\n                            {this.props.name}\r\n                        </strong>\r\n                        {renderUnreadMsg()}\r\n                    </div>\r\n                    {renderLowerHalf()}\r\n                </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        /*\r\n            event listener werden angelegt\r\n         */\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did component update?\r\n         */\r\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\r\n            //Listeners get replaced\r\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n\r\n            //typeMsg gets deleted\r\n            this.setState({\r\n                typeMsg: ''\r\n            });\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        /*\r\n            event listener werden entfernt\r\n         */\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport ChatSearchBox from \"./ChatSearchBox\";\r\nimport ChatItem from \"./ChatItem\";\r\n\r\nimport './chatList.scss';\r\n\r\nexport default class ChatList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //the current searchValue at the chatlist\r\n            searchValue: ''\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const paddingTop = this.props.paddingTop || '1rem';\r\n        let found = 0;\r\n\r\n        const showNothingFoundMsg = () => {\r\n            if(found === 0)\r\n                return(\r\n                    <span>\r\n                        Nichts gefunden\r\n                    </span>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderTempChat = () => {\r\n            /*\r\n                is tempChat not null?\r\n             */\r\n            if(this.global.tempChat){\r\n                return(\r\n                    <ChatItem\r\n                        key={-1}\r\n                        id={0}\r\n                        type={'tempChat'}\r\n                        name={this.global.tempChat.chatName}\r\n                        unreadMessages={0}\r\n                        latestMessage={null}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div style={{\r\n                paddingTop: paddingTop,\r\n                height: '100%'\r\n            }}>\r\n                <div className=\"chat-c-list\">\r\n                    <ChatSearchBox\r\n                        onSearch={searchValue => {\r\n                            this.setState({\r\n                                searchValue: searchValue\r\n                            })\r\n                        }}\r\n                    />\r\n\r\n                    <ul className=\"chat-list\">\r\n                        {renderTempChat()}\r\n                        {this.global.chats.map((chat,i) => {\r\n                            if(chat.chatName.includes(this.state.searchValue)) {\r\n                                found++;\r\n                                return (\r\n                                    <ChatItem\r\n                                        key={i}\r\n                                        id={chat.id}\r\n                                        type={chat.type}\r\n                                        name={chat.chatName}\r\n                                        unreadMessages={chat.unreadMessages}\r\n                                        latestMessage={chat.latestMessage}\r\n                                    />\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })}\r\n                    </ul>\r\n                    {showNothingFoundMsg()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport './chatViewLoader.scss';\r\n\r\nexport default function ChatViewLoader (props){\r\n    return(\r\n        <div className=\"loader-init\">\r\n            <div className=\"col-sm-12 my-auto\">\r\n                <div className=\"init-container border rounded\">\r\n                    <div className=\"spinner-border text-secondary\"\r\n                         style={{\r\n                             width: '15rem',\r\n                             height: '15rem',\r\n                             borderWidth: '0.5rem'\r\n                         }}\r\n                         role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div className=\"loader-text\">{props.msg}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport { Picker } from 'emoji-mart';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nimport './messageForm.scss';\r\n\r\nclass MessageForm extends Component{\r\n\r\n    _userTyping = false;\r\n    _typeEventEmitted = false;\r\n    _typeTimeout;\r\n    /*\r\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\r\n     */\r\n    _isTempChat;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            showEmoji: false\r\n        }\r\n    }\r\n\r\n    onTyping = event => {\r\n\r\n        this.setState({\r\n           message: event.target.value\r\n        });\r\n\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    handleTypeMessage = () => {\r\n        /*\r\n            type message get only handled if the chat is not temporary\r\n         */\r\n        if(!this.isTempChat) {\r\n\r\n            if (this.userTyping) {\r\n                clearTimeout(this.typeTimeout);\r\n            }\r\n            this.userTyping = true;\r\n            if (!this.typeEventEmitted) {\r\n                this.typeEventEmitted = true;\r\n                chatSocket.socket.emit('started typing');\r\n            }\r\n            this.typeTimeout = setTimeout(() => {\r\n                this.userTyping = false;\r\n                if (this.typeEventEmitted) {\r\n                    this.typeEventEmitted = false;\r\n                    chatSocket.socket.emit('stopped typing');\r\n                }\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n        /*\r\n            es kann keine leere Nachricht geschickt werden\r\n         */\r\n        if(this.state.message !== ''){\r\n            const message = this.state.message;\r\n            /*\r\n                input wird geleert\r\n             */\r\n            this.setState({\r\n                message: ''\r\n            });\r\n            if(this.isTempChat) {\r\n\r\n                const {pathname} = this.props.location;\r\n                /*\r\n                    the chat is created\r\n                 */\r\n                chatSocket.temporaryChat.createNewNormalChat(message)\r\n                    .then(redirect => {\r\n                        if(redirect) {\r\n                            this.props.history.replace(\"/chat\");\r\n                            this.props.history.replace(pathname);\r\n                        }\r\n                    });\r\n            }else{\r\n\r\n                this.sendMessage(message)\r\n                    .then(mid => {\r\n                        /*\r\n                            message is added to chat\r\n                         */\r\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\r\n                        chat.addMessage(chatSocket.userSelf.uid, message, mid);\r\n                    })\r\n                    .catch(err => {});\r\n            }\r\n        }\r\n    };\r\n\r\n    sendMessage = async msg => {\r\n        /*\r\n            message is sent to server\r\n         */\r\n        const config = {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                msg: msg\r\n            })\r\n        };\r\n        const response = await fetch('/message', config);\r\n\r\n        if (response.ok) {\r\n\r\n            const data = await response.json();\r\n            /*\r\n                mid is returned\r\n             */\r\n            return data.mid;\r\n        }\r\n        return new Error();\r\n    };\r\n\r\n    onEmojiInput = emoji => {\r\n\r\n        this.setState({\r\n            message: this.state.message + emoji.native\r\n        });\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    toggleEmoji = event => {\r\n        this.setState(state => ({\r\n            showEmoji: !state.showEmoji\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Dummy>\r\n                <form onSubmit={this.onSubmit} className=\"msg-form\">\r\n                    <div className=\"message-input\">\r\n                        <input autoComplete=\"off\"\r\n                               placeholder=\"Nachricht:\"\r\n                               value={this.state.message}\r\n                               onChange={this.onTyping}\r\n                        />\r\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\r\n                           onClick={this.toggleEmoji}\r\n                        />\r\n                    </div>\r\n                    <button className=\"btn-submit\" type=\"submit\">\r\n                        <i className=\"far fa-paper-plane fa-2x\"\r\n                           data-toggle=\"tooltip\"\r\n                           title=\"send message\" />\r\n                    </button>\r\n                </form>\r\n                {this.state.showEmoji ?\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        bottom: '60px',\r\n                        right: '50px',\r\n                        width: '350px',\r\n                        height: '425px'\r\n                    }}>\r\n                        <Picker onSelect={this.onEmojiInput}/>\r\n                    </div>\r\n                : null}\r\n            </Dummy>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n            isTempChat gets set\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            isTempChat gets updated\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    get userTyping() {\r\n        return this._userTyping;\r\n    }\r\n\r\n    set userTyping(value) {\r\n        this._userTyping = value;\r\n    }\r\n\r\n    get typeEventEmitted() {\r\n        return this._typeEventEmitted;\r\n    }\r\n\r\n    set typeEventEmitted(value) {\r\n        this._typeEventEmitted = value;\r\n    }\r\n\r\n    get typeTimeout() {\r\n        return this._typeTimeout;\r\n    }\r\n\r\n    set typeTimeout(value) {\r\n        this._typeTimeout = value;\r\n    }\r\n\r\n    get isTempChat() {\r\n        return this._isTempChat;\r\n    }\r\n\r\n    set isTempChat(value) {\r\n        this._isTempChat = value;\r\n    }\r\n}\r\n\r\nexport default withRouter(MessageForm);","import React,{Component} from \"react\";\r\nimport Colors from \"../../util/Color\";\r\n\r\nimport './message.scss'\r\n\r\nexport default class Message extends Component{\r\n\r\n    render() {\r\n\r\n        const msg = this.props.msg;\r\n\r\n        return(\r\n            <div className={\"p-2 border rounded \" + (msg.bySelf ? \"float-right \" : \"float-left \") + \"msg-container-other msg-container\"}>\r\n                {msg.userTop ?\r\n                    <div className=\"w-100\">\r\n                        <strong className=\"msg-container-header\"><span\r\n                            style={{\r\n                                color: Colors.names[msg.userTop.color]\r\n                            }}>\r\n                            {msg.userTop.username}\r\n                        </span>\r\n                        </strong>\r\n                    </div>\r\n                : null}\r\n                <div className=\"w-100 msg-container-content\">\r\n                    <p className=\"mb-0\">\r\n                        {msg.content}\r\n                    </p>\r\n                </div>\r\n                <div className=\"w-100 msg-date-outer\">\r\n                    <div className=\"msg-date\">\r\n                        {msg.mDateString}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport ReactDOM from 'react-dom';\r\nimport MessageForm from \"./MessageForm\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport Message from \"./Message\";\r\nimport {isDifferentDay} from '../../chatData/Message'\r\n\r\nimport './chatContainer.scss';\r\n\r\nexport default class ChatContainer extends Component{\r\n\r\n    _isMounted = false;\r\n    _messages;\r\n    _messagesNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\r\n        this.state = {\r\n            msgLoading: false,\r\n            scrollToBottom: 0,\r\n            messages: [],\r\n            typeMessages: []\r\n        };\r\n    }\r\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\r\n    scrollHandler = event => {\r\n        this.setState({\r\n            scrollToBottom: this.getScrollToBottom()\r\n        });\r\n        /*\r\n            wenn oben angelangt, werden Nachrichten geladen\r\n         */\r\n        if (this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\r\n    };\r\n\r\n    assignMessagesRef = target => {\r\n        this.messages = target;\r\n    };\r\n\r\n    loadMessages = () => {\r\n\r\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\r\n        /*\r\n            loader is only shown, if top not reached\r\n         */\r\n        if(!chat.reachedTopMessages)\r\n            this.setState({\r\n                msgLoading: true\r\n            });\r\n        /*\r\n            messages are loaded\r\n         */\r\n        chat.loadMessages(10)\r\n            .then(messages => {\r\n                /*\r\n                    loader is hidden\r\n                    messages are added\r\n                 */\r\n                this.dispatch.addLoadedMessages(messages);\r\n                this.setState(state => ({\r\n                    msgLoading: false\r\n                }));\r\n                this.setScrollToBottom(this.state.scrollToBottom);\r\n            })\r\n            .catch(err => this.setState({\r\n                msgLoading: false\r\n            }));\r\n    };\r\n    /*\r\n        is called when the selected chat changed\r\n     */\r\n    chatChanged = () => {\r\n        /*\r\n            if scrollToBottom is 0, the messages are loaded\r\n         */\r\n        if (this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\r\n\r\n        this.chatChanged();\r\n\r\n        this.isMounted = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn das der Fall ist:\r\n                wird messages loaded listener auf neuen chat angewandt\r\n                scrollToBottom wird auf 0 gesetzt\r\n                scrolltop wird überprüft\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n\r\n            //scrollToBottom wird auf 0 gesetzt\r\n            this.setScrollToBottom(0);\r\n\r\n            this.chatChanged();\r\n        }\r\n        /*\r\n            wenn scrollToBottom 0 wird zu bottom gescrollt\r\n         */\r\n        if(this.state.scrollToBottom === 0) {\r\n            this.setScrollToBottom(0);\r\n            /*\r\n                newMessages is set to 0\r\n             */\r\n            if(this.global.currentChat.newMessages > 0)\r\n                this.setGlobal(global => ({\r\n                   currentChat: {\r\n                       ...global.currentChat,\r\n                       newMessages: 0\r\n                   }\r\n                }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const showLoaderTop = () => {\r\n            if(this.state.msgLoading)\r\n                return(\r\n                    <div className=\"messageLoader-top\">\r\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderNewMessages = () => {\r\n\r\n            if(this.global.currentChat.newMessages > 0)\r\n                return(\r\n                    <div id=\"scroll-down-number\" className=\"number\">\r\n                        {this.global.currentChat.newMessages}\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderBtnToBottom = () => {\r\n            if(this.isMounted) {\r\n                if (this.getScrollToBottom() > 10) {\r\n                    return (\r\n                        <div id=\"messages-bottom\"\r\n                             className=\"messages-bottom\"\r\n                             onClick={() => {\r\n                                 this.setState({\r\n                                     scrollToBottom: 0\r\n                                 })\r\n                             }}\r\n                        >\r\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\r\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\r\n                            </div>\r\n                            {renderNewMessages()}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        let lastDate = new Date(0);\r\n        /*\r\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\r\n            wird ein Container mit Datum gerendert\r\n         */\r\n        const renderDateContainer = msg => {\r\n            if(isDifferentDay(msg.date,lastDate)){\r\n                lastDate = msg.date;\r\n                return(\r\n                    <div className = \"date-container\">\r\n                        <div>\r\n                            {msg.dateString}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            lastDate = msg.date;\r\n            return null;\r\n        };\r\n\r\n        const renderAlertNoMessages = () => {\r\n            if(this.global.currentChat.messages.length === 0)\r\n                return(\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\"\r\n                     onScroll={this.scrollHandler}\r\n                     ref={this.assignMessagesRef}\r\n                >\r\n                    {showLoaderTop()}\r\n                    {this.global.currentChat.messages.map((msg,i) => {\r\n                        return (\r\n                            <div key={i}>\r\n                                {renderDateContainer(msg)}\r\n                                <Message\r\n                                    msg={msg}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {renderAlertNoMessages()}\r\n                    {renderBtnToBottom()}\r\n                </div>\r\n                <MessageForm\r\n                    chatType={this.props.chatType}\r\n                    chatId={this.props.chatId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.isMounted = false;\r\n    }\r\n\r\n    get isMounted() {\r\n        return this._isMounted;\r\n    }\r\n\r\n    set isMounted(value) {\r\n        this._isMounted = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get messagesNode() {\r\n        return this._messagesNode;\r\n    }\r\n\r\n    set messagesNode(value) {\r\n        this._messagesNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class TempChatContainer extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\">\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                </div>\r\n                <MessageForm\r\n                    chatType={'tempChat'}\r\n                    chatId={0}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        chatSocket.temporaryChat.show();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        chatSocket.temporaryChat.update();\r\n    }\r\n    componentWillUnmount() {\r\n        chatSocket.temporaryChat.hide();\r\n    }\r\n}","import React, {Component} from \"reactn\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./ChatContainer\";\r\nimport TempChatContainer from \"./TempChatContainer\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/User\";\r\n\r\nexport default class NormalChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: UserErrorCode.none\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if(this.state.error === UserErrorCode.nan){\r\n                return(\r\n                    <div>\r\n                        <h2>ungültige Addresse</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            else if(this.state.error === UserErrorCode.isSelf){\r\n                return(\r\n                    <div>\r\n                        <h2>Du kannst dir selbst nicht schreiben</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if(this.state.loaded){\r\n\r\n                if(this.state.error === UserErrorCode.none){\r\n\r\n                    return(\r\n                        <ChatContainer\r\n                            chatType={this.global.currentChat.type}\r\n                            chatId={this.global.currentChat.id}\r\n                        />\r\n                    )\r\n                }else if(this.state.error === UserErrorCode.tempChat){\r\n                    return(\r\n                        <TempChatContainer />\r\n                    )\r\n                }else if(this.state.error === UserErrorCode.blocked){\r\n                    return(\r\n                        <div>\r\n                            <h2>Dieser User hat dich blockiert</h2>\r\n                        </div>\r\n                    )\r\n                }else{\r\n                    return(\r\n                        <div>\r\n                            <h2>Dieser User existiert nicht</h2>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        };\r\n\r\n        return <div className=\"h-100\">\r\n            {renderLoader()}\r\n            {renderChat()}\r\n        </div>;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.userChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did uid change?\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            /*\r\n                is props.uid a number?\r\n             */\r\n            if(isNaN(this.props.uid)){\r\n                this.setState({\r\n                    error: UserErrorCode.nan\r\n                });\r\n            }\r\n            else{\r\n                this.userChanged();\r\n            }\r\n\r\n        }\r\n    }\r\n    /*\r\n        is called when the user changed and when the component mounted\r\n            this is checked after each update\r\n     */\r\n    userChanged = () => {\r\n\r\n        const uid = parseInt(this.props.uid);\r\n\r\n        /*\r\n            is the user self?\r\n         */\r\n        if(this.global.userSelf.uid === uid){\r\n            this.setState({\r\n                error: UserErrorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else {\r\n\r\n            const userExists = () => {\r\n\r\n                getUserNormalChat(uid)\r\n                    .then(res => {\r\n                        /*\r\n                            no error\r\n                                checks if existing or tempChat\r\n                         */\r\n                        if (res === UserErrorCode.none) {\r\n                            this.setState({\r\n                                error: res\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.users.get(uid).username,\r\n                                    uid: uid\r\n                                }\r\n                            }).then();\r\n                            /*\r\n                                normalChat is selected\r\n                             */\r\n                            this.selectNormalChat(uid);\r\n                            /*\r\n                                tempChat\r\n                             */\r\n                        } else if (res === UserErrorCode.tempChat) {\r\n                            this.setState({\r\n                                error: res\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\r\n                                    uid: uid\r\n                                }\r\n                            }).then();\r\n                            /*\r\n                                the temporary chat is selected\r\n                             */\r\n                            this.selectTempChat();\r\n                        }\r\n                        /*\r\n                            some error has occured, state is set\r\n                         */\r\n                        else{\r\n                           this.setState({\r\n                               error: UserErrorCode.error\r\n                           })\r\n                        }\r\n                        this.setState({\r\n                            loaded: true\r\n                        });\r\n\r\n                    })\r\n                    .catch(err => this.setState({\r\n                        error: UserErrorCode.error\r\n                    }));\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                userExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    userExists();\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                uid: parseInt(this.props.uid)\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        the tempChat is selected\r\n     */\r\n    selectTempChat(){\r\n        this.dispatch.showTempChat();\r\n    }\r\n    /*\r\n        a normalCHat is selected\r\n     */\r\n    selectNormalChat(uid){\r\n        /*\r\n            does the user exist?\r\n         */\r\n        if (chatSocket.users.getIndex(uid) === -1) {\r\n\r\n            this.setState({\r\n                error: UserErrorCode.userNotExisting\r\n            });\r\n        }else {\r\n            /*\r\n                chat is pulled from chatSocket\r\n             */\r\n            const id = chatSocket.users.get(uid).normalChat;\r\n            const chat = chatSocket.getChat('normalChat', id);\r\n\r\n            this.dispatch.selectChat(chat);\r\n        }\r\n    }\r\n    /*\r\n        property- display normalChat is removed from global\r\n     */\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n}","import React,{Component} from \"react\";\r\nimport ChatViewLoader from \"../ChatViewLoader\";\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\n\r\nimport'./groupChatInfo.scss';\r\n\r\nclass GroupChatInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            loaded: false,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadChatInfo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did gcid change?\r\n         */\r\n        if(prevProps.gcid !== this.props.gcid)\r\n            this.loadChatInfo();\r\n    }\r\n\r\n    loadChatInfo = () => {\r\n\r\n        const loadChatInfoI = async() =>{\r\n\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await fetch('/group/' + this.props.gcid + '/',config);\r\n\r\n            if(response.ok){\r\n\r\n                let data = await response.json();\r\n\r\n                this.setState({\r\n                    data: data\r\n                });\r\n            }\r\n        };\r\n\r\n        loadChatInfoI()\r\n            .then(r => {\r\n                this.setState({\r\n                    loaded: true,\r\n                    error: false\r\n                })\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    loaded: true,\r\n                    error: true\r\n                })\r\n            });\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        if(this.state.error)\r\n            return(\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Ein Fehler ist aufgetreten!\r\n                </div>\r\n            );\r\n        else if(!this.state.loaded)\r\n            return (\r\n                <ChatViewLoader msg = \"info wird geladen\"/>\r\n            );\r\n        const uidSelf = chatSocket.userSelf.uid;\r\n        return(\r\n            <div className=\"groupChatInfo\">\r\n                <h1>{this.state.data.name}</h1>\r\n                <h4>{this.state.data.users.length} Mitglieder:</h4>\r\n                <ul className=\"userList\">\r\n                    {this.state.data.users.map((item,index) => (\r\n                        <li key={index}>\r\n                            <Link to={pathname + \"/userInfo/\" + item.uid}>\r\n                                {uidSelf === item.uid ?\r\n                                    <span>Du</span>\r\n                                :\r\n                                    item.username\r\n                                }\r\n                                {item.isAdmin === 1 ?\r\n                                    <div className=\"user-admin\">\r\n                                        Admin\r\n                                    </div>\r\n                                : null}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(GroupChatInfo);","import React,{Component} from \"reactn\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./ChatContainer\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\nimport GroupChatInfo from \"./groupChatInfo/GroupChatInfo\";\r\n\r\nexport const groupChatErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    chatNotExisting: 2,\r\n    notPartOfChat: 3,\r\n    private: 4\r\n};\r\n\r\nexport const groupChatTabs = {\r\n    chat: 0,\r\n    info: 1\r\n};\r\n\r\nexport default class GroupChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gcid: 0,\r\n            loaded: false,\r\n            error: groupChatErrorCode.none\r\n        }\r\n    }\r\n\r\n    groupChatExists = async(gcid) => {\r\n        /*\r\n            does the chat already exist in the client\r\n         */\r\n        if(chatSocket.chats.group.getIndex(gcid) !== -1){\r\n            return groupChatErrorCode.none;\r\n        }else{\r\n            return groupChatErrorCode.chatNotExisting;\r\n        }\r\n    };\r\n    /*\r\n        is called after the chatId changed\r\n     */\r\n    chatChanged = () => {\r\n        /*\r\n            is props.gcid a number?\r\n         */\r\n        if(isNaN(this.props.gcid)){\r\n            this.setState({\r\n                error: groupChatErrorCode.nan,\r\n                loaded: true\r\n            });\r\n        }else{\r\n\r\n            const chatExists = () => {\r\n\r\n                const gcid = parseInt(this.props.gcid);\r\n\r\n                this.groupChatExists(gcid)\r\n                    .then(r => {\r\n                        if (r === groupChatErrorCode.none) {\r\n\r\n                            this.selectGroupChat(gcid);\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: groupChatErrorCode.none,\r\n                                gcid: gcid\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.chats.group.get(gcid).chatName,\r\n                                    gcid: gcid\r\n                                }\r\n                            }).then();\r\n                        } else {\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: r\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch();\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                chatExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    chatExists();\r\n                });\r\n            }\r\n        }\r\n    };\r\n    /*\r\n        groupChat is selected\r\n     */\r\n    selectGroupChat(gcid){\r\n        /*\r\n            does the chat exist?\r\n         */\r\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\r\n\r\n            this.setState({\r\n                error: groupChatErrorCode.chatNotExisting\r\n            })\r\n        } else {\r\n\r\n            const chat = chatSocket.chats.group.get(gcid)\r\n            this.dispatch.selectChat(chat);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.chatChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did gcid change?\r\n         */\r\n        if(prevProps.gcid !== this.props.gcid){\r\n            this.chatChanged();\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if (this.state.error === groupChatErrorCode.nan) {\r\n                return (\r\n                    <div>\r\n                        <h2>ungültige Addresse</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if (this.state.loaded) {\r\n\r\n                switch(this.state.error){\r\n\r\n                    case groupChatErrorCode.none:\r\n\r\n                        switch(this.props.tab){\r\n                            case(groupChatTabs.chat):\r\n                                return (\r\n                                    <ChatContainer\r\n                                        chatType={this.global.currentChat.type}\r\n                                        chatId={this.global.currentChat.id}\r\n                                    />\r\n                                );\r\n\r\n                            case(groupChatTabs.info):\r\n                                return(\r\n                                    <GroupChatInfo\r\n                                        gcid={this.state.gcid}\r\n                                    />\r\n                                );\r\n\r\n                            default:\r\n                                return null;\r\n                        }\r\n\r\n                    case groupChatErrorCode.notPartOfChat:\r\n                        return (\r\n                            <div>\r\n                                <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    case groupChatErrorCode.private:\r\n                        return (\r\n                            <div>\r\n                                <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    case groupChatErrorCode.chatNotExisting:\r\n                        return (\r\n                            <div>\r\n                                <h2>Dieser Chat existiert nicht</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n                {renderLoader()}\r\n                {renderChat()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport './modal.scss';\r\n\r\nclass Modal extends Component{\r\n\r\n    render() {\r\n        const clickedOutside = () => {\r\n            this.props.history.goBack();\r\n        };\r\n        return(\r\n            <div\r\n                className=\"modal-outer\"\r\n                onClick={clickedOutside}>\r\n                <div className=\"h-100\" style={{display: \"flex\"}}>\r\n\r\n                        <div\r\n                            className=\"modal-inner\"\r\n                            onClick={event => {event.stopPropagation()}}>\r\n                            <div\r\n                                className=\"btn-close\"\r\n                                onClick={() => {this.props.history.goBack()}}>\r\n                                &times;\r\n                            </div>\r\n                            {this.props.children}\r\n                        </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Modal);\r\n\r\nexport function ModalHeader(props){\r\n    return(\r\n        <div className=\"m-header\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ModalMain(props){\r\n    return(\r\n        <div className=\"m-main\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React, {Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\n\r\nclass UserItem extends Component{\r\n\r\n    elementClicked = event => {\r\n\r\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <li>\r\n                <Link to={\"/chat/user/\" + this.props.uid}\r\n                      onClick={this.elementClicked}\r\n                      replace={true}\r\n                >\r\n                {this.props.username}\r\n                </Link>\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport {tabs} from \"../NewChat\";\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nimport './chooseUser.scss';\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class ChooseUser extends Component{\r\n\r\n    _clickedOutsideTimer;\r\n    /*\r\n        the number of results already loaded\r\n     */\r\n    _numAlreadyLoaded = 0;\r\n    _reachedBottom;\r\n    _listRef;\r\n    _listNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: errorCode.none,\r\n            showOptions: false,\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                is the search valid?\r\n             */\r\n            searchValid: true,\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            /*\r\n                should loader at the bottom be shown?\r\n             */\r\n            showLoaderBottom: false\r\n        };\r\n    }\r\n    /*\r\n        options get shown\r\n     */\r\n    showOptions = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.setState({\r\n            showOptions: true\r\n        });\r\n    };\r\n    /*\r\n        options get hidden\r\n     */\r\n    clickedOutsideOptions = () => {\r\n        this.clickedOutsideTimer = setTimeout(this.hideOptions,100);\r\n    };\r\n    hideOptions = () => {\r\n        this.setState({\r\n            showOptions: false\r\n        });\r\n    };\r\n    /*\r\n        when new group gets clicked\r\n     */\r\n    newGroupClick = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.props.setCurrentTab(tabs.newGroup);\r\n    };\r\n    /*\r\n        when join group is clicked\r\n     */\r\n    joinGroupClick = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.props.setCurrentTab(tabs.chooseGroup);\r\n    };\r\n    /*\r\n        gets called when the search of the user changed. the new result gets requested\r\n     */\r\n    searchChanged = event => {\r\n        const searchValue = event.target.value;\r\n\r\n        const searchValid = true;\r\n\r\n        this.setState({\r\n            searchValue: searchValue,\r\n            searchValid: searchValid\r\n        });\r\n        /*\r\n            new search result gets requested if search is valid\r\n         */\r\n        if(searchValid) {\r\n            this.numAlreadyLoaded = 0;\r\n            this.reachedBottom = false;\r\n            this.requestSearchResult(searchValue).then(r => {\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        the search result gets requested\r\n     */\r\n    requestSearchResult = async (searchValue) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    search: searchValue,\r\n                    limit: 10,\r\n                    start: this.numAlreadyLoaded\r\n                })\r\n            };\r\n            const response = await fetch('/user/noChat', config);\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0 && this.numAlreadyLoaded === 0){\r\n                    this.setState({\r\n                        searchResult: []\r\n                    });\r\n                }else if(data.length === 0){\r\n                    this.reachedBottom = true;\r\n                } else {\r\n\r\n                    let scrollToBottomBuffer = this.getScrollToBottom();\r\n\r\n                    if(this.numAlreadyLoaded === 0)\r\n                        this.setState({\r\n                            searchResult: data\r\n                        });\r\n                    else\r\n                        this.setState(state => ({\r\n                            searchResult: state.searchResult.concat(data)\r\n                        }));\r\n                    this.numAlreadyLoaded += data.length;\r\n                    /*\r\n                        if scrollToBottom is 0, the next result is requested\r\n                     */\r\n                    if(scrollToBottomBuffer === 0){\r\n                        this.requestSearchResult(searchValue);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n\r\n    assignListRef = target => {\r\n        this.listRef = target;\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.listNode.scrollTop = this.listNode.scrollHeight - this.listNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        if(this.listNode !== null)\r\n            return this.listNode.scrollHeight - this.listNode.offsetHeight - this.listNode.scrollTop;\r\n        return 0;\r\n    };\r\n\r\n    render() {\r\n        /*\r\n            if state.showOptions is true, options get rendered\r\n         */\r\n        const renderOptions = () => {\r\n            if(this.state.showOptions)\r\n                return(\r\n                    <div className=\"options\">\r\n                        <ul ref={this.assignListRef}>\r\n                            <li onClick={this.newGroupClick}>\r\n                                neue Gruppe\r\n                            </li>\r\n                            <li onClick={this.joinGroupClick}>\r\n                                einer Gruppe beitreten\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n        /*\r\n            results only get rendered if search was valid\r\n         */\r\n        const renderResult = () => {\r\n            if(this.state.error === errorCode.error){\r\n                return(\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        Ein Fehler ist aufgetreten!\r\n                    </div>\r\n                )\r\n            }\r\n            else if(this.state.searchValid) {\r\n                if(this.state.searchResult.length > 0) {\r\n                    return (\r\n                        <Dummy>\r\n                            <h5>Ergebnisse:</h5>\r\n                            <ul className=\"searchUser-list result-list\">\r\n                                {this.state.searchResult.map((item, index) => (\r\n                                    <UserItem\r\n                                        key={index}\r\n                                        uid={item.uid}\r\n                                        username={item.username}\r\n                                        hide={this.props.hide}\r\n                                    />\r\n                                ))}\r\n                            </ul>\r\n                        </Dummy>\r\n                    );\r\n                }else{\r\n                    return(\r\n                        <ul className=\"result-list\">\r\n                            <div className=\"alert alert-warning\" role=\"alert\">\r\n                                Nichts gefunden!\r\n                            </div>\r\n                        </ul>\r\n                    )\r\n                }\r\n            }else{\r\n                return(\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        Ihre Suche enthält ungültige Zeichen!\r\n                    </div>\r\n                )\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <div className=\"user-top\">\r\n                    <div className=\"searchUser\">\r\n                        <input type=\"text\"\r\n                               name=\"newChat-searchUser\"\r\n                               className=\"form-control\"\r\n                               placeholder=\"Benutzer suchen\"\r\n                               onChange={this.searchChanged}\r\n                        />\r\n                    </div>\r\n                    <div className=\"user-more\">\r\n                        <i className=\"fas fa-ellipsis-h fa-2x\"\r\n                           onClick={this.showOptions}\r\n                        />\r\n                        {renderOptions()}\r\n                    </div>\r\n                </div>\r\n                {renderResult()}\r\n            </Dummy>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        document.body.addEventListener('click',this.clickedOutsideOptions);\r\n        /*\r\n            users are requested\r\n         */\r\n        this.numAlreadyLoaded = 0;\r\n        this.reachedBottom = false;\r\n        this.requestSearchResult('').then(r => {});\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        document.body.removeEventListener('click',this.clickedOutsideOptions);\r\n    }\r\n\r\n    get clickedOutsideTimer() {\r\n        return this._clickedOutsideTimer;\r\n    }\r\n\r\n    set clickedOutsideTimer(value) {\r\n        this._clickedOutsideTimer = value;\r\n    }\r\n\r\n    get numAlreadyLoaded() {\r\n        return this._numAlreadyLoaded;\r\n    }\r\n\r\n    set numAlreadyLoaded(value) {\r\n        this._numAlreadyLoaded = value;\r\n    }\r\n\r\n    get reachedBottom() {\r\n        return this._reachedBottom;\r\n    }\r\n\r\n    set reachedBottom(value) {\r\n        this._reachedBottom = value;\r\n    }\r\n\r\n    get listRef() {\r\n        return this._listRef;\r\n    }\r\n\r\n    set listRef(value) {\r\n        this._listRef = value;\r\n    }\r\n\r\n    get listNode() {\r\n        return this._listNode;\r\n    }\r\n\r\n    set listNode(value) {\r\n        this._listNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class UserItem extends Component{\r\n\r\n    clicked = event => {\r\n        if(this.props.isSelected){\r\n            this.props.deselectUser(this.props.index);\r\n        }else\r\n            this.props.selectUser(this.props.index);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <li key={this.props.index}\r\n                onClick={this.clicked}\r\n            >\r\n                <div className=\"username\">\r\n                    {this.props.username}\r\n                </div>\r\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\r\n                    <i className=\"fas fa-check\" />\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class extends Component {\r\n\r\n    /*\r\n        the number of results already loaded\r\n     */\r\n    _numAlreadyLoaded = 0;\r\n    _reachedBottom = false;\r\n    _listRef;\r\n    _listNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            /*\r\n                should loader at the bottom be shown?\r\n             */\r\n            showLoaderBottom: false,\r\n            error: errorCode.none\r\n        }\r\n    }\r\n    /*\r\n        search gets refreshed\r\n     */\r\n    refreshSearch = () => {\r\n        this.numAlreadyLoaded = 0;\r\n        this.loadUsers().then(r => {});\r\n    };\r\n\r\n    searchChanged = event => {\r\n        this.setState({\r\n            searchValue: event.target.value\r\n        });\r\n        this.refreshSearch();\r\n    };\r\n    /*\r\n        more users are loaded\r\n     */\r\n    loadUsers = async () => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    search: this.state.searchValue,\r\n                    limit: 10,\r\n                    start: this.numAlreadyLoaded\r\n                })\r\n            };\r\n            const response = await fetch('/user/', config);\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0 && this.numAlreadyLoaded === 0){\r\n                    this.setState({\r\n                        searchResult: []\r\n                    });\r\n                }else if(data.length === 0){\r\n                    this.reachedBottom = true;\r\n                } else {\r\n\r\n                    let scrollToBottomBuffer = this.getScrollToBottom();\r\n\r\n                    if(this.numAlreadyLoaded === 0)\r\n                        this.setState({\r\n                            searchResult: data\r\n                        });\r\n                    else\r\n                        this.setState(state => ({\r\n                            searchResult: state.searchResult.concat(data)\r\n                        }));\r\n                    this.numAlreadyLoaded += data.length;\r\n                    /*\r\n                        if scrollToBottom is 0, the next result is requested\r\n                     */\r\n                    if(scrollToBottomBuffer === 0){\r\n                        this.loadUsers(this.props.searchValue);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        is called when an user is selected\r\n     */\r\n    selectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.selectUser(user.uid,user.username);\r\n    };\r\n\r\n    deselectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.deselectUser(user.uid);\r\n    };\r\n\r\n    assignListRef = target => {\r\n        this.listRef = target;\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.listNode.scrollTop = this.listNode.scrollHeight - this.listNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        if(this.listNode !== null)\r\n            return this.listNode.scrollHeight - this.listNode.offsetHeight - this.listNode.scrollTop;\r\n        return 0;\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Dummy>\r\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\r\n                    <input type=\"text\"\r\n                           className=\"form-control p-2 m-2\"\r\n                           placeholder=\"Benutzer suchen\"\r\n                           value={this.state.searchValue}\r\n                           onChange={this.searchChanged}\r\n                    />\r\n                </form>\r\n                <ul className=\"selectUsers-list result-list\"\r\n                    ref={this.assignListRef}\r\n                >\r\n                    {this.state.searchResult.length > 0 ?\r\n\r\n                        this.state.searchResult.map((item, index) => (\r\n                            <UserItem\r\n                                key={index}\r\n                                index={index}\r\n                                uid={item.uid}\r\n                                username={item.username}\r\n                                selectUser={this.selectUser}\r\n                                deselectUser={this.deselectUser}\r\n                                isSelected={this.props.isUserSelected(item.uid)}\r\n                            />\r\n                        ))\r\n\r\n                        :\r\n\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Nichts gefunden!\r\n                        </div>\r\n\r\n                    }\r\n                </ul>\r\n            </Dummy>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        this.refreshSearch();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        if(this.props.searchValue !== prevProps.searchValue)\r\n            this.refreshSearch();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    get numAlreadyLoaded() {\r\n        return this._numAlreadyLoaded;\r\n    }\r\n\r\n    set numAlreadyLoaded(value) {\r\n        this._numAlreadyLoaded = value;\r\n    }\r\n\r\n    get reachedBottom() {\r\n        return this._reachedBottom;\r\n    }\r\n\r\n    set reachedBottom(value) {\r\n        this._reachedBottom = value;\r\n    }\r\n\r\n    get listRef() {\r\n        return this._listRef;\r\n    }\r\n\r\n    set listRef(value) {\r\n        this._listRef = value;\r\n    }\r\n\r\n    get listNode() {\r\n        return this._listNode;\r\n    }\r\n\r\n    set listNode(value) {\r\n        this._listNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport UserList from \"./UserList\";\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nimport './selectUsers.scss';\r\n\r\nexport default class SelectUsers extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the users already selected\r\n             */\r\n            selectedUsers: [],\r\n            showOnlySelected: false\r\n        }\r\n    }\r\n    /*\r\n        gets called when a user gets selected\r\n     */\r\n    selectUser = (uid,username) => {\r\n        this.setState(state => ({\r\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\r\n        }));\r\n    };\r\n\r\n    deselectUser = (uid) => {\r\n        this.setState(state => {\r\n            const arrClone = [...state.selectedUsers];\r\n            const index = arrClone.findIndex(item => {\r\n                return item.uid === uid;\r\n            });\r\n            arrClone.splice(index,1);\r\n            return {\r\n                selectedUsers: arrClone\r\n            }\r\n        });\r\n    };\r\n\r\n    deselectIndex = index => {\r\n        this.deselectUser(this.state.selectedUsers[index].uid);\r\n    };\r\n\r\n    isUserSelected = (uid) => {\r\n        return this.state.selectedUsers.find(item => {\r\n            return item.uid === uid;\r\n        });\r\n    };\r\n    /*\r\n        an Array with the uids of the users gets returned to the parent component\r\n     */\r\n    btnNextClicked = event => {\r\n\r\n        this.props.onNext(this.state.selectedUsers);\r\n    };\r\n\r\n    render() {\r\n\r\n        const renderSelectedUsers = () => {\r\n            if(this.state.selectedUsers.length === 0){\r\n                return (\r\n                    <h4>\r\n                        Noch niemand ausgewählt\r\n                    </h4>);\r\n            }else{\r\n                return(\r\n                    <h4 className=\"w-100\">\r\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\r\n                              onClick={event => {\r\n                                  this.setState(state => ({\r\n                                      showOnlySelected: !state.showOnlySelected\r\n                                  }));\r\n                              }}\r\n                        >\r\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\r\n                        </span>\r\n                        &nbsp;ausgewählt\r\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\r\n                           onClick={this.btnNextClicked}\r\n                        />\r\n                    </h4>\r\n                )\r\n            }\r\n        };\r\n        /*\r\n            selected users cannot be shown if there is no one selected.\r\n                --> showOnlySelected = false\r\n         */\r\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\r\n            this.setState({\r\n                showOnlySelected: false\r\n            });\r\n\r\n        return(\r\n            <Dummy>\r\n                <div className=\"select-users\">\r\n                    {renderSelectedUsers()}\r\n                </div>\r\n                {!this.state.showOnlySelected ?\r\n                    <UserList selectUser={this.selectUser}\r\n                              deselectUser={this.deselectUser}\r\n                              isUserSelected={this.isUserSelected}\r\n                    />\r\n                :\r\n                    <ul className=\"selectUsers-list only-selected result-list\">\r\n                        {this.state.selectedUsers.map((item,index) => (\r\n                            <UserItem\r\n                                key={index}\r\n                                index={index}\r\n                                uid={item.uid}\r\n                                username={item.username}\r\n                                selectUser={() => {}}\r\n                                deselectUser={this.deselectIndex}\r\n                                isSelected={true}\r\n                            />\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class GroupInfoForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            groupName: ''\r\n        }\r\n    }\r\n\r\n    groupNameChanged = event => {\r\n        this.setState({\r\n            groupName: event.target.value\r\n        })\r\n    };\r\n\r\n    formSubmitted = event => {\r\n\r\n        event.preventDefault();\r\n        this.props.submitGroup({\r\n            name: this.state.groupName,\r\n            description: '',\r\n            isPublic: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"user-results\">\r\n                <form className=\"form-group p-3\"\r\n                      onSubmit={this.formSubmitted}\r\n                >\r\n                    <h4>\r\n                        Gruppennamen eingeben\r\n                    </h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"input-groupName\"\r\n                        name=\"groupName\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Gruppenname\"\r\n                        onChange={this.groupNameChanged}\r\n                    />\r\n                    <div>\r\n                        <button type=\"submit\" className=\"float-right btn btn-primary m-3\">\r\n                            Gruppe erstellen\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport SelectUsers from \"./SelectUsers\";\r\nimport GroupInfoForm from \"./GroupInfoForm\";\r\n\r\nconst tabs = {\r\n    selectUsers: 0,\r\n    enterChatInfo: 1\r\n};\r\n\r\nclass NewGroup extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.selectUsers,\r\n            selectedUsers: []\r\n        }\r\n    }\r\n\r\n    showEnterChatInfo = selectedUsers => {\r\n\r\n        this.setState({\r\n            currentTab: tabs.enterChatInfo,\r\n            selectedUsers: selectedUsers\r\n        });\r\n    };\r\n\r\n    submitGroup = data => {\r\n\r\n        const users = new Array(this.state.selectedUsers.length);\r\n        for(let i=0;i<this.state.selectedUsers.length;i++){\r\n            users[i] = {\r\n                uid: this.state.selectedUsers[i].uid,\r\n                username: this.state.selectedUsers[i].username,\r\n                isAdmin: false\r\n            };\r\n        }\r\n\r\n        this.createGroupChat(data,users).then(r => {});\r\n    };\r\n\r\n    createGroupChat = async (data,users) => {\r\n        try {\r\n            const config = {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    data: data,\r\n                    users: users\r\n                })\r\n            };\r\n            const response = await fetch('/group/', config);\r\n            /*\r\n                if ok, modal is closed\r\n             */\r\n            if(response.ok)\r\n                this.props.history.goBack();\r\n\r\n        }catch(error){\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        switch(this.state.currentTab){\r\n\r\n            case tabs.selectUsers:\r\n                return (\r\n                    <SelectUsers\r\n                        onNext={this.showEnterChatInfo}\r\n                    />);\r\n\r\n            case tabs.enterChatInfo:\r\n                return(\r\n                    <GroupInfoForm\r\n                        submitGroup={this.submitGroup}\r\n                    />\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\r\nimport ChooseUser from \"./chooseUser/ChooseUser\";\r\nimport NewGroup from \"./newGroup/NewGroup\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\r\n\r\nimport './newChat.scss';\r\n\r\nexport const tabs = {\r\n    chooseUser: 0,\r\n    newGroup: 1,\r\n    chooseGroup: 2\r\n};\r\n\r\nexport default class NewChat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.chooseUser\r\n        }\r\n    }\r\n\r\n    setCurrentTab = newTab => {\r\n        this.setState({\r\n            currentTab: newTab\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const router = () => {\r\n\r\n            switch (this.state.currentTab) {\r\n\r\n                case tabs.chooseUser:{\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n\r\n                }\r\n\r\n                case tabs.newGroup:{\r\n                    return(\r\n                        <NewGroup />\r\n                    );\r\n                }\r\n\r\n                case tabs.chooseGroup:{\r\n                    return(\r\n                        <div>\r\n                            <h4>chooseGroup</h4>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n\r\n                default: {\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        const getHeader = () => {\r\n\r\n            switch(this.state.currentTab){\r\n\r\n                case tabs.chooseUser:\r\n                    return 'Neuer Chat';\r\n\r\n                case tabs.newGroup:\r\n                    return 'Neue Gruppe';\r\n\r\n                case tabs.chooseGroup:\r\n                    return 'Gruppe auswählen';\r\n\r\n                default:\r\n                    return 'Neuer Chat';\r\n\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <ModalHeader>\r\n                    <h1>{getHeader()}</h1>\r\n                </ModalHeader>\r\n                <ModalMain>\r\n                    <div className=\"newChat\">\r\n                        {router()}\r\n                    </div>\r\n                </ModalMain>\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nconst errorCode = {\r\n    none: 0,\r\n    isSelf: 1,\r\n    //not a number\r\n    nan: 2\r\n};\r\n\r\nexport default class UserInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: errorCode.none,\r\n            userInfo: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.loaded){\r\n            return null;\r\n\r\n        }else if(this.state.error === errorCode.isSelf){\r\n            return(\r\n                <Dummy>\r\n                    <ModalHeader>\r\n                        <h1>\r\n                            Du\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <ModalMain>\r\n                        xx\r\n                    </ModalMain>\r\n                </Dummy>\r\n            )\r\n        }else{\r\n            return(\r\n                <Dummy>\r\n                    <ModalHeader>\r\n                        <h1>\r\n                            {this.state.userInfo.username}\r\n                            &nbsp;\r\n                            <Link to={\"/chat/user/\" + this.state.uid}>\r\n                                <i className=\"far fa-comment-alt\" />\r\n                            </Link>\r\n                        </h1>\r\n                    </ModalHeader>\r\n                    <ModalMain>\r\n                        <h2>Gruppen</h2>\r\n                    </ModalMain>\r\n                </Dummy>\r\n            )\r\n        }\r\n    }\r\n\r\n    setUser = () => {\r\n\r\n        if(isNaN(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.nan\r\n            });\r\n        }else if(chatSocket.userSelf.uid === parseInt(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else{\r\n            const uid = parseInt(this.props.uid);\r\n            this.setState({\r\n                uid: uid,\r\n                error: errorCode.none,\r\n                loaded: false\r\n            });\r\n            this.fetchUser(uid)\r\n                .then()\r\n                .catch();\r\n        }\r\n    };\r\n    /*\r\n        userInfo gets fetched from server\r\n     */\r\n    async fetchUser (uid) {\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await fetch('/user/' + uid, config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n\r\n            this.setState({\r\n                userInfo: data,\r\n                loaded: true\r\n            });\r\n\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUser();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            check if uid changed\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            this.setUser();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport Modal from \"../utilComp/Modal\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport Dummy from \"../utilComp/Dummy\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterBigScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <NewChat />\r\n                </Modal>\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <Dummy>\r\n                        {props.children}\r\n                        <Modal>\r\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                        </Modal>\r\n                    </Dummy>\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <h3>settings</h3>\r\n                </Modal>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch,\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\r\n\r\nexport default function GridBigScreens(props){\r\n\r\n    let { path, url } = useRouteMatch();\r\n    let params = useParams();\r\n\r\n    return(\r\n        <div className=\"row justify-content-end main-container\">\r\n            <div className=\"col-md-5 col-lg-4 col-xl-3 d-none d-md-block pr-3 pl-0 h-100\">\r\n\r\n                <ChatList />\r\n            </div>\r\n            <div className=\"col-md-7 col-lg-8 col-xl-9 col-overflow\"\r\n                 style={{padding:'0'}}\r\n            >\r\n\r\n                <Switch>\r\n                    <Route path={`${path}/user/:uid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <NormalChatView\r\n                                    uid={routeProps.match.params.uid}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/group/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.chat}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/groupInfo/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.info}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={path}>\r\n                        <ModalRouterBigScreens>\r\n                            <h1>noch kein chat ausgewählt</h1>\r\n                        </ModalRouterBigScreens>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nimport './typeMessageContainer.scss';\r\n\r\nexport default class TypeMsgContainer extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersTyping: []\r\n        };\r\n    }\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        this.setState({\r\n            usersTyping: chat.getUsersTyping()\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"typeMsg-container\">\r\n                {this.state.usersTyping.map((user,index) => (\r\n                    <div key={index} className=\"typeMsg\">\r\n                        {user.username + \" schreibt...\"}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn ja, werden events neu initialisiert\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n\r\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                <NewChat />\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                <h3>settings</h3>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React,{useGlobal} from \"reactn\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\r\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\r\n\r\nexport default function RouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n    const [global,setGlobal] = useGlobal();\r\n\r\n    const renderTypeMsgContainer = () => {\r\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\r\n            return(\r\n                <TypeMsgContainer\r\n                    chatType={global.currentChat.type}\r\n                    chatId={global.currentChat.id}\r\n                />\r\n            )\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return(\r\n        <div className=\"main-container\">\r\n            <Switch>\r\n                <Route path={`${path}/user/:uid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <NormalChatView\r\n                                uid={routeProps.match.params.uid}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                }>\r\n                </Route>\r\n                <Route path={`${path}/group/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.chat}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={`${path}/groupInfo/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.info}\r\n                            />\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={path}>\r\n                    <ModalRouterSmallScreens>\r\n                        <ChatList\r\n                            paddingTop=\"20px\"\r\n                        />\r\n                    </ModalRouterSmallScreens>\r\n                </Route>\r\n                <Route path = \"*\">\r\n                    <h3>Not found!</h3>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n}","import React,{Component} from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport Responsive from \"../responsive/Responsive\";\r\nimport GridBigScreens from \"./GridBigScreens\";\r\nimport RouterSmallScreens from \"./RouterSmallScreens\";\r\nimport chatSocket from \"../chatData/chatSocket\";\r\n\r\nexport default class Chat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                which modal is currently open\r\n                    0: none\r\n             */\r\n            modal: 0,\r\n            /*\r\n                info about the currently open modal\r\n             */\r\n            modalInfo: null,\r\n            /*\r\n                is shown at the user-icon\r\n             */\r\n            notifications: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n            if chatsocket is undefined, it gets initialized\r\n         */\r\n        if (!chatSocket.initCalled) {\r\n            chatSocket.init().then(r => {});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n\r\n                <Header/>\r\n\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n\r\n                    <RouterSmallScreens />\r\n                </Responsive>\r\n\r\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n\r\n                    <GridBigScreens/>\r\n                </Responsive>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {useState,useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport PrivateRoute from \"./Auth/PrivateRoute\";\nimport {AuthContext} from \"./Auth/AuthContext\";\nimport {resetChatSocket} from \"./chatData/chatSocket\";\nimport Chat from \"./Home/Home\";\nimport 'popper.js';\n\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\n\ninitGlobal();\n\nfunction updateUserSelf(data,dispatch){\n    try {\n        const {uid, username} = data;\n        dispatch.setUserSelf(uid, username);\n    }catch (e) {\n\n    }\n}\n\nasync function isLoggedIn(){\n    try {\n        const config = {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        };\n        const response = await fetch('/user/self', config);\n\n        if(response.status === 403)\n            return false;\n        return true;\n\n    } catch (error) {\n        return false;\n    }\n}\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    const initTokens = (tokens) => {\n\n        isLoggedIn()\n            .then(res => {\n                if(res) {\n                    updateUserSelf(tokens,dispatch);\n                    setAuthTokens(tokens);\n                }else{\n                    localStorage.removeItem(\"tokens\");\n                    setAuthTokens(undefined);\n                }\n            });\n    };\n\n    const tokens = {\n        loading: true\n    };\n    const [authTokens, setAuthTokens] = useState(tokens);\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n        initTokens(existingTokens);\n    },[]);\n\n    const setTokens = (data) => {\n        localStorage.setItem(\"tokens\", JSON.stringify(data));\n        setAuthTokens(data);\n\n        updateUserSelf(data,dispatch);\n    };\n\n    const deleteTokens = () => {\n        localStorage.removeItem(\"tokens\");\n        setAuthTokens(undefined);\n        /*\n            TODO: without reload\n         */\n        // eslint-disable-next-line no-restricted-globals\n        //location.reload();\n        dispatch.deleteUserSelf();\n        dispatch.resetGlobal();\n        resetChatSocket();\n    };\n\n    return (\n        <AuthContext.Provider\n            value={{\n                authTokens,\n                setAuthTokens: setTokens,\n                deleteAuthTokens: deleteTokens\n            }}>\n            <Router>\n                <Switch>\n                    <PrivateRoute path=\"/chat\" component={Chat}/>\n                    <Route exact path=\"/login\" component={Login}/>\n                    <Route exact path=\"/register\" component={Register}/>\n                    <Route path={\"/about\"}>\n                        <h1>about</h1>\n                    </Route>\n                    <PrivateRoute exact path=\"/\" component={Chat}/>\n                    <Route path=\"*\">\n                        <NoMatch/>\n                    </Route>\n                </Switch>\n            </Router>\n        </AuthContext.Provider>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\r\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\r\nimport chatSocket from \"../chatData/chatSocket\";\r\nimport {initChats} from \"./initChats\";\r\n\r\nexport function initGlobal(){\r\n\r\n    setGlobal({\r\n        /*\r\n            info about the user self\r\n         */\r\n        userSelf: {},\r\n        /*\r\n            what info should be shown at the left center of the header?\r\n         */\r\n        infoHeaderCenter: infoHeaderCenter.none,\r\n        ihcData: null,\r\n        /*\r\n            the chat that is currently selected\r\n         */\r\n        currentChat: {\r\n            type: '',\r\n            id: 0,\r\n            /*\r\n                unread messages inside the currentChat\r\n             */\r\n            newMessages: 0,\r\n            /*\r\n                the messages in the currentChat, displayed in chatContainer\r\n             */\r\n            messages: []\r\n        },\r\n        /*\r\n            the shown tempChat\r\n         */\r\n        tempChat: null,\r\n        /*\r\n            all chats of the user are stored here\r\n         */\r\n        chats: [],\r\n        /*\r\n            number of chats with new messages\r\n         */\r\n        newMessages: 0\r\n        /*\r\n            TODO: notifications\r\n         */\r\n    });\r\n\r\n    initChats();\r\n\r\n    /*\r\n        the userSelf gets set\r\n     */\r\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\r\n\r\n        return {\r\n            userSelf: {\r\n                uid: uid,\r\n                username: username\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        userSelf is deleted\r\n     */\r\n    addReducer('deleteUserSelf',(global,dispatch) => {\r\n\r\n       return {\r\n           userSelf: {}\r\n       }\r\n    });\r\n    /*\r\n        // eslint-disable-next-line no-unused-vars\r\n        global gets reseted\r\n     */\r\n    addReducer('resetGlobal',(global,dispatch) => ({\r\n        infoHeaderCenter: infoHeaderCenter.none,\r\n        ihcData: null,\r\n        currentChat: {\r\n            type: '',\r\n            id: 0,\r\n            newMessages: 0,\r\n            messages: []\r\n        },\r\n        tempChat: null,\r\n        chats: [],\r\n        newMessages: 0\r\n    }));\r\n    /*\r\n        is the chat the current chat?\r\n     */\r\n    function isSelected(global,chat){\r\n\r\n        const currentChat = global.currentChat;\r\n        return currentChat.type === chat.type\r\n            && currentChat.id === chat.id;\r\n    }\r\n    /*\r\n        index of the chat is searched\r\n     */\r\n    function findIndex(global,chat){\r\n\r\n        return global.chats.findIndex(\r\n            element => (\r\n                element.id === chat.id\r\n                && element.type === chat.type)\r\n        );\r\n    }\r\n    /*\r\n        is called when there is a new message\r\n     */\r\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            if the index is -1, the chat does not exist\r\n         */\r\n        if(index !== -1){\r\n            /*\r\n                is the chat selected?\r\n             */\r\n            if(isSelected(global,chat)) {\r\n                /*\r\n                    chat is selected\r\n                        latestMessageObject is updated\r\n                        newMessage counter is set to 0\r\n                 */\r\n                const chatsClone = global.chats.splice(0);\r\n                const chatObject = chatsClone[index];\r\n                chatObject.latestMessage = chat.getLatestMessageObject();\r\n                chatObject.unreadMessages = 0;\r\n                /*\r\n                    item is deleted from array\r\n                 */\r\n                chatsClone.splice(index,1);\r\n                /*\r\n                    item is added to start of the array\r\n                 */\r\n                chatsClone.unshift(chatObject);\r\n                /*\r\n                    message is added to messages in currentChat\r\n                 */\r\n                const currentChat = {\r\n                    ...global.currentChat,\r\n                    messages: global.currentChat.messages.concat(message),\r\n                    newMessages: global.currentChat.newMessages + 1\r\n                };\r\n                return {\r\n                    chats: chatsClone,\r\n                    currentChat: currentChat\r\n                };\r\n            }else{\r\n                /*\r\n                    chat is not selected\r\n                        latestMessageObject is updated\r\n                        newMessage counter gets incremented\r\n                 */\r\n                const chatsClone = global.chats.splice(0);\r\n                const chatObject = chatsClone[index];\r\n                chatObject.latestMessage = chat.getLatestMessageObject();\r\n                /*\r\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\r\n                 */\r\n                let newMessages = global.newMessages;\r\n                if(chatObject.unreadMessages === 0){\r\n                    newMessages++;\r\n                }\r\n\r\n                chatObject.unreadMessages = unreadMessages + 1;\r\n                /*\r\n                    item is deleted from array\r\n                 */\r\n                chatsClone.splice(index,1);\r\n                /*\r\n                    item is added to start of the array\r\n                 */\r\n                chatsClone.unshift(chatObject);\r\n\r\n                return {\r\n                    chats: chatsClone,\r\n                    newMessages: newMessages\r\n                };\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        gets called out of changeCurrentChat in chatSocket\r\n     */\r\n    addReducer('selectChat',(global,dispatch,chat) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            if the index is -1, the chat does not exist\r\n         */\r\n        if(index !== -1) {\r\n            /*\r\n                chats is cloned\r\n             */\r\n            const chatsClone = global.chats.splice(0);\r\n            const item = chatsClone[index];\r\n            /*\r\n                if there where unread messages, newMessages counter is decremented by 1\r\n             */\r\n            let newMessages = global.newMessages;\r\n            if(item.unreadMessages > 0){\r\n                newMessages--;\r\n            }\r\n            /*\r\n                unreadMessages is set to 0\r\n             */\r\n            item.unreadMessages = 0;\r\n            chatsClone[index] = item;\r\n            /*\r\n                change is emitted to server\r\n             */\r\n            chatSocket.socket.emit('change chat', {\r\n                type: chat.type,\r\n                id: chat.id\r\n            });\r\n\r\n            return {\r\n                currentChat: {\r\n                    type: chat.type,\r\n                    id: chat.id,\r\n                    messages: chat.getMessages(),\r\n                    newMessages: 0\r\n                },\r\n                chats: chatsClone,\r\n                tempChat: null,\r\n                newMessages: newMessages\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        is called when no chat should be selected\r\n     */\r\n    addReducer('selectNoChat',(global,dispatch) => {\r\n        /*\r\n            change is emitted to server\r\n         */\r\n        chatSocket.socket.emit('change chat', null);\r\n\r\n        return {\r\n            currentChat: {\r\n                type: '',\r\n                    id: 0,\r\n                    messages: []\r\n            },\r\n        }\r\n    });\r\n    /*\r\n        loaded messages are added\r\n     */\r\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\r\n\r\n        return {\r\n            currentChat: {\r\n                ...global.currentChat,\r\n                messages: messages ?\r\n                    messages.concat(global.currentChat.messages)\r\n                    : global.currentChat.messages\r\n            }\r\n        };\r\n    });\r\n    /*\r\n        new chat is added\r\n     */\r\n    addReducer('addChat',(global,dispatch,chat) => {\r\n\r\n        function isDateBefore(chat1,chat2){\r\n            /*\r\n                do latestMessages exist?\r\n             */\r\n            if(!chat1.latestMessage)\r\n                return true;\r\n            else if(!chat2.latestMessage)\r\n                return false;\r\n            else\r\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\r\n        }\r\n        /*\r\n            place the chat at the right position\r\n            chats is cloned\r\n         */\r\n        const chatsClone = global.chats.splice(0);\r\n        const chatObject = chat.getChatObject();\r\n\r\n        for(let i=0;i<chatsClone.length;i++){\r\n            if(isDateBefore(chatsClone[i],chatObject)){\r\n                chatsClone.splice(i,0,chatObject);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return {\r\n            chats: chatsClone\r\n        }\r\n\r\n    });\r\n    /*\r\n        chat is removed\r\n     */\r\n    addReducer('removeChat',(global,dispatch,chat) => {\r\n\r\n        const index = findIndex(global,chat);\r\n        /*\r\n            chats is cloned\r\n         */\r\n        const chatsClone = this.state.chats.splice(0);\r\n        /*\r\n            item is deleted from array\r\n         */\r\n        chatsClone.splice(index,1);\r\n\r\n        return {\r\n            chats: chatsClone\r\n        }\r\n    });\r\n    /*\r\n        tempChat is shown\r\n     */\r\n    addReducer('showTempChat',(global,dispatch) => {\r\n\r\n        const chat = chatSocket.temporaryChat.chatNow;\r\n        /*\r\n            change is emitted to server\r\n         */\r\n        chatSocket.socket.emit('change chat', null);\r\n\r\n        return {\r\n            tempChat: chat.getChatObject(),\r\n            currentChat: {\r\n                type: 'tempChat',\r\n                id: 0,\r\n                messages: []\r\n            }\r\n        }\r\n    });\r\n    /*\r\n        tempChat is updated\r\n     */\r\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\r\n        tempChat: chat.getChatObject(),\r\n        currentChat: {\r\n            type: 'tempChat',\r\n            id: 0,\r\n            messages: []\r\n        }\r\n    }));\r\n    /*\r\n        tempChat is hidden\r\n     */\r\n    addReducer('hideTempChat',(global,dispatch) => ({\r\n        tempChat: null\r\n    }));\r\n}","import chatSocket from \"../chatData/chatSocket\";\r\nimport {setGlobal} from \"reactn\";\r\n\r\nexport function initChats(){\r\n\r\n    function chatsLoaded(chats){\r\n        setGlobal({\r\n            chats: chats\r\n        });\r\n    }\r\n    /*\r\n       chats get initialized\r\n       is loading of chats already finished?\r\n           --> chatArray gets requested immediately\r\n    */\r\n    if(chatSocket.finishedLoading){\r\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\r\n        /*\r\n            otherwise --> event handler that gets triggered when loading finished\r\n         */\r\n    }else{\r\n        chatSocket.event.on('chats loaded',chatsLoaded);\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}