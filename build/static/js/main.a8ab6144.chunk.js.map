{"version":3,"sources":["Auth/Auth.js","Auth/MsgBox.js","Auth/authUI.js","Auth/Login.js","Auth/Register.js","responsive/utilResponsive.js","responsive/Responsive.js","Home/Header/HeaderLeft.js","util/Color.js","util/BinSearch.js","chatData/User.js","chatData/Message.js","util/Event.js","chatData/Chat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/MessageForm.js","Home/chatView/Message.js","Home/chatView/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/NormalChatView.js","utilComp/Dummy.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/GroupChatView.js","utilComp/Modal.js","Home/newChat/chooseUser/UserItem.js","Home/newChat/chooseUser/ChooseUser.js","Home/newChat/newGroup/UserItem.js","Home/newChat/newGroup/UserList.js","Home/newChat/newGroup/SelectUsers.js","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/UserInfo.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["username","uid","ErrorMsg","className","this","props","children","Component","loggedIn","setLoggedIn","val","isLoggedIn","a","config","method","headers","fetch","response","status","ok","json","data","password","body","JSON","stringify","success","extendJQuery","$","fn","extend","pwToggle","prepend","addClass","css","position","right","top","color","cursor","width","height","hover","icon","get","input","addEventListener","type","classList","remove","add","Login","changeHandler","event","nam","target","name","value","setState","submitHandler","preventDefault","uNameErr","pwErr","valConstraints","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","valResult","validate","state","valid","login","then","redirect","undefined","location","reload","to","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","id","Register","pwRepeatErr","passwordRepeat","equality","pwRepeat","register","console","log","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","initialState","Responsive","render","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","removeEventListener","React","PureComponent","infoHeaderCenter","setGlobal","HeaderLeft","pathname","onClick","history","goBack","newMessages","global","ihcData","data-toggle","title","gcid","renderChatInfo","withRouter","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","k","floor","i","getIndex","splice","getNearestKey","Array","User","online","_normalChat","_groupChats","groupChats","_uid","_username","_color","_online","Message","mid","content","chat","date","Date","now","isDateToday","getTimeString","isDateYesterday","getDateString","msgString","substr","chatSocket","userSelf","users","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_content","_date","_chat","EventHandler","events","Map","has","push","set","e","rest","_events","Chat","chatName","_messages","_event","_hasNewMsg","_unreadMessages","num","socket","emit","chatType","chatId","lastMsgId","msg","getLastMessage","getLastMsgId","reachedTop","lMessages","messages","lm","trigger","_isSelfPart","_type","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","user","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","Promise","resolve","reject","res","error","userExists","isUserSaved","chatExists","isUserBlocked","tempChat","blocked","createNew","isShown","otherUid","otherUsername","newChat","ncid","normalChat","chats","normal","setCurrentChat","hide","_chatNow","_chats","group","_finishedLoading","_currentChat","_temporaryChat","_initCalled","userInfo","initCalled","IP_SERVER","text","io","on","initChats","getChat","addLoadedMessages","isCurrentChat","addMessage","hasNewMsg","unreadMessages","startedTyping","stoppedTyping","addNewChat","setTimeout","alert","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","lastMessage","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","temporaryChat","currentChat","doesExist","requestUser","members","firstMessage","empty","member","addGroupChat","_socket","_userSelf","Header","clickCheckBox","checkBoxClicked","stopPropagation","clickDocument","changeChecked","headerLeft","checked","logout","tooltip","ChatSearchBox","searchChanged","onSearch","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","newMessage","toTop","_key_","lastMsg","getFirstMessage","renderMsg","getChatViewMsgString","renderDate","getChatViewDateString","prevProps","prevState","snapshot","prevChat","rm","ChatList","chatItemToTop","index","chatsClone","item","unshift","chatObj","concat","tempChatShown","showTempChat","tempChatName","tempChatUpdated","tempChatHidden","chatsLoaded","searchValue","paddingTop","found","setHomeState","map","includes","ChatViewLoader","borderWidth","role","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","replace","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","bottom","onSelect","_typeTimeout","_isTempChat","isMsgBySelf","getMessageViewDateString","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","loadMessages","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","messagesLoaded","bind","typeMessages","ReactDOM","findDOMNode","isMounted","lastDate","onScroll","ref","isDifferentDay","renderDateContainer","_messagesNode","TempChatContainer","show","update","errorCode","NormalChatView","userChanged","parseInt","loaded","renderLoader","isNaN","Dummy","didMount","didUpdate","GroupChatInfo","loadChatInfo","loadChatInfoI","r","catch","err","uidSelf","isAdmin","groupChatErrorCode","groupChatTabs","GroupChatView","groupChatExists","chatChanged","tab","renderChat","Modal","UserItem","elementClicked","ChooseUser","_numAlreadyLoaded","showOptions","clickedOutsideTimer","clickedOutsideOptions","hideOptions","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","numAlreadyLoaded","reachedBottom","requestSearchResult","search","limit","start","searchResult","scrollToBottomBuffer","assignListRef","listRef","listNode","showLoaderBottom","_clickedOutsideTimer","_reachedBottom","_listRef","_listNode","clicked","deselectUser","selectUser","refreshSearch","loadUsers","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","GroupInfoForm","groupNameChanged","groupName","formSubmitted","submitGroup","description","isPublic","NewGroup","showEnterChatInfo","currentTab","createGroupChat","chooseUser","NewChat","newTab","getHeader","router","UserInfo","setUser","fetchUser","ModalRouterBigScreens","path","useRouteMatch","routeProps","match","params","uidInfo","GridBigScreens","url","useParams","useEffect","setParentState","padding","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","currentChatChanged","getNumberNewMessages","newMsg","modal","modalInfo","notifications","init","App","redirectToLogin","exact","NoMatch","useLocation","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2IAEWA,EACAC,E,qGCDLC,E,uKAEE,OACI,2BAAOC,UAAU,0CACZC,KAAKC,MAAMC,c,GAJLC,a,wBDDZC,GAAW,EAMf,SAASC,EAAYC,GACxBF,EAAWE,EAKR,SAAeC,IAAtB,+B,4CAAO,gCAAAC,EAAA,sEAEOC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,qBALnB,SAQwBC,MAAM,aAAcH,GAR5C,UAUwB,OAFjBI,EARP,QAUaC,SACRV,GAAW,IACXS,EAASE,GAZd,iCAcsBF,EAASG,OAd/B,cAcSC,EAdT,OAgBKb,GAAW,EACXP,EAAMoB,EAAKpB,IACXD,EAAWqB,EAAKrB,SAlBrB,kBAoBYQ,GApBZ,kCAsBY,GAtBZ,oFAyBQ,GAzBR,2D,kEA+BA,WAAqBR,EAAUsB,GAA/B,mBAAAV,EAAA,sEAEOC,EAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU,CACjBzB,SAAUA,EACVsB,SAAUA,KAVnB,SAawBN,MAAM,cAAeH,GAb7C,YAaOI,EAbP,QAecE,GAfd,iCAiBsBF,EAASG,OAjB/B,YAiBSC,EAjBT,QAkBaK,QAlBb,wBAmBSlB,GAAW,EAnBpB,UAoBeG,IApBf,iCAsBYU,GAtBZ,iCAwBY,MAxBZ,mFA2BQ,MA3BR,2D,kEA8BA,WAAwBrB,EAASsB,GAAjC,mBAAAV,EAAA,sEAEOC,EAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU,CACjBzB,SAAUA,EACVsB,SAAUA,KAVnB,SAawBN,MAAM,iBAAkBH,GAbhD,YAaOI,EAbP,QAecE,GAfd,iCAiBsBF,EAASG,OAjB/B,YAiBSC,EAjBT,QAkBaK,QAlBb,wBAmBSlB,GAAW,EAnBpB,UAoBeG,IApBf,iCAsBYU,GAtBZ,iCAwBY,MAxBZ,mFA2BQ,MA3BR,2D,kEA8BA,gCAAAT,EAAA,sEAEOC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,qBALnB,SAQwBC,MAAM,eAAgBH,GAR9C,YAQOI,EARP,QAUcE,GAVd,iCAYsBF,EAASG,OAZ/B,cAYSC,EAZT,yBAcYA,EAAKK,SAdjB,kCAgBY,GAhBZ,oFAmBQ,GAnBR,2D,2CEhGA,SAASC,IACZC,IAAEC,GAAGC,OAAO,CACRC,SAAU,WACN3B,KAAK4B,QAAQJ,IAAE,OACVK,SAAS,oCACTC,IAAI,CACDC,SAAU,WACVC,MAAO,OACPC,IAAK,OACLC,MAAO,OACPC,OAAQ,UACRC,MAAO,OACPC,OAAQ,SAEXC,OAAM,WACHd,IAAExB,MAAM8B,IAAI,QAAQ,WACrB,WACCN,IAAExB,MAAM8B,IAAI,QAAQ,YAE5B9B,KAAK8B,IAAI,CACLC,SAAS,aAGb,IAAIQ,EAAOvC,KAAKwC,IAAI,GAAGtC,SAAS,GAC5BuC,EAAQzC,KAAKwC,IAAI,GAAGtC,SAAS,GAEjCqC,EAAKG,iBAAiB,SAAQ,WACR,aAAfD,EAAME,MACLJ,EAAKK,UAAUC,OAAO,gBACtBN,EAAKK,UAAUE,IAAI,UACnBL,EAAME,KAAO,SAEbJ,EAAKK,UAAUC,OAAO,UACtBN,EAAKK,UAAUE,IAAI,gBACnBL,EAAME,KAAO,kB,IC8JlBI,E,kDA5LX,WAAY9C,GAAQ,IAAD,8BACf,cAAMA,IAWV+C,cAAgB,SAAAC,GACZ,IAAIC,EAAMD,EAAME,OAAOC,KACnB9C,EAAM2C,EAAME,OAAOE,MACvB,EAAKC,SAAL,eAAgBJ,EAAM5C,KAfP,EAiBnBiD,cAAgB,SAAAN,GACZA,EAAMO,iBAIN,IAkCQC,EACAC,EAnCDC,EAAiB,CACpB/D,SAAU,CACNgE,UAAU,EACVC,OAAQ,CACJC,QAAS,EACTC,SAAU,uCACVC,QAAS,GACTC,QAAS,kCAEbC,OAAQ,CACJC,QAAS,IAAIC,OAAO,WACpBC,QAAS,cAGjBnD,SAAU,CACN0C,UAAU,EACVC,OAAQ,CACJC,QAAS,EACTC,SAAU,uCACVC,QAAS,GACTC,QAAS,oCAOfK,EAAYC,IAAS,CACvB3E,SAAU,EAAK4E,MAAM5E,SACrBsB,SAAU,EAAKsD,MAAMtD,UACvByC,GAEoB,oBAAZW,GAMFb,EAD2B,oBAArBa,EAAU1E,SACL0E,EAAU1E,SAAS,GAEnB,GAGX8D,EAD2B,oBAArBY,EAAUpD,SACRoD,EAAUpD,SAAS,GAEnB,GAGZ,EAAKoC,SAAS,CACVmB,OAAO,EACPhB,SAAUA,EACVC,MAAOA,MAGX,EAAKJ,SAAS,CACVmB,OAAO,EACPhB,SAAU,GACVC,MAAO,KH/ChB,SAAP,oCGoDWgB,CAAM,EAAKF,MAAM5E,SAAS,EAAK4E,MAAMtD,UAAUyD,MAAK,SAAA1D,GAC7CA,EAAKK,QACJ,EAAKgC,SAAS,CACVmB,OAAO,EACPG,UAAU,UAGOC,IAAlB5D,EAAKrB,UACJ,EAAK0D,SAAS,CACVmB,OAAO,EACPhB,SAAUxC,EAAKrB,gBAEFiF,IAAlB5D,EAAKC,UACJ,EAAKoC,SAAS,CACVmB,OAAO,EACPf,MAAOzC,EAAKC,iBAnGhB,EA0GnBuC,SAAW,WACP,GAA2B,KAAxB,EAAKe,MAAMf,SACV,OACI,kBAAC,EAAD,KACK,EAAKe,MAAMf,WA9GT,EAkHnBC,MAAQ,WACJ,GAAwB,KAArB,EAAKc,MAAMd,MACV,OACI,kBAAC,EAAD,KACK,EAAKc,MAAMd,QApHxB,EAAKc,MAAQ,CACTf,SAAU,GACV7D,SAAU,GACV8D,MAAO,GACPxC,SAAU,GACVuD,OAAO,EACPG,UAAU,GAEdrD,IAVe,E,qDA8Hf,OAAGvB,KAAKwE,MAAMI,UAEVvE,GAAY,GAGZyE,SAASC,SAGL,6BACI,yCACA,kBAAC,IAAD,CAAUC,GAAG,YAKjB,yBAAKjF,UAAU,QAAQkF,MAAO,CAACC,QAAS,SACpC,yBAAKnF,UAAU,qBACX,yBAAKA,UAAU,+BAA+BkF,MAAO,CAACE,SAAU,UAC5D,qCACA,0BAAMC,SAAUpF,KAAKuD,eACjB,yBAAKxD,UAAU,cACX,2BAAOsF,QAAQ,YAAf,iBACCrF,KAAKyD,WACN,2BAAOd,KAAK,OACLS,KAAK,WACLrD,UAAU,eACVuF,YAAY,yBACZC,SAAUvF,KAAKgD,iBAG1B,yBAAKjD,UAAU,cACX,2BAAOsF,QAAQ,YAAf,aACCrF,KAAK0D,QACN,yBAAK8B,GAAG,aACJ,2BAAO7C,KAAK,WACLS,KAAK,WACLrD,UAAU,eACVuF,YAAY,oBACZC,SAAUvF,KAAKgD,kBAI9B,yBAAKjD,UAAU,cAAf,kCACmC,kBAAC,IAAD,CAAMiF,GAAG,aAAT,uBAEnC,2BACIrC,KAAK,SACL5C,UAAU,kBACVsD,MAAM,gB,0CAUlC7B,IAAE,cAAcG,e,GAzLJxB,aC0NLsF,E,kDA5NX,WAAYxF,GAAQ,IAAD,8BACf,cAAMA,IAaV+C,cAAgB,SAAAC,GACZ,IAAIC,EAAMD,EAAME,OAAOC,KACnB9C,EAAM2C,EAAME,OAAOE,MACvB,EAAKC,SAAL,eAAgBJ,EAAM5C,KAjBP,EAmBnBiD,cAAgB,SAAAN,GACZA,EAAMO,iBAIN,IA6CQC,EACAC,EACAgC,EA/CD/B,EAAiB,CACpB/D,SAAU,CACNgE,UAAU,EACVC,OAAQ,CACJC,QAAS,EACTC,SAAU,uCACVC,QAAS,GACTC,QAAS,kCAEbC,OAAQ,CACJC,QAAS,IAAIC,OAAO,WACpBC,QAAS,cAGjBnD,SAAU,CACN0C,UAAU,EACVC,OAAQ,CACJC,QAAS,EACTC,SAAU,uCACVC,QAAS,GACTC,QAAS,mCAGjB0B,eAAgB,CACZ/B,UAAU,EACVgC,SAAU,WACV/B,OAAQ,CACJC,QAAS,EACTC,SAAU,uCACVC,QAAS,GACTC,QAAS,oCAOfK,EAAYC,IAAS,CACvB3E,SAAU,EAAK4E,MAAM5E,SACrBsB,SAAU,EAAKsD,MAAMtD,SACrByE,eAAgB,EAAKnB,MAAMqB,UAC7BlC,GAEoB,oBAAZW,GAOFb,EAD2B,oBAArBa,EAAU1E,SACL0E,EAAU1E,SAAS,GAEnB,GAIX8D,EAD2B,oBAArBY,EAAUpD,SACRoD,EAAUpD,SAAS,GAEnB,GAIRwE,EADiC,oBAA3BpB,EAAUqB,eACFrB,EAAUqB,eAAe,GAEzB,GAGlB,EAAKrC,SAAS,CACVmB,OAAO,EACPhB,SAAUA,EACVC,MAAOA,EACPgC,YAAaA,MAIjB,EAAKpC,SAAS,CACVmB,OAAO,EACPhB,SAAU,GACVC,MAAO,GACPgC,YAAa,KJtCtB,SAAP,oCI2CYI,CAAS,EAAKtB,MAAM5E,SAAS,EAAK4E,MAAMtD,UAAUyD,MAAK,SAAA1D,GAChDA,EAAKK,QACJ,EAAKgC,SAAS,CACVmB,OAAO,EACPG,UAAU,SAGQC,IAAlB5D,EAAKrB,UACL,EAAK0D,SAAS,CACVmB,OAAO,EACPhB,SAAUxC,EAAKrB,WAG3BmG,QAAQC,IAAI/E,QAzHL,EA6HnBwC,SAAW,WACP,GAA2B,KAAxB,EAAKe,MAAMf,SACV,OACI,kBAAC,EAAD,KACK,EAAKe,MAAMf,WAjIT,EAqInBC,MAAQ,WACJ,GAAwB,KAArB,EAAKc,MAAMd,MACV,OACI,kBAAC,EAAD,KACK,EAAKc,MAAMd,QAzIT,EA6InBgC,YAAc,WACV,GAA8B,KAA3B,EAAKlB,MAAMkB,YACV,OACI,kBAAC,EAAD,KACK,EAAKlB,MAAMkB,cA/IxB,EAAKlB,MAAQ,CACTf,SAAU,GACV7D,SAAU,GACV8D,MAAO,GACPxC,SAAU,GACVwE,YAAa,GACbG,SAAU,GACVpB,OAAO,EACPG,UAAU,GAEdrD,IAZe,E,qDAyJf,OAAGvB,KAAKwE,MAAMI,UAEVvE,GAAY,GACZ0F,QAAQC,IAAI,YAEZlB,SAASC,SAGL,6BACI,yCACA,kBAAC,IAAD,CAAUC,GAAG,YAKjB,yBAAKjF,UAAU,QAAQkF,MAAO,CAACC,QAAS,SACpC,yBAAKnF,UAAU,qBACX,yBAAKA,UAAU,+BAA+BkF,MAAO,CAACE,SAAU,UAC5D,4CACA,0BAAMC,SAAUpF,KAAKuD,eACjB,yBAAKxD,UAAU,cACX,2BAAOsF,QAAQ,YAAf,iBACCrF,KAAKyD,WACN,2BAAOd,KAAK,OACLS,KAAK,WACLrD,UAAU,eACVuF,YAAY,yBACZC,SAAUvF,KAAKgD,iBAG1B,yBAAKjD,UAAU,cACX,2BAAOsF,QAAQ,YAAf,aACCrF,KAAK0D,QACN,yBAAK8B,GAAG,aACJ,2BAAO7C,KAAK,WACLS,KAAK,WACLrD,UAAU,eACVuF,YAAY,oBACZC,SAAUvF,KAAKgD,kBAI9B,yBAAKjD,UAAU,cACX,2BAAOsF,QAAQ,YAAf,yBACCrF,KAAK0F,cACN,yBAAKF,GAAG,oBACJ,2BAAO7C,KAAK,WACLS,KAAK,WACLrD,UAAU,eACVuF,YAAY,oBACZC,SAAUvF,KAAKgD,kBAI9B,2BAAOL,KAAK,SAAS5C,UAAU,kBAAkBsD,MAAM,uB,0CAS/E7B,IAAE,iCAAiCG,e,GAzNpBxB,a,wBCUV8F,EAGI,IAHJA,EAII,IAJJA,EAKI,IALJA,EAMI,IAIJC,EACa,IADbA,EAEa,IAGbC,EAAqB,WAU9B,MAAO,CAAC/D,MARMgE,OAAOC,YACdC,SAASC,gBAAgBC,aACzBF,SAASnF,KAAKqF,YAMNnE,OAJA+D,OAAOK,aACfH,SAASC,gBAAgBG,cACzBJ,SAASnF,KAAKuF,e,EClCCP,IACpBQ,EAAe,CAAEvE,M,EADfA,MACsBC,O,EADfA,QAGMuE,E,4MAEjBpC,MAAQmC,E,EAORE,OAAS,WAAO,IAAD,EACqB,EAAK5G,MAA7BC,EADG,EACHA,SAAU4G,EADP,EACOA,UADP,EAEe,EAAKtC,MAAvBpC,EAFG,EAEHA,MAAOC,EAFJ,EAEIA,OACT0E,EAAuB,EAAKC,aAAaF,EAAW1E,EAAOC,GACjE,OACI,kBAAC,IAAM4E,SAAP,KACKF,EAAuB7G,EAAW,O,EAI/CgH,aAAe,WAAO,IAAD,EACSf,IAAlB/D,EADS,EACTA,MAAOC,EADE,EACFA,OACf,EAAKiB,SAAS,CAAElB,QAAOC,Y,EAE3B2E,aAAe,SAAC9B,EAAS9C,EAAOC,GAC5B,OACmC,IAA/B6C,EAAQiC,QAAQ,WAChB/E,GAAS6D,KAKsB,IAA/Bf,EAAQiC,QAAQ,WACf/E,GAAS6D,GACN7D,GAAS6D,KAMkB,IAA/Bf,EAAQiC,QAAQ,WAChB/E,GAAS6D,KAK8B,IAAvCf,EAAQiC,QAAQ,mBACf/E,GAAS6D,GACN5D,GAAU6D,OAI0B,IAAxChB,EAAQiC,QAAQ,oBACf/E,GAAS6D,GACN5D,GAAU6D,O,kEAjDlBE,OAAO1D,iBAAiB,SAAU1C,KAAKkH,cAAc,K,6CAGrDd,OAAOgB,oBAAoB,SAAUpH,KAAKkH,cAAc,O,GAPxBG,IAAMC,eCNjCC,EACH,EADGA,EAEG,EAFHA,EAGE,EAGfC,oBAAU,CACND,iBAAkBA,EAClBtG,KAAM,OACP0D,O,IAEG8C,E,uKAEQ,IAAD,OAEEC,EAAY1H,KAAKC,MAAM6E,SAAvB4C,SA2EP,OACI,6BACI,kBAAC,EAAD,CAAYZ,UAAW,CAAC,WAzDxB,yBAAK/G,UAAU,uBACX,uBAAGyF,GAAG,oBACHzF,UAAU,4CACV4H,QAAS,WAAO,EAAK1H,MAAM2H,QAAQC,YAlB3C,EAAK5H,MAAM6H,YAAc,EAEpB,yBAAK/H,UAAU,kBACV,EAAKE,MAAM6H,aAIjB,OAkBY,WAInB,OAAO,EAAKC,OAAOR,kBAEf,KAAKA,EACD,OACI,yBAAK/B,GAAG,YAAYzF,UAAU,wCAC1B,wBAAIyF,GAAG,kBACF,EAAKuC,OAAOC,QAAQ5E,MAEzB,kBAAC,IAAD,CAAM4B,GAAI0C,EAAW,aAAe,EAAKK,OAAOC,QAAQnI,KACpD,uBAAGE,UAAU,2BACVkI,cAAY,UACZC,MAAM,gBAMzB,KAAKX,EACD,OACI,yBAAK/B,GAAG,YAAYzF,UAAU,wCAC1B,wBAAIyF,GAAG,kBACF,EAAKuC,OAAOC,QAAQ5E,MAEzB,kBAAC,IAAD,CAAM4B,GAAI,mBAAqB,EAAK+C,OAAOC,QAAQG,MAC/C,uBAAGpI,UAAU,2BACVkI,cAAY,UACZC,MAAM,gBAMzB,QACI,OACI,kBAAC,EAAD,CAAYpB,UAAW,CAAC,SAAS,WAC7B,wBAAI/G,UAAU,aAAd,UAWXqI,Q,GApFQjI,aAyFVkI,cAAWZ,G,iBCxGtBa,EAAS,CACbA,MAAe,CACXC,KAAM,UACNC,MAAO,UACPC,KAAM,UACNC,MAAO,UACPC,KAAM,UACNC,SAAU,UACVC,SAAU,UACVC,SAAU,UACVC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,eAAgB,UAChBC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,MAAO,UACPC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,UAAW,UACXC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,IAAK,UACLC,OAAQ,WAEZrC,OAAgB,WACZ,IAAIsC,EACAC,EAAQ,EACZ,IAAK,IAAIC,KAAQ9K,KAAK+K,MACdC,KAAKC,SAAW,IAAIJ,IACpBD,EAASE,GACjB,OAAOF,IAEItC,K,SC/CM4C,G,uKAERC,GAKL,IAHA,IAAIC,EAAO,EACPpJ,EAAQhC,KAAK6D,OAAO,EAElBuH,GAAMpJ,GAAM,CACd,IAAIqJ,EAAGL,KAAKM,OAAOF,EAAKpJ,GAAO,GAC/B,GAAGhC,KAAKqL,GAAGF,MAAQA,EACf,OAAOE,EACHrL,KAAKqL,GAAGF,IAAMA,EAClBC,EAAOC,EAAE,EAETrJ,EAAQqJ,EAAE,EAElB,OAAQ,I,oCAGEF,GAIV,IAAII,EAGJ,MAFEJ,GAEoC,KAA/BI,EAAIvL,KAAKwL,WAAWL,KAIvB,GAAW,IAARA,EAAW,OAAQ,EAG1B,OAAOI,I,0BAGPJ,GAEA,IAAII,EAAIvL,KAAKwL,SAASL,GAEtB,IAAU,IAAPI,EACC,OAAOvL,KAAKuL,GAAGlI,Q,0BAKnB8H,EAAI9H,IAIuB,IAAxBrD,KAAKwL,SAASL,IAEbnL,KAAKyL,OAAOzL,KAAK0L,cAAcP,GAAO,EAAG,EAAG,CACxCA,IAAKA,EACL9H,MAAOA,M,6BAKZ8H,GAEH,IAAII,EAAIvL,KAAKwL,SAASL,IAEZ,IAAPI,GACCvL,KAAKyL,OAAOF,EAAE,O,gBAhEkBI,Q,IC6EvBC,G,WAWjB,WAAY/L,EAAID,EAASiM,GAAS,yBAJlCC,YAAc,EAImB,KAFjCC,YAAc,IAAIb,GAGdlL,KAAKH,IAAMA,EACXG,KAAKJ,SAAWA,EAChBI,KAAKkC,MAAQoG,GAAO2C,SACpBjL,KAAK6L,OAASA,E,yDAKL1D,GACTnI,KAAKgM,WAAWlJ,IAAIqF,EAAKA,K,sCAGbA,GACZnI,KAAKgM,WAAWnJ,OAAOsF,K,0BAIvB,OAAOnI,KAAKiM,M,aAGR5I,GACJrD,KAAKiM,KAAO5I,I,+BAIZ,OAAOrD,KAAKkM,W,aAGH7I,GACTrD,KAAKkM,UAAY7I,I,4BAIjB,OAAOrD,KAAKmM,Q,aAGN9I,GACNrD,KAAKmM,OAAS9I,I,6BAId,OAAOrD,KAAKoM,S,aAGL/I,GACPrD,KAAKoM,QAAU/I,I,iCAIf,OAAOrD,KAAK8L,a,aAGDzI,GACXrD,KAAK8L,YAAczI,I,iCAInB,OAAOrD,KAAK+L,a,aAGD1I,GACXrD,KAAK+L,YAAc1I,M,KCrJNgJ,G,WAQjB,WAAYC,EAAIC,EAAQ1M,EAAI2M,GAAmC,IAA9BC,EAA6B,uDAAtB,IAAIC,KAAKA,KAAKC,OAAQ,oBAC1D3M,KAAKsM,IAAMA,EACXtM,KAAKuM,QAAUA,EACfvM,KAAKH,IAAMA,EACXG,KAAKyM,KAAOA,EAEZzM,KAAKwM,KAAOA,E,oEAOZ,OAAGxM,KAAK4M,cAEG,SAAW5M,KAAK6M,gBAKnB7M,KAAK8M,kBAEF,UAMA9M,KAAK+M,kB,6CAKhB,IAAIC,EAAYhN,KAAKuM,QASrB,OALGS,EAAUnJ,OAAO,KAChBmJ,EAAYA,EAAUC,OAAO,EAAE,IAAM,OAItCjN,KAAKH,MAAQqN,GAAWC,SAAStN,IAC1B,OAAN,OAAcmN,GAES,eAAnBhN,KAAKwM,KAAK7J,KACP3C,KAAKuM,QAGZ,UAAUW,GAAWE,MAAM5K,IAAIxC,KAAKH,KAAKD,SAAzC,aAAsDoN,K,iDAK1D,OAAGhN,KAAK4M,cAEG5M,KAAK6M,gBAER7M,KAAK8M,kBAEF,WAAa9M,KAAK6M,gBAGlB7M,KAAK+M,gBAAkB,IAAM/M,KAAK6M,kB,oCAK7C,IAAMQ,EAAU,IAAIX,KAAKA,KAAKC,OAC9B,OAAO3M,KAAKyM,KAAKa,YAAcD,EAAQC,WACnCtN,KAAKyM,KAAKc,aAAeF,EAAQE,YACjCvN,KAAKyM,KAAKe,gBAAkBH,EAAQG,gB,wCAIxC,IAAMH,EAAU,IAAIX,KAAKA,KAAKC,OAC9B,OAAO3M,KAAKyM,KAAKa,YAAcD,EAAQC,UAAY,GAC/CtN,KAAKyM,KAAKc,aAAeF,EAAQE,YACjCvN,KAAKyM,KAAKe,gBAAkBH,EAAQG,gB,sCAIxC,IACIC,EADEC,EAAI1N,KAAKyM,KAAKa,UAGhBG,EADDC,EAAE,GACI,IAAIA,EAEJA,EACT,IACIC,EADEC,EAAI5N,KAAKyM,KAAKc,WAGhBI,EADDC,EAAE,EAAE,GACE,KAAKA,EAAE,GAEPA,EAAE,EACX,IAAMC,EAAI7N,KAAKyM,KAAKe,cAEpB,MAAM,GAAN,OAAUC,EAAV,YAAgBE,EAAhB,YAAsBE,K,sCAItB,IACIC,EADEC,EAAI/N,KAAKyM,KAAKuB,WAGhBF,EADDC,EAAE,GACI,IAAIA,EAEJA,EACT,IACIJ,EADEC,EAAI5N,KAAKyM,KAAKwB,aAOpB,OAJIN,EADDC,EAAE,GACI,IAAIA,EAEJA,EAEH,GAAN,OAAUE,EAAV,YAAgBH,K,qCAKLO,GACX,OAAOlO,KAAKyM,KAAK0B,WAAaD,EAAMC,UAC7BnO,KAAKyM,KAAKc,aAAeW,EAAMX,YAC/BvN,KAAKyM,KAAKe,gBAAkBU,EAAMV,gB,0BAIzC,OAAOxN,KAAKoO,M,aAGR/K,GACJrD,KAAKoO,KAAO/K,I,8BAIZ,OAAOrD,KAAKqO,U,aAGJhL,GACRrD,KAAKqO,SAAWhL,I,0BAIhB,OAAOrD,KAAKiM,M,aAGR5I,GACJrD,KAAKiM,KAAO5I,I,2BAIZ,OAAOrD,KAAKsO,O,aAGPjL,GACLrD,KAAKsO,MAAQjL,I,2BAIb,OAAOrD,KAAKuO,O,aAGPlL,GACLrD,KAAKuO,MAAQlL,M,KC3KAmL,G,WAIjB,aAAe,oBACXxO,KAAKyO,OAAS,IAAIC,I,+CAMnBzL,EAAMxB,GAIFzB,KAAKyO,OAAOE,IAAI1L,GACfjD,KAAKyO,OAAOjM,IAAIS,GAAO2L,KAAKnN,GAM5BzB,KAAKyO,OAAOI,IAAI5L,EAAM,CAACxB,M,yBAK5BwB,EAAMxB,GAIL,GAAGzB,KAAKyO,OAAOE,IAAI1L,GAEf,IADA,IAAM6L,EAAI9O,KAAKyO,OAAOjM,IAAIS,GAClBsI,EAAE,EAAEA,EAAEuD,EAAEjL,OAAO0H,IAEhBuD,EAAEvD,KAAO9J,GACRqN,EAAErD,OAAOF,EAAE,K,8BAMnBtI,GAIJ,GAAGjD,KAAKyO,OAAOE,IAAI1L,GAAO,CAAC,IAAD,uBAJb8L,EAIa,iCAJbA,EAIa,kBAItB,IAAI,IAAIxD,EAAE,EAAEA,EAAEvL,KAAKyO,OAAOjM,IAAIS,GAAOY,OAAO0H,IAA5C,QACI,EAAAvL,KAAKyO,OAAOjM,IAAIS,IAAOsI,GAAvB,QAA6BwD,O,6BAKrC,OAAO/O,KAAKgP,S,aAGL3L,GACPrD,KAAKgP,QAAU3L,M,KCvDjB4L,G,WAWF,WAAYtM,EAAM6C,EAAG0J,GAAW,yBALhCC,UAAY,IAAIjE,GAKe,KAJ/BkE,OAAS,IAAIZ,GAIkB,KAH/Ba,YAAa,EAGkB,KAF/BC,gBAAkB,EAGdtP,KAAK2C,KAAOA,EACZ3C,KAAKwF,GAAKA,EACVxF,KAAKkP,SAAWA,E,yDAKPK,GAAK,IAAD,OAWbrC,GAAWsC,OAAOC,KAAK,gBAAiB,CACpCC,SAAU1P,KAAK2C,KACfgN,OAAQ3P,KAAKwF,GACboK,UAbiB,WACjB,IAAMC,EAAM,EAAKC,iBACjB,OAAW,OAARD,EACQA,EAAIvD,KACP,EASGyD,GACXR,IAAKA,M,wCAGKtO,GAIdjB,KAAKgQ,WAA6B,gBAAhB/O,EAAKH,OAGvB,IADA,IAAMmP,EAAYhP,EAAKiP,SACf3E,EAAE0E,EAAUpM,OAAO,EAAE0H,GAAG,EAAEA,IAAI,CAClC,IAAM4E,EAAKF,EAAU1E,GACrBvL,KAAKkQ,SAASpN,IAAIqN,EAAG7D,IAAI,IAAID,GAAQ8D,EAAG7D,IAAI6D,EAAG5D,QAAQ4D,EAAGtQ,IAAIG,KAAK,IAAI0M,KAAKyD,EAAG1D,QAKnFzM,KAAKiD,MAAMmN,QAAQ,qB,uCAMnB,OAA6B,IAAzBpQ,KAAKkQ,SAASrM,OACP7D,KAAKkQ,SAAS,GAAG7M,MACrB,O,wCAMP,OAA6B,IAAzBrD,KAAKkQ,SAASrM,OACP7D,KAAKkQ,SAASlQ,KAAKkQ,SAASrM,OAAS,GAAGR,MAC5C,O,iCAKAxD,EAAI0M,EAAQD,GACnBtM,KAAKkQ,SAASpN,IAAIwJ,EAAI,IAAID,GAAQC,EAAIC,EAAQ1M,EAAIG,KAAK,IAAI0M,KAAKA,KAAKC,SACrE3M,KAAKiD,MAAMmN,QAAQ,cAAcvQ,K,iCAIjC,OAAOG,KAAKqQ,a,aAGDhN,GACXrD,KAAKqQ,YAAchN,I,2BAInB,OAAOrD,KAAKsQ,O,aAGPjN,GACLrD,KAAKsQ,MAAQjN,I,yBAIb,OAAOrD,KAAKuQ,K,aAGTlN,GACHrD,KAAKuQ,IAAMlN,I,+BAIX,OAAOrD,KAAKmP,W,aAGH9L,GACTrD,KAAKmP,UAAY9L,I,+BAIjB,OAAOrD,KAAKwQ,W,aAGHnN,GACTrD,KAAKwQ,UAAYnN,I,4BAIjB,OAAOrD,KAAKoP,Q,aAGN/L,GACNrD,KAAKoP,OAAS/L,I,gCAId,OAAOrD,KAAKqP,Y,aAGFhM,GACVrD,KAAKqP,WAAahM,I,qCAIlB,OAAOrD,KAAKsP,iB,aAGGjM,GACfrD,KAAKsP,gBAAkBjM,M,KAIlBoN,GAAb,kDAKI,WAAYjL,EAAG0J,EAASrP,GAAM,IAAD,8BACzB,cAAM,aAAa2F,EAAG0J,IAH1BwB,WAAY,EAIR,EAAKC,UAAY9Q,EAFQ,EALjC,6DAYQ,GAAGG,KAAK4Q,SAAU,CACd,IAAMC,EAAO3D,GAAWE,MAAM5K,IAAIxC,KAAK2Q,WACvC,MAAO,CACH,CACI9Q,IAAKgR,EAAKhR,IACVD,SAAUiR,EAAKjR,WAI3B,MAAO,KArBf,4CA2BQ,GAAGI,KAAK4Q,SAAU,CACd,IAAMC,EAAO3D,GAAWE,MAAM5K,IAAIxC,KAAK2Q,WACvC,MAAO,CACH9Q,IAAKgR,EAAKhR,IACVD,SAAUiR,EAAKjR,UAGvB,OAAO,OAlCf,oCAuCkBC,GACPA,IAAQG,KAAK2Q,YACZ3Q,KAAK4Q,UAAW,EAChB5Q,KAAKiD,MAAMmN,QAAQ,wBA1C/B,oCAgDkBvQ,GACPA,IAAQG,KAAK2Q,YACZ3Q,KAAK4Q,UAAW,EAChB5Q,KAAKiD,MAAMmN,QAAQ,wBAnD/B,gCAwDQ,OAAOpQ,KAAK8Q,YAxDpB,aA2DkBzN,GACVrD,KAAK8Q,WAAazN,IA5D1B,+BAgEQ,OAAOrD,KAAK0Q,WAhEpB,aAmEiBrN,GACTrD,KAAK0Q,UAAYrN,MApEzB,GAAgC4L,IAuEnB8B,GAAb,kDAMI,WAAYvL,EAAG0J,EAAS8B,GAAO,IAAD,8BAC1B,cAAM,YAAYxL,EAAG0J,IALzB+B,OAAS,GAIqB,EAF9BC,aAAe,GAIX,EAAK9D,MAAQ4D,EAFa,EANlC,6DAYQ,GAAGhR,KAAKmR,YAAYtN,OAAS,EAAG,CAG5B,IADA,IAAIuN,EAAK,GACD7F,EAAE,EAAEA,EAAEvL,KAAKmR,YAAYtN,OAAO0H,IAAI,CACtC,IAAMsF,EAAO3D,GAAWE,MAAM5K,IAAIxC,KAAKmR,YAAY5F,IACnD6F,EAAGxC,KAAK,CACJ/O,IAAKgR,EAAKhR,IACVD,SAAUiR,EAAKjR,WAGvB,OAAOwR,EAEX,MAAO,KAxBf,4CA8BQ,GAAGpR,KAAKmR,YAAYtN,OAAS,EAAG,CAC5B,IAAMgN,EAAO3D,GAAWE,MAAM5K,IAAIxC,KAAKmR,YAAYnR,KAAKmR,YAAYtN,OAAS,IAC7E,MAAO,CACHhE,IAAKgR,EAAKhR,IACVD,SAAUiR,EAAKjR,UAGvB,OAAO,OArCf,oCA0CkBC,GACPG,KAAKqR,SAASxR,KACTG,KAAK4Q,SAAS/Q,KAIdG,KAAKmR,YAAYvC,KAAK/O,GACtBG,KAAKiD,MAAMmN,QAAQ,yBAjDnC,oCAwDkBvQ,GACPG,KAAKqR,SAASxR,IACVG,KAAK4Q,SAAS/Q,KAIbG,KAAKmR,YAAY1F,OAAOzL,KAAKsR,iBAAiBzR,GAAK,GACnDG,KAAKiD,MAAMmN,QAAQ,wBA/DnC,+BAsEavQ,GACL,OAAGA,IAAQqN,GAAWC,SAAStN,KAExBG,KAAKoN,MAAMmE,MAAK,SAAAzC,GAAC,OAAIA,IAAMjP,OAzE1C,+BA8EaA,GACL,OAAOG,KAAKmR,YAAYI,MAAK,SAAAzC,GAAC,OAAIA,IAAMjP,OA/EhD,uCAoFqBA,GACb,OAAOG,KAAKmR,YAAYK,WAAU,SAAA1C,GAAC,OAAIA,IAAMjP,OArFrD,4BAyFQ,OAAOG,KAAKiR,QAzFpB,aA4Fc5N,GACNrD,KAAKiR,OAAS5N,IA7FtB,kCAiGQ,OAAOrD,KAAKkR,cAjGpB,aAoGoB7N,GACZrD,KAAKkR,aAAe7N,MArG5B,GAA+B4L,ICrNVwC,G,iDAEjBC,UAAW,E,sDAMD7R,EAAID,GACVI,KAAK2R,QAAU,IAAIlB,GAAW,EAAG7Q,EAAUC,K,2EAK7BA,G,qGAEP,IAAI+R,SAAQ,SAACC,EAASC,GAIzB5E,GAAWsC,OAAOC,KAAK,cAAc5P,GAAI,SAACkS,EAAIC,GAItCA,EAqCAH,EAAQ,CACJI,YAAY,EAEZC,aAAa,EAEbC,YAAY,EAEZC,eAAe,EAEfC,UAAU,IA1CXN,EAAIE,aAAeF,EAAIO,SAEtB,EAAKC,UAAU1S,EAAIkS,EAAInS,UAEvBiS,EAAQ,CACJI,YAAY,EAEZC,aAAa,EAEbC,YAAY,EAEZC,eAAe,EAEfC,UAAU,KAGdR,EAAQ,CACJI,WAAYF,EAAIE,WAEhBC,aAAa,EAEbC,YAAY,EAEZC,cAAeL,EAAIO,QAEnBD,UAAU,W,kIA0BxBxS,GACN,YAAoBgF,IAAjB7E,KAAK2R,SAED3R,KAAK2R,QAAQhB,YAAc9Q,I,6BAMlCG,KAAKwS,SAAU,EACftF,GAAWjK,MAAMmN,QAAQ,oB,+BAIzBlD,GAAWjK,MAAMmN,QAAQ,sB,6BAIzBpQ,KAAKwS,SAAU,EACftF,GAAWjK,MAAMmN,QAAQ,qB,mFAKH/L,G,qGAEf,IAAIuN,SAAQ,SAACC,EAAQC,GAIxB,IAAMW,EAAW,EAAKd,QAAQhB,UACxB+B,EAAgB,EAAKf,QAAQzC,SAEnChC,GAAWsC,OAAOC,KAAK,iBAAiB,CACpC5P,IAAK4S,EACL7S,SAAU8S,EACVrO,QAASA,IACX,SAAA0N,IAI8C,IAAzC7E,GAAWE,MAAM5B,SAASiH,IACzBvF,GAAWE,MAAMtK,IAAI2P,EAAS,IAAI7G,GAAK6G,EAASC,EAAcX,EAAIlG,SAEtE,IAAM8E,EAAYzD,GAAWE,MAAM5K,IAAIiQ,GACvC9B,EAAU9E,OAASkG,EAAIlG,OAEvB,IAAM8G,EAAU,IAAIlC,GAAWsB,EAAIa,KAAKF,EAAcD,GAItD9B,EAAUkC,WAAaF,EAAQnN,GAI/B0H,GAAW4F,MAAMC,OAAOjQ,IAAIiP,EAAIa,KAAKD,GAIrCA,EAAQzC,SAASpN,IAAIiP,EAAIzF,IAAI,IAAID,GAAQ0F,EAAIzF,IAAIjI,EAAQ6I,GAAWC,SAAStN,IAAI8S,EAAQ,IAAIjG,KAAKA,KAAKC,SAGvGO,GAAWjK,MAAMmN,QAAQ,WAAWuC,GAIpCzF,GAAW8F,eAAeL,GAC1B,EAAKM,OAELpB,GAAQ,U,gIAMhB,OAAO7R,KAAK0R,U,aAGJrO,GACRrD,KAAK0R,SAAWrO,I,8BAIhB,OAAOrD,KAAKkT,U,aAGJ7P,GACRrD,KAAKkT,SAAW7P,M,KC4bpB6J,GAAa,I,WAzkBb,aAAe,yBAjBf+D,OAAS,IAAI/F,GAiBC,KAhBdiI,OAAS,CACLJ,OAAQ,IAAI7H,GACZkI,MAAO,IAAIlI,IAcD,KAZdkE,OAAS,IAAIZ,GAYC,KAXd6E,kBAAmB,EAWL,KAVdC,aAAe,CACX3Q,KAAM,GACN6C,GAAI,GAQM,KAHd+N,eAAiB,IAAI9B,GAGP,KAFd+B,aAAc,EAMVxT,KAAKmN,SAAW,IAAIvB,GAAK/L,EAAID,GAE7BI,KAAKyT,SAAW,CACZ5T,IAAKA,EACLD,SAAUA,G,qLAKdI,KAAK0T,YAAa,EAElB1T,KAAKmN,SAAW,IAAIvB,GAAK/L,EAAID,GAE7BI,KAAKyT,SAAW,CACZ5T,IAAKA,EACLD,SAAUA,GAGRa,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,e,SAGKC,MAAM,MAAOH,G,UAA9BI,E,OAEF8S,EAAY,IAEZ9S,EAASE,G,6BAETgF,Q,UAAkBlF,EAAS+S,O,yBAAnB5N,I,gBACR2N,EAAY,e,QAGhB3T,KAAKwP,OAASqE,IAAG,UAAYF,EAAY,SAKzC3T,KAAKwP,OAAOC,KAAK,OAAQ5P,EAAKD,GAE9BI,KAAKwP,OAAOsE,GAAG,aAAa,SAAA7S,GACxB,EAAK8S,UAAU9S,MAGnBjB,KAAKwP,OAAOsE,GAAG,YAAY,SAAA7S,GAKvB,IAAMuL,EAAO,EAAKwH,QAAQ/S,EAAKyO,SAASzO,EAAK0O,aACjC9K,IAAT2H,GACCA,EAAKyH,kBAAkBhT,MAM/BjB,KAAKwP,OAAOsE,GAAG,gBAAe,SAAA7S,GAK1B,IAAMuL,EAAO,EAAKwH,QAAQ/S,EAAK0B,KAAK1B,EAAKuE,IACzC,GAAY,OAATgH,EAAe,CACd,IAAM0H,EAAgB,EAAKA,cAAc1H,EAAK7J,KAAM6J,EAAKhH,IACzDgH,EAAK2H,WAAWlT,EAAKpB,IAAKoB,EAAKsL,QAAStL,EAAKqL,KAK7CE,EAAK4H,WAAaF,EAIlB1H,EAAK6H,iBAIL,EAAKpR,MAAMmN,QAAQ,cAAenP,EAAK0B,KAAM1B,EAAKuE,QAM1DxF,KAAKwP,OAAOsE,GAAG,kBAAiB,SAAA7S,GACf,EAAK+S,QAAQ/S,EAAK0B,KAAK1B,EAAKuE,IACpC8O,cAAcrT,EAAKpB,QAK5BG,KAAKwP,OAAOsE,GAAG,kBAAiB,SAAA7S,GACf,EAAK+S,QAAQ/S,EAAK0B,KAAK1B,EAAKuE,IACpC+O,cAActT,EAAKpB,QAK5BG,KAAKwP,OAAOsE,GAAG,gBAAe,SAAA7S,GAC1BiM,GAAWjK,MAAMmN,QAAQ,eAAenP,MAK5CjB,KAAKwP,OAAOsE,GAAG,YAAW,SAAA7S,GACtB,EAAKuT,WAAWvT,MAKpBjB,KAAKwP,OAAOsE,GAAG,cAAa,WACxBW,YAAW,WACPC,MAAM,+CAEN5P,SAASC,WACX,Q,uIAIA9D,GAEN,IAAI,IAAIsK,EAAE,EAAEA,EAAEtK,EAAK4C,OAAO0H,IAEF,eAAjBtK,EAAKsK,GAAG5I,KAEP3C,KAAK2U,iBAAiB1T,EAAKsK,IAEN,cAAjBtK,EAAKsK,GAAG5I,MAEZ3C,KAAK4U,gBAAgB3T,EAAKsK,IAGlCvL,KAAK6U,iBAAkB,EACvB7U,KAAKiD,MAAMmN,QAAQ,eAAepQ,KAAK8U,8B,iDAKvC,IAAMC,EAAiB,SAAAvI,GACnB,IAAMwI,EAAIxI,EAAKyI,YACf,OAAS,OAAND,EACQA,EAAEvI,KAAKyI,UACX,IAAIxI,KAAK,GAAGwI,WAGjBC,EAAa,SAACrC,EAAMsC,GAEtB,IADA,IAAIC,EAAMD,EACF7J,EAAI6J,EAAM,EAAE7J,EAAEuH,EAAMjP,OAAO0H,IAC5BwJ,EAAejC,EAAMuC,IAAQN,EAAejC,EAAMvH,MACjD8J,EAAM9J,GAEd,OAAO8J,GAELC,EAAO,SAACC,EAAOC,EAAYC,GAC7B,IAAIC,EAAOH,EAAMC,GACjBD,EAAMC,GAAcD,EAAME,GAC1BF,EAAME,GAAeC,GA8BnBC,EAAY,SAAA7C,GAMd,IAJA,IAAM8C,EA3BO,SAAAC,GAEb,IADA,IAAMC,EAAQ,IAAInK,MAAMkK,EAAIhS,QACpB0H,EAAE,EAAEA,EAAEsK,EAAIhS,OAAO0H,IAAI,CACzB,IAAMiB,EAAOqJ,EAAItK,GAAGlI,MAChB4R,OAAW,EACf,GAA4B,IAAzBzI,EAAK0D,SAASrM,OACboR,EAAc,UAGdA,EAAc,CACVxI,KAFOD,EAAK0D,SAAS1D,EAAK0D,SAASrM,OAAS,GAAGR,MAEtCoJ,MAGjBqJ,EAAMvK,GAAK,CACP5I,KAAM6J,EAAK7J,KACX6C,GAAIgH,EAAKhH,GACT0J,SAAU1C,EAAK0C,SACf+F,YAAaA,GAGrB,OAAOa,EAOQC,CAASjD,GAIhBvH,EAAE,EAAEA,EAAEqK,EAAO/R,OAAO,EAAE0H,IAAI,CAC9B,IAAI8J,EAAMF,EAAWS,EAAOrK,GAC5B+J,EAAKM,EAAOrK,EAAE8J,GAElB,OAAOO,GA8BX,OAzBiB,SAACI,EAAKC,GAKnB,IAHA,IAAMC,EAAS,IAAIvK,MAAMqK,EAAKnS,OAASoS,EAAKpS,QACxCsS,EAAK,EACLC,EAAK,EACD7K,EAAE,EAAEA,EAAE2K,EAAOrS,OAAO0H,IAClB6K,EAAKH,EAAKpS,OAGHsS,EAAKH,EAAKnS,QAGdkR,EAAeiB,EAAKG,IAAOpB,EAAekB,EAAKG,KACpDF,EAAO3K,GAAKyK,EAAKG,GACjBA,MAJAD,EAAO3K,GAAK0K,EAAKG,GACjBA,MAJAF,EAAO3K,GAAKyK,EAAKG,GACjBA,KAYR,OAAOD,EAKJG,CAHUV,EAAU3V,KAAK8S,MAAMC,QACrB4C,EAAU3V,KAAK8S,MAAMM,U,8BAKlCzQ,EAAK6C,GAOT,MAAY,eAAT7C,EACQ3C,KAAK8S,MAAMC,OAAOvQ,IAAIgD,GAChB,aAAT7C,EACG3C,KAAKsW,cAAc3E,QAEb,cAAThP,EACG3C,KAAK8S,MAAMM,MAAM5Q,IAAIgD,QAD3B,I,oCAIK7C,EAAK6C,GACf,OAAOxF,KAAKuW,YAAY5T,OAASA,GAAQ3C,KAAKuW,YAAY/Q,KAAOA,I,0EAGpD3F,G,2EAKoB,IAA9BG,KAAKoN,MAAM5B,SAAS3L,G,oBAImB,IAAnCG,KAAKoN,MAAM5K,IAAI3C,GAAKgT,W,yCACZ,CACHZ,YAAY,EAEZC,aAAa,EAEbC,YAAY,EAEZC,eAAe,EAEfC,UAAU,I,cAORxB,EAAO7Q,KAAKoN,MAAM5K,IAAI3C,GAC5BG,KAAKsW,cAAc/D,UAAU1S,EAAIgR,EAAKjR,U,kBAE/B,CACHqS,YAAY,EAEZC,aAAa,EAEbC,YAAY,EAEZC,eAAe,EAEfC,UAAU,I,mCAMbrS,KAAKsW,cAAcE,UAAU3W,G,0CAI3B,CACHoS,YAAY,EAEZC,aAAa,EAEbC,YAAY,EAEZC,eAAe,EAEfC,UAAU,I,yBAMArS,KAAKsW,cAAcG,YAAY5W,G,sLAItC8S,GAOX,GAAe,OAAZA,EAI+B,KAA1B3S,KAAKuW,YAAY5T,MACO,IAAxB3C,KAAKuW,YAAY/Q,KAEjBxF,KAAKuW,YAAc,CACf5T,KAAM,GACN6C,GAAI,GAERxF,KAAKiD,MAAMmN,QAAQ,sBAAuB,YAG3C,GAAoB,aAAjBuC,EAAQhQ,MAAiD,aAA1B3C,KAAKuW,YAAY5T,KACtD3C,KAAKuW,YAAc,CACf5T,KAAM,WACN6C,GAAI,GAGRxF,KAAKwP,OAAOC,KAAK,cAAe,MAEhCzP,KAAKiD,MAAMmN,QAAQ,sBAAuBuC,QAG1C,GAAoB,KAAjBA,EAAQhQ,MAA8B,IAAfgQ,EAAQnN,KAI1BxF,KAAKuW,YAAY5T,OAASgQ,EAAQhQ,MAClC3C,KAAKuW,YAAY/Q,KAAOmN,EAAQnN,IAAI,CAEpC,IAAMgH,EAAOxM,KAAKgU,QAAQrB,EAAQhQ,KAAMgQ,EAAQnN,IAChDgH,EAAK4H,WAAY,EAIjB5H,EAAK6H,eAAiB,EACtBrU,KAAKuW,YAAc5D,EAEnB3S,KAAKwP,OAAOC,KAAK,cAAe,CAC5B9M,KAAM3C,KAAKuW,YAAY5T,KACvB6C,GAAIxF,KAAKuW,YAAY/Q,KAKzBxF,KAAKiD,MAAMmN,QAAQ,sBAAuBuC,M,6CAYtD,IAFA,IAAI7K,EAAc,EAEVyD,EAAE,EAAEA,EAAEvL,KAAK8S,MAAMC,OAAOlP,OAAO0H,IAChCvL,KAAK8S,MAAMC,OAAOxH,GAAGlI,MAAM+Q,WAC1BtM,IAGR,IAAI,IAAIyD,EAAE,EAAEA,EAAEvL,KAAK8S,MAAMM,MAAMvP,OAAO0H,IAC/BvL,KAAK8S,MAAMM,MAAM7H,GAAGlI,MAAM+Q,WACzBtM,IAER,OAAOA,I,iCAKA7G,GAEP,IAAI0R,EAEa,eAAd1R,EAAK0B,KAIJgQ,EAAU3S,KAAK2U,iBAAiB1T,GAEb,cAAdA,EAAK0B,OAEVgQ,EAAU3S,KAAK4U,gBAAiB3T,IAEpC0R,EAAQ0B,eAAiB,EAIzBnH,GAAWjK,MAAMmN,QAAQ,WAAWuC,K,uCAKvB1R,GAKb,IAAI0P,GAC6C,IAA9C3Q,KAAKoN,MAAM5B,SAASvK,EAAKyV,QAAQ,GAAG7W,MACnC8Q,EAAY,IAAI/E,GAAK3K,EAAKyV,QAAQ,GAAG7W,IAAIoB,EAAKyV,QAAQ,GAAG9W,SAASqB,EAAKyV,QAAQ,GAAG7K,QAClF7L,KAAKoN,MAAMtK,IAAI6N,EAAU9Q,IAAI8Q,IAE7BA,EAAY3Q,KAAKoN,MAAM5K,IAAIvB,EAAKyV,QAAQ,GAAG7W,KAK/C,IAAM8S,EAAU,IAAIlC,GAAWxP,EAAKuE,GAAGvE,EAAKiO,SAASyB,EAAU9Q,KAI/D8Q,EAAUkC,WAAaF,EAAQnN,GAI/B,IAAMnB,EAAUpD,EAAK0V,aAWrB,OAPItS,EAAQuS,OACRjE,EAAQzC,SAASpN,IAAIuB,EAAQiI,IAAI,IAAID,GAAQhI,EAAQiI,IAAIjI,EAAQkI,QAAQlI,EAAQxE,IAAI8S,EAAQ,IAAIjG,KAAKrI,EAAQoI,QAIlHzM,KAAK8S,MAAMC,OAAOjQ,IAAI7B,EAAKuE,GAAGmN,GAEvBA,I,sCAKK1R,GAMZ,IAFA,IAAMyV,EAAU,GAERnL,EAAE,EAAEA,EAAEtK,EAAKyV,QAAQ7S,OAAO0H,IAAK,CAEnC,IAAMsL,EAAS5V,EAAKyV,QAAQnL,GAIxBsF,OAAI,GACiC,IAArC7Q,KAAKoN,MAAM5B,SAASqL,EAAOhX,MAC3BgR,EAAO,IAAIjF,GAAKiL,EAAOhX,IAAKgX,EAAOjX,SAAUiX,EAAOhL,QACpD7L,KAAKoN,MAAMtK,IAAI+N,EAAKhR,IAAKgR,IAEzBA,EAAO7Q,KAAKoN,MAAM5K,IAAIqU,EAAOhX,KAKjC6W,EAAQ9H,KAAKiC,EAAKhR,KAIlBgR,EAAKiG,aAAa7V,EAAKuE,IAK3B,IAAMmN,EAAU,IAAI5B,GAAU9P,EAAKuE,GAAGvE,EAAKiO,SAASwH,GAI9CrS,EAAUpD,EAAK0V,aAWrB,OAPItS,EAAQuS,OACRjE,EAAQzC,SAASpN,IAAIuB,EAAQiI,IAAI,IAAID,GAAQhI,EAAQiI,IAAIjI,EAAQkI,QAAQlI,EAAQxE,IAAI8S,EAAQ,IAAIjG,KAAKrI,EAAQoI,QAIlHzM,KAAK8S,MAAMM,MAAMtQ,IAAI7B,EAAKuE,GAAGmN,GAEtBA,I,6BAIP,OAAO3S,KAAK+W,S,aAGL1T,GACPrD,KAAK+W,QAAU1T,I,+BAIf,OAAOrD,KAAKgX,W,aAGH3T,GACTrD,KAAKgX,UAAY3T,I,4BAIjB,OAAOrD,KAAKiR,Q,aAGN5N,GACNrD,KAAKiR,OAAS5N,I,4BAId,OAAOrD,KAAKmT,Q,aAGN9P,GACNrD,KAAKmT,OAAS9P,I,4BAId,OAAOrD,KAAKoP,Q,aAGN/L,GACNrD,KAAKoP,OAAS/L,I,sCAId,OAAOrD,KAAKqT,kB,aAGIhQ,GAChBrD,KAAKqT,iBAAmBhQ,I,kCAIxB,OAAOrD,KAAKsT,c,aAGAjQ,GACZrD,KAAKsT,aAAejQ,I,oCAIpB,OAAOrD,KAAKuT,gB,aAGElQ,GACdrD,KAAKuT,eAAiBlQ,I,iCAItB,OAAOrD,KAAKwT,a,aAGDnQ,GACXrD,KAAKwT,YAAcnQ,M,MAMZ6J,MClmBT+J,G,kDAEF,WAAYhX,GAAQ,IAAD,8BACf,cAAMA,IAMViX,cAAgB,SAAAjU,GACT,EAAKuB,MAAM2S,gBACVlU,EAAMmU,kBAEN3C,YAAW,WACP,EAAKnR,UAAS,SAAAkB,GAAK,MAAK,CACpB2S,iBAAiB,QAEtB,KAfQ,EAkBnBE,cAAgB,SAAApU,GACR,EAAKuB,MAAM2S,iBACX,EAAKG,cAAcrU,IApBR,EAsBnBqU,cAAgB,SAAArU,GACZ,EAAKK,UAAS,SAAAkB,GAAK,MAAK,CACpB2S,iBAAkB3S,EAAM2S,qBAtB5B,EAAK3S,MAAQ,CACT5E,SAAUA,EACVuX,iBAAiB,GAJN,E,qDA2BT,IAECzP,EAAY1H,KAAKC,MAAM6E,SAAvB4C,SAEP,OACI,yBAAK3H,UAAU,iBAEX,kBAAC,EAAD,CACI+H,YAAa9H,KAAKC,MAAMsX,WAAWzP,cAGvC,yBAAKtC,GAAG,YAAYzF,UAAU,YAAY4H,QAAS3H,KAAKkX,eAEpD,yBAAKnX,UAAU,mBAIf,2BAAO4C,KAAK,WACL6C,GAAG,qBACHgS,QAASxX,KAAKwE,MAAM2S,gBACpB5R,SAAUvF,KAAKsX,gBAEtB,2BAAOvX,UAAU,mBACVsF,QAAQ,sBAEX,yBAAKtF,UAAU,oBACX,yBAAKA,UAAU,qBACX,uBAAIyF,GAAG,YACHzF,UAAU,8BACVkI,cAAY,UACZC,MAAM,mBAGd,yBAAKnI,UAAU,8BAEX,kBAAC,IAAD,CAAMiF,GAAI0C,EAAW,aAAewF,GAAWC,SAAStN,KACpD,wBAAI2F,GAAG,WACHzF,UAAU,eACVkI,cAAY,UACZC,MAAM,iBAEDlI,KAAKwE,MAAM5E,WAGxB,yBAAKG,UAAU,eACX,kBAAC,IAAD,CAAMiF,GAAI0C,EAAW,aACjB,uBAAG3H,UAAU,wBACVkI,cAAY,UACZC,MAAM,mBAJjB,OAQI,uBAAG1C,GAAG,cACHzF,UAAU,mCACVkI,cAAY,UACZC,MAAM,SACNP,QAAS3H,KAAKC,MAAMwX,iB,0CAYnDjW,IAAE,2BAA2BkW,UAC7BpR,SAAS5D,iBAAiB,QAAQ1C,KAAKqX,eAAc,K,6CAGrD/Q,SAASc,oBAAoB,QAAQpH,KAAKqX,eAAc,O,GArG3ClX,aAyGNkI,eAAW4O,IC7GpBU,G,4MAEFC,cAAgB,SAAA3U,GACZ,EAAKhD,MAAM4X,SAAS5U,EAAME,OAAOE,Q,uDAG3B,IAECqE,EAAY1H,KAAKC,MAAM6E,SAAvB4C,SAEP,OACI,yBAAK3H,UAAU,0CACX,yBAAKA,UAAU,oBACX,2BACI4C,KAAK,OACLS,KAAK,cACLrD,UAAU,cACVuF,YAAY,cACZC,SAAUvF,KAAK4X,gBAEnB,kBAAC,IAAD,CAAM5S,GAAI0C,EAAW,YACjB,4BAAQlC,GAAG,cACHzF,UAAU,eAEd,uBAAGA,UAAU,8B,GAxBbI,aAgCbkI,eAAWsP,IC/BLG,G,kDAEjB,WAAY7X,GAAQ,IAAD,8BACf,cAAMA,IAQV8X,WAAa,WACT,OAAO,EAAK9X,MAAMuF,KAAO0H,GAAWqJ,YAAY/Q,IAAM,EAAKvF,MAAM0C,OAASuK,GAAWqJ,YAAY5T,MAVlF,EAgBnBqV,iBAAmB,WAEf,IACIC,EAAU,GAIRC,EALOhL,GAAW8G,QAAQ,EAAK/T,MAAM0C,KAAK,EAAK1C,MAAMuF,IAKnC2S,sBACN,OAAfD,IACCD,EAAUC,EAAWtY,SAAW,gBAGpC,EAAK0D,SAAS,CACV2U,QAASA,KA7BE,EA6HnBG,WAAa,SAAAvY,GAIL,EAAKkY,cACL,EAAKzU,UAAS,SAAAkB,GAAK,MAAK,CACpB6P,eAAgB7P,EAAM6P,eAAiB,MAM/C,EAAKpU,MAAMoY,MAAM,EAAKpY,MAAMqY,QAvI5B,EAAK9T,MAAQ,CACT6P,eAAgB,EAChBkE,aAAS1T,EACToT,QAAS,IALE,E,qDAiCT,IAAD,OAICM,EAFOrL,GAAW8G,QAAQhU,KAAKC,MAAM0C,KAAK3C,KAAKC,MAAMuF,IAEtCgT,kBAmCfC,EAAY,WACd,OAAGF,EAEK,8BACKA,EAAQG,wBAKb,mEAMNC,EAAa,WACf,OAAGJ,EAEK,yBAAKxY,UAAU,gBACVwY,EAAQK,yBAIV,MAaf,OACI,wBAAIzN,IAAKnL,KAAKC,MAAMqY,MAChBvY,UAAW,uBAAyBC,KAAK+X,aAAe,aAAe,KAEvE,kBAAC,IAAD,CAAM/S,GAba,eAApB,EAAK/E,MAAM0C,KACH,cAAgBuK,GAAW8G,QAAQ,aAAa,EAAK/T,MAAMuF,IAAImL,UAC7C,cAApB,EAAK1Q,MAAM0C,KACT,eAAiB,EAAK1C,MAAMuF,GACV,aAApB,EAAKvF,MAAM0C,KACT,cAAgBuK,GAAWoJ,cAAc3E,QAAQhB,eADtD,GAUE,yBAAK5Q,UAAU,SACX,gCACKC,KAAKC,MAAMmD,MA3EK,IAA9B,EAAKoB,MAAM6P,eACH,KAGH,yBAAKtU,UAAU,iBAGV,EAAKyE,MAAM6P,iBASE,KAAvB,EAAK7P,MAAMyT,QAEN,yBAAKlY,UAAU,iBACV0Y,IACAE,KAKL,yBAAK5Y,UAAU,iBACV,EAAKyE,MAAMyT,a,0CA2E5B,IAAMzL,EAAOU,GAAW8G,QAAQhU,KAAKC,MAAM0C,KAAK3C,KAAKC,MAAMuF,IAC3DxF,KAAKsD,SAAS,CACV+Q,eAAgB7H,EAAK6H,iBAKzB7H,EAAKvJ,MAAM6Q,GAAG,cAAc9T,KAAKoY,YACjC5L,EAAKvJ,MAAM6Q,GAAG,oBAAoB9T,KAAKgY,oB,yCAExBa,EAAWC,EAAWC,GAWrC,GAPG/Y,KAAK+X,cAA8C,IAA9B/X,KAAKwE,MAAM6P,gBAC/BrU,KAAKsD,SAAS,CACV+Q,eAAgB,IAKrBwE,EAAUlW,OAAS3C,KAAKC,MAAM0C,MAAQkW,EAAUrT,KAAOxF,KAAKC,MAAMuF,GAAI,CAErE,IAAMwT,EAAW9L,GAAW8G,QAAQ6E,EAAUlW,KAAKkW,EAAUrT,IAC7DwT,EAAS/V,MAAMgW,GAAG,cAAcjZ,KAAKoY,YACrCY,EAAS/V,MAAMgW,GAAG,oBAAoBjZ,KAAKgY,kBAE3C,IAAMrF,EAAUzF,GAAW8G,QAAQhU,KAAKC,MAAM0C,KAAK3C,KAAKC,MAAMuF,IAC9DmN,EAAQ1P,MAAM6Q,GAAG,cAAc9T,KAAKoY,YACpCzF,EAAQ1P,MAAM6Q,GAAG,oBAAoB9T,KAAKgY,kBAG1ChY,KAAKsD,SAAS,CACV2U,QAAS,GACT5D,eAAgB1B,EAAQ0B,oB,6CAMhC,IAAM7H,EAAOU,GAAW8G,QAAQhU,KAAKC,MAAM0C,KAAK3C,KAAKC,MAAMuF,IAI3DgH,EAAKvJ,MAAMgW,GAAG,cAAcjZ,KAAKoY,YACjC5L,EAAKvJ,MAAMgW,GAAG,oBAAoBjZ,KAAKgY,sB,GA5LT7X,aCCjB+Y,G,kDAEjB,WAAYjZ,GAAQ,IAAD,8BACf,cAAMA,IAYVkZ,cAAgB,SAAAC,GACZ,IAAMC,EAAa,EAAK7U,MAAMsO,MAAMrH,OAAO,GACrC6N,EAAOD,EAAWD,GACxBC,EAAW5N,OAAO2N,EAAM,GACxBC,EAAWE,QAAQD,GACnB,EAAKhW,SAAS,CACVwP,MAAOuG,KAnBI,EAyBnB1G,QAAU,SAAAnG,GAIN,IAAMgN,EAAU,CACZ7W,KAAM6J,EAAK7J,KACX6C,GAAIgH,EAAKhH,GACT0J,SAAU1C,EAAK0C,SACf+F,YAAa,CACTxI,KAAMD,EAAKC,OAMnB,EAAKnJ,UAAS,SAAAkB,GAAK,MAAK,CACpBsO,MAAO,CAAC0G,GAASC,OAAOjV,EAAMsO,YAzCnB,EA6CnB4G,cAAgB,WAEZ,IAAMlN,EAAOU,GAAWoJ,cAAc3E,QAEtC,EAAKrO,SAAS,CACVqW,cAAc,EACdC,aAAcpN,EAAK0C,YAnDR,EAuDnB2K,gBAAkB,WAEd,IAAMrN,EAAOU,GAAWoJ,cAAc3E,QAEtC,EAAKrO,SAAS,CACVqW,cAAc,EACdC,aAAcpN,EAAK0C,YA7DR,EAiEnB4K,eAAiB,WACb/T,QAAQC,IAAI,UAEZ,EAAK1C,SAAS,CACVqW,cAAc,EACdC,aAAc,MAtEH,EA0EnBG,YAAc,SAAAjH,GACV,EAAKxP,SAAS,CACVwP,MAAOA,KA1EX,EAAKtO,MAAQ,CAETsO,MAAO,GAEPkH,YAAa,GAEbL,cAAc,EACdC,aAAc,IATH,E,gEAoFZ1M,GAAWoJ,cAAc9D,SACxBxS,KAAKsD,SAAS,CACVqW,cAAc,IAKtBzM,GAAWjK,MAAM6Q,GAAG,iBAAiB9T,KAAK0Z,eAC1CxM,GAAWjK,MAAM6Q,GAAG,mBAAmB9T,KAAK6Z,iBAC5C3M,GAAWjK,MAAM6Q,GAAG,kBAAkB9T,KAAK8Z,gBAC3C5M,GAAWjK,MAAM6Q,GAAG,WAAW9T,KAAK2S,SAMjCzF,GAAW2H,gBACV7U,KAAKsD,SAAS,CACVwP,MAAO5F,GAAW4H,6BAMtB5H,GAAWjK,MAAM6Q,GAAG,eAAe9T,KAAK+Z,e,+BAItC,IAAD,OAECE,EAAaja,KAAKC,MAAMga,YAAc,OACxCC,EAAQ,EA4BZ,OACI,yBAAKjV,MAAO,CACRgV,WAAYA,EACZ5X,OAAQ,SAER,yBAAKtC,UAAU,sBACX,kBAAC,GAAD,CACI8X,SAAU,SAAAmC,GACN,EAAK1W,SAAS,CACV0W,YAAaA,KAGrBG,aAAcna,KAAKC,MAAMka,eAG7B,wBAAIpa,UAAU,4BAA4BkF,MAAO,CAAC5C,OAAQ,sBA9B/D,EAAKmC,MAAMmV,aAEN,kBAAC,GAAD,CACIxO,KAAM,EACNmN,OAAQ,EACR9S,GAAI,EACJ7C,KAAM,WACNS,KAAM,EAAKoB,MAAMoV,aACjBvB,MAAO,eAIZ,KAoBMrY,KAAKwE,MAAMsO,MAAMsH,KAAI,SAAC5N,EAAKjB,GACxB,OAAGiB,EAAK0C,SAASmL,SAAS,EAAK7V,MAAMwV,cACjCE,IAEI,kBAAC,GAAD,CACI/O,IAAKI,EACL+M,MAAO/M,EACP/F,GAAIgH,EAAKhH,GACT7C,KAAM6J,EAAK7J,KACXS,KAAMoJ,EAAK0C,SACXmJ,MAAO,EAAKc,iBAIjB,SAxDV,IAAVe,EAEK,iDAID,S,6CA8DXhN,GAAWjK,MAAMgW,GAAG,iBAAiBjZ,KAAK0Z,eAC1CxM,GAAWjK,MAAMgW,GAAG,mBAAmBjZ,KAAK6Z,iBAC5C3M,GAAWjK,MAAMgW,GAAG,kBAAkBjZ,KAAK8Z,gBAC3C5M,GAAWjK,MAAMgW,GAAG,WAAWjZ,KAAK2S,SACpCzF,GAAWjK,MAAMgW,GAAG,eAAejZ,KAAK+Z,iB,GAhMV5Z,aCHvB,SAASma,GAAgBra,GACpC,OACI,yBAAKF,UAAU,eACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,gCACVkF,MAAO,CACH7C,MAAO,QACPC,OAAQ,QACRkY,YAAa,UAEjBC,KAAK,UACN,0BAAMza,UAAU,WAAhB,eAEJ,yBAAKA,UAAU,eAAeE,EAAM4P,Q,+BCVlD4K,G,kDAUF,WAAYxa,GAAQ,IAAD,8BACf,cAAMA,IATVya,aAAc,EAQK,EAPnBC,mBAAoB,EAOD,EAQnBC,SAAW,SAAA3X,GAEP,EAAKK,SAAS,CACXe,QAASpB,EAAME,OAAOE,QAGzB,EAAKwX,qBAdU,EAiBnBA,kBAAoB,WAIZ,EAAKC,aAED,EAAK5C,YACL6C,aAAa,EAAKC,aAEtB,EAAK9C,YAAa,EACb,EAAK+C,mBACN,EAAKA,kBAAmB,EACxB/N,GAAWsC,OAAOC,KAAK,mBAE3B,EAAKuL,YAAcvG,YAAW,WAC1B,EAAKyD,YAAa,EACd,EAAK+C,mBACL,EAAKA,kBAAmB,EACxB/N,GAAWsC,OAAOC,KAAK,qBAE5B,OArCQ,EAyCnBrK,SAAW,SAAAnC,GAKP,GAJAA,EAAMO,iBAIoB,KAAvB,EAAKgB,MAAMH,QAAe,CACzB,IAAMA,EAAU,EAAKG,MAAMH,QAO3B,GAHA,EAAKf,SAAS,CACVe,QAAS,KAEV,EAAKyW,WAAY,CAAC,IAEVpT,EAAY,EAAKzH,MAAM6E,SAAvB4C,SAIPwF,GAAWoJ,cAAc4E,oBAAoB7W,GACxCM,MAAK,SAAAC,GACCA,IACC,EAAK3E,MAAM2H,QAAQuT,QAAQ,SAC3B,EAAKlb,MAAM2H,QAAQuT,QAAQzT,YAOvCwF,GAAWsC,OAAOC,KAAK,eAAgBpL,GAAS,SAAAiI,GAI/BY,GAAW8G,QAAQ,EAAK/T,MAAMyP,SAAU,EAAKzP,MAAM0P,QAC3DwE,WAAWjH,GAAWC,SAAStN,IAAKwE,EAASiI,QA5E/C,EAkFnB8O,aAAe,SAAAC,GAEX,EAAK/X,SAAS,CACVe,QAAS,EAAKG,MAAMH,QAAUgX,EAAMC,SAExC,EAAKT,qBAvFU,EA0FnBU,YAAc,SAAAtY,GACV,EAAKK,UAAS,SAAAkB,GAAK,MAAK,CACpBgX,WAAYhX,EAAMgX,eA1FtB,EAAKhX,MAAQ,CACTH,QAAS,GACTmX,WAAW,GAJA,E,qDAiGf,OACI,6BACI,0BAAMpW,SAAUpF,KAAKoF,SAAUrF,UAAU,YACrC,yBAAKA,UAAU,iBACX,2BAAO0b,aAAa,MACbnW,YAAY,aACZjC,MAAOrD,KAAKwE,MAAMH,QAClBkB,SAAUvF,KAAK4a,WAEtB,uBAAG7a,UAAU,kCACV4H,QAAS3H,KAAKub,eAGrB,4BAAQxb,UAAU,aAAa4C,KAAK,UAChC,uBAAG5C,UAAU,2BACVkI,cAAY,UACZC,MAAM,mBAGhBlI,KAAKwE,MAAMgX,UACR,yBAAKvW,MAAO,CACRlD,SAAU,WACV2Z,OAAQ,OACR1Z,MAAO,OACPI,MAAO,QACPC,OAAQ,UAER,kBAAC,KAAD,CAAQsZ,SAAU3b,KAAKob,gBAE7B,Q,0CASVpb,KAAK8a,WAAqC,aAAxB9a,KAAKC,MAAMyP,W,yCAGdmJ,EAAWC,EAAWC,GAIrC/Y,KAAK8a,WAAqC,aAAxB9a,KAAKC,MAAMyP,W,iCAI7B,OAAO1P,KAAK0a,a,aAGDrX,GACXrD,KAAK0a,YAAcrX,I,uCAInB,OAAOrD,KAAK2a,mB,aAGKtX,GACjBrD,KAAK2a,kBAAoBtX,I,kCAIzB,OAAOrD,KAAK4b,c,aAGAvY,GACZrD,KAAK4b,aAAevY,I,iCAIpB,OAAOrD,KAAK6b,a,aAGDxY,GACXrD,KAAK6b,YAAcxY,M,GAxLDlD,aA4LXkI,eAAWoS,IC9LLpO,G,uKAIb,IAAMwD,EAAM7P,KAAKC,MAAM4P,IAEjBiM,EAAc,WAChB,OAAOjM,EAAIhQ,MAAQqN,GAAWC,SAAStN,KAGrCgR,EAAOiL,IAAgB5O,GAAWC,SAAWD,GAAWE,MAAM5K,IAAIqN,EAAIhQ,KAE5E,OACI,yBAAKE,UAAW,uBAAyB+b,IAAgB,eAAiB,eAAiB,qCACrD,cAAhC5O,GAAWqJ,YAAY5T,KACrB,yBAAK5C,UAAU,SACX,4BAAQA,UAAU,wBAAuB,0BACrCkF,MAAO,CACH/C,MAAOoG,GAAOyC,MAAM8F,EAAK3O,SAGzB4Z,IAAgB,KAAOjL,EAAKjR,YAI1C,KACF,yBAAKG,UAAU,+BACX,uBAAGA,UAAU,QACR8P,EAAItD,UAGb,yBAAKxM,UAAU,wBACX,yBAAKA,UAAU,YACV8P,EAAIkM,kC,GAjCQ5b,aCEhB6b,G,kDAMjB,WAAY/b,GAAQ,IAAD,8BACf,cAAMA,IALVgc,YAAa,EAIM,EAWnBC,cAAgB,SAAAjZ,GACZ,EAAKK,SAAS,CACV6Y,eAAgB,EAAKC,sBAKW,IAAhC,EAAKC,aAAaC,WAClB,EAAKC,gBAnBM,EAsBnBC,kBAAoB,SAAAlc,GAChB,EAAK+b,aAAaC,UAAY,EAAKD,aAAaI,aAAe,EAAKJ,aAAaK,aAAepc,GAvBjF,EA0BnB8b,kBAAqB,WACjB,OAAO,EAAKC,aAAaI,aAAe,EAAKJ,aAAaK,aAAe,EAAKL,aAAaC,WA3B5E,EA8BnBK,kBAAoB,SAAAxZ,GAChB,EAAK+M,SAAW/M,GA/BD,EAkCnBoZ,aAAe,WACX,EAAKjZ,SAAS,CACVsZ,YAAY,IAEH1P,GAAW8G,QAAQ,EAAK/T,MAAMyP,SAAS,EAAKzP,MAAM0P,QAC1D4M,aAAa,KAvCH,EA0CnBM,eAAiB,WACb,EAAKvZ,SAAS,CACVsZ,YAAY,IAEhB,EAAKJ,kBAAkB,EAAKhY,MAAM2X,iBA9CnB,EAiDnB/D,WAAa,SAAAvY,GAYuB,IAA7B,EAAKuc,oBACJ,EAAK9Y,SAAS,CACVwE,YAAa,IAGdjI,IAAQqN,GAAWC,SAAStN,IAC3B,EAAKyD,SAAS,CACV6Y,eAAgB,EAChBrU,YAAa,IAGjB,EAAKxE,UAAS,SAAAkB,GAAK,MAAK,CACpBsD,YAAatD,EAAMsD,YAAa,OAvE5C,EAAK6U,kBAAoB,EAAKA,kBAAkBG,KAAvB,iBACzB,EAAKtY,MAAQ,CACToY,YAAY,EACZT,eAAgB,EAChBrU,YAAa,EACbiV,aAAc,IAPH,E,gEAgFf/c,KAAKqc,aAAeW,IAASC,YAAYjd,KAAKkQ,UACX,IAAhClQ,KAAKqc,aAAaC,WACjBtc,KAAKuc,eAET,IAAM/P,EAAOU,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAC/DnD,EAAKvJ,MAAM6Q,GAAG,kBAAkB9T,KAAK6c,gBACrCrQ,EAAKvJ,MAAM6Q,GAAG,cAAc9T,KAAKoY,YAEjCpY,KAAKkd,WAAY,I,yCAGFrE,EAAWC,EAAWC,GAQrC,GAAGF,EAAUnJ,WAAa1P,KAAKC,MAAMyP,UAAYmJ,EAAUlJ,SAAW3P,KAAKC,MAAM0P,OAAQ,CAErF,IAAMqJ,EAAW9L,GAAW8G,QAAQ6E,EAAUnJ,SAASmJ,EAAUlJ,QACjEqJ,EAAS/V,MAAMgW,GAAG,kBAAkBjZ,KAAK6c,gBACzC7D,EAAS/V,MAAMgW,GAAG,cAAcjZ,KAAKoY,YAErC,IAAMzF,EAAUzF,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAClEgD,EAAQ1P,MAAM6Q,GAAG,kBAAkB9T,KAAK6c,gBACxClK,EAAQ1P,MAAM6Q,GAAG,cAAc9T,KAAKoY,YAGpCpY,KAAKwc,kBAAkB,GAEa,IAAhCxc,KAAKqc,aAAaC,WAClBtc,KAAKuc,eAKoB,IAA9Bvc,KAAKwE,MAAM2X,gBACVnc,KAAKwc,kBAAkB,K,+BAIrB,IAAD,OAEChQ,EAAOU,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAgD3DwN,EAAW,IAAIzQ,KAAK,GA8BxB,OACI,yBAAK3M,UAAU,kBACX,yBAAKA,UAAU,WACVqd,SAAUpd,KAAKkc,cACfmB,IAAKrd,KAAK2c,mBA/EhB,EAAKnY,MAAMoY,WAEN,yBAAK7c,UAAU,qBACX,yBAAKA,UAAU,gCAAgCya,KAAK,UAChD,0BAAMza,UAAU,WAAhB,gBAIT,KA0EEyM,EAAK0D,SAASkK,KAAI,SAACvK,EAAItE,GACpB,OACI,yBAAKJ,IAAKI,GAlCF,SAAAsE,GACxB,OAAGA,EAAIyN,eAAeH,IAClBA,EAAWtN,EAAIpD,KAEX,yBAAK1M,UAAY,kBACb,6BACK8P,EAAI9C,oBAKrBoQ,EAAWtN,EAAIpD,KACR,MAuBc8Q,CAAoB1N,EAAIxM,OACzB,kBAAC,GAAD,CACIwM,IAAKA,EAAIxM,YArBL,IAAzBmJ,EAAK0D,SAASrM,OAET,yBAAK9D,UAAU,sBAAsBya,KAAK,SAA1C,oCAID,KAlDJ,EAAK0C,WACA,EAAKd,oBAAsB,GAEvB,yBAAK5W,GAAG,kBACHzF,UAAU,kBACV4H,QAAS,WACL,EAAKrE,SAAS,CACV6Y,eAAgB,EAChBrU,YAAa,MAItB,yBAAKtC,GAAG,cAAczF,UAAU,gBAC5B,uBAAGA,UAAU,+BAvB9B,EAAKyE,MAAMsD,YAAc,EAEpB,yBAAKtC,GAAG,qBAAqBzF,UAAU,UAClC,EAAKyE,MAAMsD,aAGjB,MAwBA,MAqDH,kBAAC,GAAD,CACI4H,SAAU1P,KAAKC,MAAMyP,SACrBC,OAAQ3P,KAAKC,MAAM0P,Y,6CAO/B3P,KAAKkd,WAAY,EAEjB,IAAM1Q,EAAOU,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAC/DnD,EAAKvJ,MAAMgW,GAAG,kBAAkBjZ,KAAK6c,gBACrCrQ,EAAKvJ,MAAMgW,GAAG,cAAcjZ,KAAKoY,c,gCAIjC,OAAOpY,KAAKic,Y,aAGF5Y,GACVrD,KAAKic,WAAa5Y,I,+BAIlB,OAAOrD,KAAKmP,W,aAGH9L,GACTrD,KAAKmP,UAAY9L,I,mCAIjB,OAAOrD,KAAKwd,e,aAGCna,GACbrD,KAAKwd,cAAgBna,M,GA1QclD,aCFtBsd,G,uKAGb,OACI,yBAAK1d,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,sBAAsBya,KAAK,SAA1C,qCAIJ,kBAAC,GAAD,CACI9K,SAAU,WACVC,OAAQ,O,0CAMpBzC,GAAWoJ,cAAcoH,S,yCAEV7E,EAAWC,EAAWC,GACrC7L,GAAWoJ,cAAcqH,W,6CAGzBzQ,GAAWoJ,cAAcrD,W,GAxBc9S,aCGzCyd,GACI,EADJA,GAEG,EAFHA,GAGQ,EAHRA,GAIe,EAJfA,GAKO,EALPA,GAMM,EAGSC,G,kDAEjB,WAAY5d,GAAQ,IAAD,8BACf,cAAMA,IAwGV6d,YAAc,WAEV,IAAMje,EAAMke,SAAS,EAAK9d,MAAMJ,KAKhC,GAAGqN,GAAWC,SAAStN,MAAQA,EAC3B,EAAKyD,SAAS,CACV0O,MAAO4L,GACPI,QAAQ,QAEV,CAEF,IAAM/L,EAAa,WACf/E,GAAW+E,WAAWpS,GACjB8E,MAAK,SAAAoN,GAIGA,EAAIE,WAIEF,EAAIK,cACX,EAAK9O,SAAS,CACV0O,MAAO4L,KAOP7L,EAAII,YACJ,EAAK7O,SAAS,CACV0O,MAAO4L,KAEX,EAAKpW,UAAU,CACXD,iBAAkBA,EAClBS,QAAS,CACL5E,KAAM8J,GAAWE,MAAM5K,IAAI3C,GAAKD,SAChCC,IAAKA,KAEV8E,OACHqO,GAAe,KAEf,EAAK1P,SAAS,CACV0O,MAAO4L,KAEX,EAAKpW,UAAU,CACXD,iBAAkBA,EAClBS,QAAS,CACL5E,KAAM8J,GAAWoJ,cAAc3E,QAAQzC,SACvCrP,IAAKA,KAEV8E,OACHqO,GAAe,IAnCnB,EAAK1P,SAAS,CACV0O,MAAO4L,KAqCf,EAAKta,SAAS,CACV0a,QAAQ,QAKlBhL,EAAiB,SAAAX,GAIfA,EACAnF,GAAW8F,eAAe,CACtBrQ,KAAM,WACN6C,GAAI,KAOiC,IAApC0H,GAAWE,MAAM5B,SAAS3L,GAI/BqN,GAAW8F,eAAe,MAE1B9F,GAAW8F,eAAe,CACtBrQ,KAAM,aACN6C,GAAI0H,GAAWE,MAAM5K,IAAI3C,GAAKgT,cAKtC3F,GAAW2H,gBACX5C,IAEA/E,GAAWjK,MAAM6Q,GAAG,gBAAgB,WAChC7B,OAIR,EAAK3O,SAAS,CACVzD,IAAKke,SAAS,EAAK9d,MAAMJ,SA5MjC,EAAK2E,MAAQ,CACT3E,IAAK,EACLme,QAAQ,EACRhM,MAAO4L,IALI,E,qDAST,IAAD,OA+DL,OAAO,yBAAK7d,UAAU,SA9DD,WACjB,IAAI,EAAKyE,MAAMwZ,OACX,OACI,kBAAC1D,GAAD,CACIzK,IAAI,sBA2DfoO,GAhDE,EAAKzZ,MAAMwN,QAAU4L,GAEhB,6BACI,sDAIJ,EAAKpZ,MAAMwN,QAAU4L,GAErB,6BACI,qEAOJ,EAAKpZ,MAAMwZ,OAEZ,EAAKxZ,MAAMwN,QAAU4L,GAGhB,kBAAC,GAAD,CACIlO,SAAUxC,GAAWqJ,YAAY5T,KACjCgN,OAAQzC,GAAWqJ,YAAY/Q,KAGlC,EAAKhB,MAAMwN,QAAU4L,GAEtB,kBAAC,GAAD,MAEC,EAAKpZ,MAAMwN,QAAU4L,GAEtB,6BACI,+DAKJ,6BACI,iEAvBX,K,0CAqCT5d,KAAK8d,gB,yCAGUjF,EAAWC,EAAWC,GAIlCF,EAAUhZ,MAAQG,KAAKC,MAAMJ,MAIzBqe,MAAMle,KAAKC,MAAMJ,KAChBG,KAAKsD,SAAS,CACV0O,MAAO4L,KAIX5d,KAAK8d,iB,6CAsHb9d,KAAKwH,UAAU,CACXD,iBAAkBA,EAClBS,QAAS,OACVrD,W,GA3NiCxE,aCdvBge,G,kLAGsB,oBAAzBne,KAAKC,MAAMme,UACjBpe,KAAKC,MAAMme,a,yCAGAvF,EAAWC,EAAWC,GACD,oBAA1B/Y,KAAKC,MAAMoe,WACjBre,KAAKC,MAAMoe,c,+BAIf,OAAGre,KAAKC,MAAMC,SACHF,KAAKC,MAAMC,SACf,S,GAfoBC,aCI7Bme,G,kDAEF,WAAYre,GAAQ,IAAD,8BACf,cAAMA,IAoBVse,aAAe,YAEQ,uCAAG,gCAAA/d,EAAA,6DAEZC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,qBALA,SAQKC,MAAM,UAAY,EAAKX,MAAMkI,KAAO,IAAI1H,GAR7C,YAQZI,EARY,QAUNE,GAVM,iCAYGF,EAASG,OAZZ,OAYVC,EAZU,OAcd,EAAKqC,SAAS,CACVrC,KAAMA,IAEV8E,QAAQC,IAAI/E,GAjBE,4CAAH,qDAqBnBud,GACK7Z,MAAK,SAAA8Z,GACF,EAAKnb,SAAS,CACV0a,QAAQ,EACRhM,OAAO,OAGd0M,OAAM,SAAAC,GACH,EAAKrb,SAAS,CACV0a,QAAQ,EACRhM,OAAO,QApDnB,EAAKxN,MAAQ,CACTwN,OAAO,EACPgM,QAAQ,EACR/c,KAAM,MALK,E,gEAUfjB,KAAKue,iB,yCAGU1F,EAAWC,EAAWC,GAIlCF,EAAU1Q,OAASnI,KAAKC,MAAMkI,MAC7BnI,KAAKue,iB,+BAyCH,IAEC7W,EAAY1H,KAAKC,MAAM6E,SAAvB4C,SAEP,GAAG1H,KAAKwE,MAAMwN,MACV,OACI,yBAAKjS,UAAU,qBAAqBya,KAAK,SAAzC,+BAIH,IAAIxa,KAAKwE,MAAMwZ,OAChB,OACI,kBAAC1D,GAAD,CAAgBzK,IAAM,sBAE9B,IAAM+O,EAAU1R,GAAWC,SAAStN,IACpC,OACI,yBAAKE,UAAU,iBACX,4BAAKC,KAAKwE,MAAMvD,KAAKmC,MACrB,4BAAKpD,KAAKwE,MAAMvD,KAAKmM,MAAMvJ,OAA3B,gBACA,wBAAI9D,UAAU,YACTC,KAAKwE,MAAMvD,KAAKmM,MAAMgN,KAAI,SAACd,EAAKF,GAAN,OACvB,wBAAIjO,IAAKiO,GACL,kBAAC,IAAD,CAAMpU,GAAI0C,EAAW,aAAe4R,EAAKzZ,KACpC+e,IAAYtF,EAAKzZ,IACd,oCAEAyZ,EAAK1Z,SAES,IAAjB0Z,EAAKuF,QACF,yBAAK9e,UAAU,cAAf,SAGF,gB,GA7FNI,aAsGbkI,eAAWiW,ICrGbQ,GACH,EADGA,GAEJ,EAFIA,GAGQ,EAHRA,GAIM,EAJNA,GAKA,EAGAC,GACH,EADGA,GAEH,EAGWC,G,kDAEjB,WAAY/e,GAAQ,IAAD,8BACf,cAAMA,IAQVgf,gBATmB,uCASD,WAAM9W,GAAN,SAAA3H,EAAA,0DAIgC,IAA3C0M,GAAW4F,MAAMM,MAAM5H,SAASrD,GAJrB,yCAKH2W,IALG,gCAOHA,IAPG,2CATC,wDAsBnBI,YAAc,WAIV,GAAGhB,MAAM,EAAKje,MAAMkI,MAChB,EAAK7E,SAAS,CACV0O,MAAO8M,GACPd,QAAQ,QAEX,CAED,IAAM7L,EAAa,WAEf,IAAMhK,EAAO4V,SAAS,EAAK9d,MAAMkI,MAE3B6K,EAAiB,YAK4B,IAA3C9F,GAAW4F,MAAMM,MAAM5H,SAASrD,GAIhC+E,GAAW8F,eAAe,MAE1B9F,GAAW8F,eAAe,CACtBrQ,KAAM,YACN6C,GAAI2C,KAKhB,EAAK8W,gBAAgB9W,GAChBxD,MAAK,SAAA8Z,GACEA,IAAMK,IACN9L,IACA,EAAK1P,SAAS,CACV0a,QAAQ,EACRhM,MAAO8M,GACP3W,KAAMA,IAEV,EAAKX,UAAU,CACXD,iBAAkBA,EAClBS,QAAS,CACL5E,KAAM8J,GAAW4F,MAAMM,MAAM5Q,IAAI2F,GAAM+G,SACvC/G,KAAMA,KAEXxD,SAEHqO,IACA,EAAK1P,SAAS,CACV0a,QAAQ,EACRhM,MAAOyM,QAIlBC,SAGLxR,GAAW2H,gBACX1C,IAEAjF,GAAWjK,MAAM6Q,GAAG,gBAAgB,WAChC3B,SApFZ,EAAK3N,MAAQ,CACT2D,KAAM,EACN6V,QAAQ,EACRhM,MAAO8M,IALI,E,gEA6Ff9e,KAAKkf,gB,yCAGUrG,EAAWC,EAAWC,GAIlCF,EAAU1Q,OAASnI,KAAKC,MAAMkI,MAC7BnI,KAAKkf,gB,6CAMTlf,KAAKwH,UAAU,CACXD,iBAAkBA,EAClBS,QAAS,OACVrD,S,+BAGG,IAAD,OA+EL,OACI,yBAAK5E,UAAU,SA/EE,WACjB,IAAI,EAAKyE,MAAMwZ,OACX,OACI,kBAAC1D,GAAD,CACIzK,IAAI,sBA4EXoO,GAtEU,WAKf,GAAI,EAAKzZ,MAAMwN,QAAU8M,GACrB,OACI,6BACI,sDAOP,GAAI,EAAKta,MAAMwZ,OAEhB,OAAO,EAAKxZ,MAAMwN,OAEd,KAAK8M,GAED,OAAO,EAAK7e,MAAMkf,KACd,KAAKJ,GACD,OACI,kBAAC,GAAD,CACIrP,SAAUxC,GAAWqJ,YAAY5T,KACjCgN,OAAQzC,GAAWqJ,YAAY/Q,KAI3C,KAAKuZ,GACD,OACI,kBAAC,GAAD,CACI5W,KAAM,EAAK3D,MAAM2D,OAI7B,QACI,OAAO,KAGnB,KAAK2W,GACD,OACI,6BACI,sFAIZ,KAAKA,GACD,OACI,6BACI,oFAIZ,KAAKA,GACD,OACI,6BACI,4DAIZ,QACI,OAAO,MAQdM,Q,GArM0Bjf,aCjBrCkf,G,uKAEQ,IAAD,OAIL,OACI,yBACItf,UAAU,cACV4H,QANe,WACnB,EAAK1H,MAAM2H,QAAQC,WAMf,yBAAK9H,UAAU,QAAQkF,MAAO,CAACC,QAAS,SAEhC,yBACInF,UAAU,cACV4H,QAAS,SAAA1E,GAAUA,EAAMmU,oBACzB,yBACIrX,UAAU,kBACV4H,QAAS,WAAO,EAAK1H,MAAM2H,QAAQC,WAFvC,QAKC7H,KAAKC,MAAMC,gB,GApBpBC,aA4BLkI,eAAWgX,IC3BpBC,G,4MAEFC,eAAiB,SAAAtc,GAEbiK,GAAWoJ,cAAc/D,UAAU,EAAKtS,MAAMJ,IAAI,EAAKI,MAAML,W,uDAI7D,OAEQ,wBAAIG,UAAU,mBACV,kBAAC,IAAD,CAAMiF,GAAI,cAAgBhF,KAAKC,MAAMJ,IAC/B8H,QAAS3H,KAAKuf,eACdpE,SAAS,GAEdnb,KAAKC,MAAML,e,GAfTO,aAqBRkI,eAAWiX,ICnBpB1B,GACI,EADJA,GAEK,EAGU4B,G,kDAWjB,WAAYvf,GAAQ,IAAD,8BACf,cAAMA,IANVwf,kBAAoB,EAKD,EA0BnBC,YAAc,SAAAzc,GACV8X,aAAa,EAAK4E,qBAClB,EAAKrc,SAAS,CACVoc,aAAa,KA7BF,EAmCnBE,sBAAwB,WACpB,EAAKD,oBAAsBlL,WAAW,EAAKoL,YAAY,MApCxC,EAsCnBA,YAAc,WACV,EAAKvc,SAAS,CACVoc,aAAa,KAxCF,EA8CnBI,cAAgB,SAAA7c,GACZ8X,aAAa,EAAK4E,qBAClB,EAAK1f,MAAM8f,cAAcC,GAAKC,WAhDf,EAqDnBC,eAAiB,SAAAjd,GACb8X,aAAa,EAAK4E,qBAClB,EAAK1f,MAAM8f,cAAcC,GAAKG,cAvDf,EA4DnBvI,cAAgB,SAAA3U,GACZ,IAAM+W,EAAc/W,EAAME,OAAOE,MAIjC,EAAKC,SAAS,CACV0W,YAAaA,EACboG,aAJgB,IAUhB,EAAKC,iBAAmB,EACxB,EAAKC,eAAgB,EACrB,EAAKC,oBAAoBvG,GAAarV,MAAK,SAAA8Z,QA3EhC,EAkFnB8B,oBAlFmB,uCAkFG,WAAOvG,GAAP,qBAAAxZ,EAAA,sEAERC,EAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU,CACjBmf,OAAQxG,EACRyG,MAAO,GACPC,MAAO,EAAKL,oBAXN,SAcSzf,MAAM,eAAgBH,GAd/B,YAcRI,EAdQ,QAgBDE,GAhBC,iCAkBOF,EAASG,OAlBhB,OAoBS,KAFfC,EAlBM,QAoBF4C,QAA0C,IAA1B,EAAKwc,iBACzB,EAAK/c,SAAS,CACVqd,aAAc,KAEG,IAAhB1f,EAAK4C,OACV,EAAKyc,eAAgB,GAGjBM,EAAuB,EAAKxE,oBAEH,IAA1B,EAAKiE,iBACJ,EAAK/c,SAAS,CACVqd,aAAc1f,IAGlB,EAAKqC,UAAS,SAAAkB,GAAK,MAAK,CACpBmc,aAAcnc,EAAMmc,aAAalH,OAAOxY,OAEhD,EAAKof,kBAAoBpf,EAAK4C,OAIF,IAAzB+c,GACC,EAAKL,oBAAoBvG,IAGjC,EAAK1W,SAAS,CACV0O,MAAO4L,KA/CD,wBAkDV,EAAKta,SAAS,CACV0O,MAAO4L,KAnDD,0DAuDd,EAAKta,SAAS,CACV0O,MAAO4L,KAxDG,0DAlFH,wDA+InBiD,cAAgB,SAAA1d,GACZ,EAAK2d,QAAU3d,GAhJA,EAmJnBqZ,kBAAoB,SAAAlc,GAChB,EAAKygB,SAASzE,UAAY,EAAKyE,SAAStE,aAAe,EAAKsE,SAASrE,aAAepc,GApJrE,EAuJnB8b,kBAAqB,WACjB,OAAqB,OAAlB,EAAK2E,SACG,EAAKA,SAAStE,aAAe,EAAKsE,SAASrE,aAAe,EAAKqE,SAASzE,UAC5E,GAxJP,EAAK9X,MAAQ,CACTwN,MAAO4L,GACP8B,aAAa,EAIb1F,YAAa,GAIboG,aAAa,EAIbO,aAAc,GAIdK,kBAAkB,GApBP,E,qDA6JT,IAAD,OAwEL,OACI,yBAAKjhB,UAAU,cACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,sBACX,2BAAO4C,KAAK,OACLS,KAAK,qBACLrD,UAAU,eACVuF,YAAY,kBACZC,SAAUvF,KAAK4X,iBAG1B,yBAAK7X,UAAU,qBACX,uBAAGA,UAAU,0BACV4H,QAAS3H,KAAK0f,cAjF9B,EAAKlb,MAAMkb,YAEN,yBAAK3f,UAAU,WACX,wBAAIA,UAAU,aACVsd,IAAK,EAAKwD,eAEV,wBAAI9gB,UAAU,kBACV4H,QAAS,EAAKmY,eADlB,eAKA,wBAAI/f,UAAU,kBACV4H,QAAS,EAAKuY,gBADlB,4BAQT,OAMJ,EAAK1b,MAAMwN,QAAU4L,GAEhB,yBAAK7d,UAAU,qBAAqBya,KAAK,SAAzC,+BAKA,EAAKhW,MAAM4b,YACZ,EAAK5b,MAAMmc,aAAa9c,OAAS,EAE5B,kBAAC,GAAD,KACI,2CACA,wBAAI9D,UAAU,oCACT,EAAKyE,MAAMmc,aAAavG,KAAI,SAACd,EAAMF,GAAP,OACzB,kBAAC,GAAD,CACIjO,IAAKiO,EACLvZ,IAAKyZ,EAAKzZ,IACVD,SAAU0Z,EAAK1Z,SACfqT,KAAM,EAAKhT,MAAMgT,YAQjC,wBAAIlT,UAAU,yBACV,yBAAKA,UAAU,sBAAsBya,KAAK,SAA1C,qBAQR,yBAAKza,UAAU,qBAAqBya,KAAK,SAAzC,mD,0CAgCZxa,KAAK+gB,SAAW/D,IAASC,YAAYjd,KAAK8gB,SAC1Cxa,SAASnF,KAAKuB,iBAAiB,QAAQ1C,KAAK4f,uBAI5C5f,KAAKqgB,iBAAmB,EACxBrgB,KAAKsgB,eAAgB,EACrBtgB,KAAKugB,oBAAoB,IAAI5b,MAAK,SAAA8Z,S,yCAEnB5F,EAAWC,EAAWC,GACrC/Y,KAAK+gB,SAAW/D,IAASC,YAAYjd,KAAK8gB,W,6CAI1C/F,aAAa/a,KAAK2f,qBAClBrZ,SAASnF,KAAKiG,oBAAoB,QAAQpH,KAAK4f,yB,0CAI/C,OAAO5f,KAAKihB,sB,aAGQ5d,GACpBrD,KAAKihB,qBAAuB5d,I,uCAI5B,OAAOrD,KAAKyf,mB,aAGKpc,GACjBrD,KAAKyf,kBAAoBpc,I,oCAIzB,OAAOrD,KAAKkhB,gB,aAGE7d,GACdrD,KAAKkhB,eAAiB7d,I,8BAItB,OAAOrD,KAAKmhB,U,aAGJ9d,GACRrD,KAAKmhB,SAAW9d,I,+BAIhB,OAAOrD,KAAKohB,W,aAGH/d,GACTrD,KAAKohB,UAAY/d,M,GAhUelD,a,SCTnBmf,G,4MAEjB+B,QAAU,SAAApe,GACH,EAAKhD,MAAM8X,WACV,EAAK9X,MAAMqhB,aAAa,EAAKrhB,MAAMmZ,OAEnC,EAAKnZ,MAAMshB,WAAW,EAAKthB,MAAMmZ,Q,uDAIrC,OACI,wBAAIjO,IAAKnL,KAAKC,MAAMmZ,MAChBrZ,UAAU,sBACV4H,QAAS3H,KAAKqhB,SAEbrhB,KAAKC,MAAML,SACZ,yBAAKG,UAAW,qBAAuBC,KAAKC,MAAM8X,WAAa,YAAc,KACzE,uBAAGhY,UAAU,uB,GAjBKI,aCGhCyd,GACI,EADJA,GAEK,E,qDAaP,WAAY3d,GAAQ,IAAD,8BACf,cAAMA,IANVwf,kBAAoB,EAKD,EAJnByB,gBAAiB,EAIE,EAqBnBM,cAAgB,WACZ,EAAKnB,iBAAmB,EACxB,EAAKoB,YAAY9c,MAAK,SAAA8Z,QAvBP,EA0BnB7G,cAAgB,SAAA3U,GACZ,EAAKK,SAAS,CACV0W,YAAa/W,EAAME,OAAOE,QAE9B,EAAKme,iBA9BU,EAmCnBC,UAnCmB,sBAmCP,kCAAAjhB,EAAA,sEAEEC,EAAS,CACXC,OAAQ,OACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU,CACjBmf,OAAQ,EAAKhc,MAAMwV,YACnByG,MAAO,GACPC,MAAO,EAAKL,oBAXhB,SAcmBzf,MAAM,SAAUH,GAdnC,YAcEI,EAdF,QAgBSE,GAhBT,iCAkBiBF,EAASG,OAlB1B,OAoBmB,KAFfC,EAlBJ,QAoBQ4C,QAA0C,IAA1B,EAAKwc,iBACzB,EAAK/c,SAAS,CACVqd,aAAc,KAEG,IAAhB1f,EAAK4C,OACV,EAAKyc,eAAgB,GAGjBM,EAAuB,EAAKxE,oBAEH,IAA1B,EAAKiE,iBACJ,EAAK/c,SAAS,CACVqd,aAAc1f,IAGlB,EAAKqC,UAAS,SAAAkB,GAAK,MAAK,CACpBmc,aAAcnc,EAAMmc,aAAalH,OAAOxY,OAEhD,EAAKof,kBAAoBpf,EAAK4C,OAIF,IAAzB+c,GACC,EAAKa,UAAU,EAAKxhB,MAAM+Z,cAGlC,EAAK1W,SAAS,CACV0O,MAAO4L,KA/CX,wBAkDA,EAAKta,SAAS,CACV0O,MAAO4L,KAnDX,0DAuDJ,EAAKta,SAAS,CACV0O,MAAO4L,KAxDP,0DAnCO,EAkGnB2D,WAAa,SAAAnI,GACT,IAAMvI,EAAO,EAAKrM,MAAMmc,aAAavH,GACrC,EAAKnZ,MAAMshB,WAAW1Q,EAAKhR,IAAIgR,EAAKjR,WApGrB,EAuGnB0hB,aAAe,SAAAlI,GACX,IAAMvI,EAAO,EAAKrM,MAAMmc,aAAavH,GACrC,EAAKnZ,MAAMqhB,aAAazQ,EAAKhR,MAzGd,EA4GnBghB,cAAgB,SAAA1d,GACZ,EAAK2d,QAAU3d,GA7GA,EAgHnBqZ,kBAAoB,SAAAlc,GAChB,EAAKygB,SAASzE,UAAY,EAAKyE,SAAStE,aAAe,EAAKsE,SAASrE,aAAepc,GAjHrE,EAoHnB8b,kBAAqB,WACjB,OAAqB,OAAlB,EAAK2E,SACG,EAAKA,SAAStE,aAAe,EAAKsE,SAASrE,aAAe,EAAKqE,SAASzE,UAC5E,GArHP,EAAK9X,MAAQ,CAITwV,YAAa,GAIb2G,aAAc,GAIdK,kBAAkB,EAClBhP,MAAO4L,IAfI,E,qDA0HT,IAAD,OACL,OACI,kBAAC,GAAD,KACI,0BAAM7d,UAAU,aAAakF,MAAO,CAAC7C,MAAO,MAAM+C,SAAU,UACxD,2BAAOxC,KAAK,OACL5C,UAAU,uBACVuF,YAAY,kBACZjC,MAAOrD,KAAKwE,MAAMwV,YAClBzU,SAAUvF,KAAK4X,iBAG1B,wBAAI7X,UAAU,yBACVsd,IAAKrd,KAAK6gB,eAET7gB,KAAKwE,MAAMmc,aAAa9c,OAAS,EAE9B7D,KAAKwE,MAAMmc,aAAavG,KAAI,SAACd,EAAMF,GAAP,OACxB,kBAAC,GAAD,CACIjO,IAAKiO,EACLA,MAAOA,EACPvZ,IAAKyZ,EAAKzZ,IACVD,SAAU0Z,EAAK1Z,SACf2hB,WAAY,EAAKA,WACjBD,aAAc,EAAKA,aACnBvJ,WAAY,EAAK9X,MAAMyhB,eAAepI,EAAKzZ,UAMnD,yBAAKE,UAAU,sBAAsBya,KAAK,SAA1C,wB,0CAWhBxa,KAAK+gB,SAAW/D,IAASC,YAAYjd,KAAK8gB,SAC1C9gB,KAAKwhB,kB,yCAGU3I,EAAWC,EAAWC,GACrC/Y,KAAK+gB,SAAW/D,IAASC,YAAYjd,KAAK8gB,SACvC9gB,KAAKC,MAAM+Z,cAAgBnB,EAAUmB,aACpCha,KAAKwhB,kB,uFAQT,OAAOxhB,KAAKyf,mB,aAGKpc,GACjBrD,KAAKyf,kBAAoBpc,I,oCAIzB,OAAOrD,KAAKkhB,gB,aAGE7d,GACdrD,KAAKkhB,eAAiB7d,I,8BAItB,OAAOrD,KAAKmhB,U,aAGJ9d,GACRrD,KAAKmhB,SAAW9d,I,+BAIhB,OAAOrD,KAAKohB,W,aAGH/d,GACTrD,KAAKohB,UAAY/d,M,GAxNIlD,aCNRwhB,G,kDAEjB,WAAY1hB,GAAQ,IAAD,8BACf,cAAMA,IAYVshB,WAAa,SAAC1hB,EAAID,GACd,EAAK0D,UAAS,SAAAkB,GAAK,MAAK,CACpBod,cAAepd,EAAMod,cAAcnI,OAAO,CAAC5Z,IAAKA,EAAID,SAAUA,SAfnD,EAmBnB0hB,aAAe,SAACzhB,GACZ,EAAKyD,UAAS,SAAAkB,GACV,IAAMqd,EAAQ,aAAOrd,EAAMod,eACrBxI,EAAQyI,EAASrQ,WAAU,SAAA8H,GAC7B,OAAOA,EAAKzZ,MAAQA,KAGxB,OADAgiB,EAASpW,OAAO2N,EAAM,GACf,CACHwI,cAAeC,OA3BR,EAgCnBC,cAAgB,SAAA1I,GACZ,EAAKkI,aAAa,EAAK9c,MAAMod,cAAcxI,GAAOvZ,MAjCnC,EAoCnB6hB,eAAiB,SAAC7hB,GACd,OAAO,EAAK2E,MAAMod,cAAcrQ,MAAK,SAAA+H,GACjC,OAAOA,EAAKzZ,MAAQA,MAtCT,EA4CnBkiB,eAAiB,SAAA9e,GAEb,EAAKhD,MAAM+hB,OAAO,EAAKxd,MAAMod,gBA5C7B,EAAKpd,MAAQ,CAITod,cAAe,GACfK,kBAAkB,GAPP,E,qDAiDT,IAAD,OAqCL,OALuC,IAApCjiB,KAAKwE,MAAMod,cAAc/d,QAAgB7D,KAAKwE,MAAMyd,kBACnDjiB,KAAKsD,SAAS,CACV2e,kBAAkB,IAItB,yBAAKliB,UAAU,gBACX,yBAAKA,UAAU,gBApCoB,IAApC,EAAKyE,MAAMod,cAAc/d,OAEpB,0DAKA,wBAAI9D,UAAU,SACV,0BAAMA,UAAW,gBAAkB,EAAKyE,MAAMyd,iBAAmB,YAAc,IACzEta,QAAS,SAAA1E,GACL,EAAKK,UAAS,SAAAkB,GAAK,MAAK,CACpByd,kBAAmBzd,EAAMyd,uBAIlC,EAAKzd,MAAMod,cAAc/d,OAP9B,gBADJ,oBAWI,uBAAG9D,UAAU,gDACV4H,QAAS,EAAKoa,mBAoBvB/hB,KAAKwE,MAAMyd,iBAMT,wBAAIliB,UAAU,cACTC,KAAKwE,MAAMod,cAAcxH,KAAI,SAACd,EAAKF,GAAN,OAC1B,kBAAC,GAAD,CACIjO,IAAKiO,EACLA,MAAOA,EACPvZ,IAAKyZ,EAAKzZ,IACVD,SAAU0Z,EAAK1Z,SACf2hB,WAAY,aACZD,aAAc,EAAKQ,cACnB/J,YAAY,QAdxB,kBAAC,GAAD,CAAUwJ,WAAYvhB,KAAKuhB,WACjBD,aAActhB,KAAKshB,aACnBI,eAAgB1hB,KAAK0hB,sB,GAhGVvhB,aCFpB+hB,G,kDAEjB,WAAYjiB,GAAQ,IAAD,8BACf,cAAMA,IAMVkiB,iBAAmB,SAAAlf,GACf,EAAKK,SAAS,CACV8e,UAAWnf,EAAME,OAAOE,SATb,EAanBgf,cAAgB,SAAApf,GAEZA,EAAMO,iBACN,EAAKvD,MAAMqiB,YAAY,CACnBlf,KAAM,EAAKoB,MAAM4d,UACjBG,YAAa,GACbC,UAAU,KAjBd,EAAKhe,MAAM,CACP4d,UAAW,IAHA,E,qDAwBf,OACI,yBAAKriB,UAAU,gBACX,0BAAMA,UAAU,iBACVqF,SAAUpF,KAAKqiB,eAEjB,qDAGA,2BACI1f,KAAK,OACL6C,GAAG,kBACHpC,KAAK,YACLrD,UAAU,eACVuF,YAAY,cACZC,SAAUvF,KAAKmiB,mBAEnB,6BACI,4BAAQxf,KAAK,SAAS5C,UAAU,mCAAhC,2B,GA3CmBI,aCGrC6f,GACW,EADXA,GAEa,EAGbyC,G,kDAEF,WAAYxiB,GAAQ,IAAD,8BACf,cAAMA,IAOVyiB,kBAAoB,SAAAd,GAEhB,EAAKte,SAAS,CACVqf,WAAY3C,GACZ4B,cAAeA,KAZJ,EAgBnBU,YAAc,SAAArhB,GAGV,IADA,IAAMmM,EAAQ,IAAIzB,MAAM,EAAKnH,MAAMod,cAAc/d,QACzC0H,EAAE,EAAEA,EAAE,EAAK/G,MAAMod,cAAc/d,OAAO0H,IAC1C6B,EAAM7B,GAAK,CACP1L,IAAK,EAAK2E,MAAMod,cAAcrW,GAAG1L,IACjCD,SAAU,EAAK4E,MAAMod,cAAcrW,GAAG3L,SACtCif,SAAS,GAIjB,EAAK+D,gBAAgB3hB,EAAKmM,GAAOzI,MAAK,SAAA8Z,QA3BvB,EA8BnBmE,gBA9BmB,uCA8BD,WAAO3hB,EAAKmM,GAAZ,eAAA5M,EAAA,sEAEJC,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,mBACV,eAAgB,oBAEpBQ,KAAMC,KAAKC,UAAU,CACjBJ,KAAMA,EACNmM,MAAOA,KAVL,SAaaxM,MAAM,UAAWH,GAb9B,cAiBEM,IACR,EAAKd,MAAM2H,QAAQC,SAlBb,yGA9BC,wDAEf,EAAKrD,MAAQ,CACTme,WAAY3C,GACZ4B,cAAe,IAJJ,E,qDAyDf,OAAO5hB,KAAKwE,MAAMme,YAEd,KAAK3C,GACD,OACI,kBAAC,GAAD,CACIgC,OAAQhiB,KAAK0iB,oBAGzB,KAAK1C,GACD,OACI,kBAAC,GAAD,CACIsC,YAAatiB,KAAKsiB,cAI9B,QACI,OAAO,U,GA3EAniB,aA+ERkI,eAAWoa,ICpFbzC,GAAO,CAChB6C,WAAY,EACZ5C,SAAU,EACVE,YAAa,GAGI2C,G,kDAEjB,WAAY7iB,GAAQ,IAAD,8BACf,cAAMA,IAMV8f,cAAgB,SAAAgD,GACZ,EAAKzf,SAAS,CACVqf,WAAYI,KAPhB,EAAKve,MAAQ,CACTme,WAAY3C,GAAK6C,YAHN,E,qDAaT,IAAD,OA6DL,OACI,kBAAC,GAAD,KACI,yBAAK9iB,UAAU,kBACX,4BAtBM,WAEd,OAAO,EAAKyE,MAAMme,YAEd,KAAK3C,GAAK6C,WACN,MAAO,aAEX,KAAK7C,GAAKC,SACN,MAAO,cAEX,KAAKD,GAAKG,YACN,MAAO,sBAEX,QACI,MAAO,cAQF6C,KA9DF,WAEX,OAAQ,EAAKxe,MAAMme,YAEf,KAAK3C,GAAK6C,WACN,OACI,kBAAC,GAAD,CACI9C,cAAe,EAAKA,cACpB9M,KAAM,EAAKhT,MAAMgT,OAM7B,KAAK+M,GAAKC,SACN,OACI,kBAAC,GAAD,MAIR,KAAKD,GAAKG,YACN,OACI,6BACI,4CAMZ,QACI,OACI,kBAAC,GAAD,CACIJ,cAAe,EAAKA,cACpB9M,KAAM,EAAKhT,MAAMgT,QA+B5BgQ,Q,GAjFoB9iB,aCP/Byd,GACI,EADJA,GAEM,EAFNA,GAIG,EAGYsF,G,kDAEjB,WAAYjjB,GAAQ,IAAD,8BACf,cAAMA,IAuCVkjB,QAAU,WAEN,GAAGjF,MAAM,EAAKje,MAAMJ,KAChB,EAAKyD,SAAS,CACV0O,MAAO4L,UAET,GAAG1Q,GAAWC,SAAStN,MAAQke,SAAS,EAAK9d,MAAMJ,KACrD,EAAKyD,SAAS,CACV0O,MAAO4L,GACPI,QAAQ,QAEX,CACD,IAAMne,EAAMke,SAAS,EAAK9d,MAAMJ,KAChC,EAAKyD,SAAS,CACVzD,IAAKA,EACLmS,MAAO4L,GACPI,QAAQ,IAEZ,EAAKoF,UAAUvjB,GACV8E,OACA+Z,UA1DT,EAAKla,MAAQ,CACT3E,IAAK,EACLme,QAAQ,EACRhM,MAAO4L,GACPnK,SAAU,MANC,E,qDAWf,OAAIzT,KAAKwE,MAAMwZ,OAGNhe,KAAKwE,MAAMwN,QAAU4L,GAEtB,yBAAK7d,UAAU,kBACX,mCAOJ,6BACI,yBAAKA,UAAU,kBACX,4BACKC,KAAKwE,MAAMiP,SAAS7T,SADzB,OAGI,kBAAC,IAAD,CAAMoF,GAAI,cAAgBhF,KAAKwE,MAAM3E,KACjC,uBAAGE,UAAU,0BAIzB,wCAtBD,O,yEAsDEF,G,kFAEPY,EAAS,CACXC,OAAQ,MACRC,QAAS,CACL,OAAU,qB,SAGKC,MAAM,SAAWf,EAAKY,G,YAAvCI,E,QAEOE,G,iCAEQF,EAASG,O,cAAtBC,E,OAEJjB,KAAKsD,SAAS,CACVmQ,SAAUxS,EACV+c,QAAQ,I,kBAGL/c,G,iCAEA,M,kJAKXjB,KAAKmjB,Y,yCAGUtK,EAAWC,EAAWC,GAIlCF,EAAUhZ,MAAQG,KAAKC,MAAMJ,KAC5BG,KAAKmjB,Y,qDAtGqBhjB,aCGvB,SAASkjB,GAAsBpjB,GAAO,IAE3CqjB,EAASC,cAATD,KAEN,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,aACNrjB,EAAMC,SACP,kBAAC,GAAD,KACI,kBAAC,GAAD,QAGR,kBAAC,IAAD,CAAOojB,KAAI,UAAKA,EAAL,sBAA+Bzc,OACtC,SAAA2c,GAAU,OACN,kBAAC,GAAD,KACKvjB,EAAMC,SACP,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAUL,IAAK2jB,EAAWC,MAAMC,OAAOC,eAKvD,kBAAC,IAAD,CAAOL,KAAI,UAAKA,EAAL,cACNrjB,EAAMC,SACP,kBAAC,GAAD,KACI,0CAGR,kBAAC,IAAD,CAAOojB,KAAK,KACPrjB,EAAMC,WC/BR,SAAS0jB,GAAe3jB,GAAO,IAAD,EAErBsjB,cAAdD,EAFmC,EAEnCA,KAFmC,EAE7BO,IACCC,cAab,OAVAC,qBAAU,WAImB,IAAtB9jB,EAAM6H,aACL7H,EAAM+jB,eAAe,CACjBlc,YAAa,OAKrB,yBAAK/H,UAAU,4CACX,yBAAKA,UAAU,gEAEX,kBAAC,GAAD,CACIoa,aAAcla,EAAM+jB,kBAG5B,yBAAKjkB,UAAU,0CACVkF,MAAO,CAACgf,QAAQ,MAGjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOX,KAAI,UAAKA,EAAL,cAAuBzc,OAC9B,SAAA2c,GAAU,OACN,kBAACH,GAAD,KACI,kBAAC,GAAD,CACIxjB,IAAK2jB,EAAWC,MAAMC,OAAO7jB,UAK7C,kBAAC,IAAD,CAAOyjB,KAAI,UAAKA,EAAL,gBAAyBzc,OAChC,SAAA2c,GAAU,OACN,kBAACH,GAAD,KACI,kBAAC,GAAD,CACIlb,KAAMqb,EAAWC,MAAMC,OAAOvb,KAC9BgX,IAAKJ,SAKrB,kBAAC,IAAD,CAAOuE,KAAI,UAAKA,EAAL,oBAA6Bzc,OACpC,SAAA2c,GAAU,OACN,kBAACH,GAAD,KACI,kBAAC,GAAD,CACIlb,KAAMqb,EAAWC,MAAMC,OAAOvb,KAC9BgX,IAAKJ,SAKrB,kBAAC,IAAD,CAAOuE,KAAMA,GACT,kBAACD,GAAD,KACI,iE,ICrEPa,G,kDAEjB,WAAYjkB,GAAQ,IAAD,8BACf,cAAMA,IAKV+X,iBAAmB,WAEf,IAAMxL,EAAOU,GAAW8G,QAAQ,EAAK/T,MAAMyP,SAAS,EAAKzP,MAAM0P,QAC/D,EAAKrM,SAAS,CACV6N,YAAa3E,EAAK2X,oBARtB,EAAK3f,MAAQ,CACT2M,YAAa,IAHF,E,qDAgBf,OACI,yBAAKpR,UAAU,qBACVC,KAAKwE,MAAM2M,YAAYiJ,KAAI,SAACvJ,EAAKuI,GAAN,OACxB,yBAAKjO,IAAKiO,EAAOrZ,UAAU,WACtB8Q,EAAKjR,SAAW,sB,0CASpBsN,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAC1D1M,MAAM6Q,GAAG,oBAAoB9T,KAAKgY,oB,yCAGxBa,EAAWC,EAAWC,GAKlCF,EAAUnJ,WAAa1P,KAAKC,MAAMyP,UAAYmJ,EAAUlJ,SAAW3P,KAAKC,MAAM0P,SAE5DzC,GAAW8G,QAAQ6E,EAAUnJ,SAASmJ,EAAUlJ,QACxD1M,MAAMgW,GAAG,oBAAoBjZ,KAAKgY,kBAE3B9K,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAC1D1M,MAAM6Q,GAAG,oBAAoB9T,KAAKgY,qB,6CAMjC9K,GAAW8G,QAAQhU,KAAKC,MAAMyP,SAAS1P,KAAKC,MAAM0P,QAC1D1M,MAAMgW,GAAG,oBAAoBjZ,KAAKgY,sB,GArDD7X,aCQ/B,SAASikB,GAAwBnkB,GAAO,IAE7CqjB,EAASC,cAATD,KAEN,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,aACP,kBAAC,GAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAI,UAAKA,EAAL,sBAA+Bzc,OACtC,SAAA2c,GAAU,OACN,kBAAC,GAAD,CAAU3jB,IAAK2jB,EAAWC,MAAMC,OAAOC,aAG/C,kBAAC,IAAD,CAAOL,KAAI,UAAKA,EAAL,cACP,yCAEJ,kBAAC,IAAD,CAAOA,KAAK,KACPrjB,EAAMC,WCjBR,SAASmkB,GAAmBpkB,GAAO,IAExCqjB,EAASC,cAATD,KAEAgB,EAAyB,WAC3B,MAA8B,KAA3BrkB,EAAMsW,YAAY5T,MAAwC,IAAzB1C,EAAMsW,YAAY/Q,GAE9C,kBAAC,GAAD,CACIkK,SAAUzP,EAAMsW,YAAY5T,KAC5BgN,OAAQ1P,EAAMsW,YAAY/Q,KAI/B,MAGX,OACI,yBAAKzF,UAAU,gCACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOujB,KAAI,UAAKA,EAAL,cAAuBzc,OAC9B,SAAA2c,GAAU,OACN,kBAACY,GAAD,KACI,kBAAC,GAAD,CACIvkB,IAAK2jB,EAAWC,MAAMC,OAAO7jB,MAEhCykB,QAKb,kBAAC,IAAD,CAAOhB,KAAI,UAAKA,EAAL,gBAAyBzc,OAChC,SAAA2c,GAAU,OACN,kBAACY,GAAD,KACI,kBAAC,GAAD,CACIjc,KAAMqb,EAAWC,MAAMC,OAAOvb,KAC9BgX,IAAKJ,KAERuF,QAIb,kBAAC,IAAD,CAAOhB,KAAI,UAAKA,EAAL,oBAA6Bzc,OACpC,SAAA2c,GAAU,OACN,kBAACY,GAAD,KACI,kBAAC,GAAD,CACIjc,KAAMqb,EAAWC,MAAMC,OAAOvb,KAC9BgX,IAAKJ,SAKrB,kBAAC,IAAD,CAAOuE,KAAMA,GACT,kBAACc,GAAD,KACI,kBAAC,GAAD,CACInK,WAAW,OACXE,aAAcla,EAAM+jB,mBAIhC,kBAAC,IAAD,CAAOV,KAAO,KACV,6C,IChECrU,G,kDAEjB,WAAYhP,GAAQ,IAAD,8BACf,cAAMA,IA4CVskB,mBAAqB,SAAAhO,GAIE,OAAhBA,EACC,EAAKjT,SAAS,CACViT,YAAa,CACT5T,KAAM,GACN6C,GAAI,KAIZ,EAAKlC,SAAS,CACViT,YAAa,CACT5T,KAAM4T,EAAY5T,KAClB6C,GAAI+Q,EAAY/Q,IAEpBsC,YAAaoF,GAAWsX,0BA9DjB,EAmEnB/M,OAAS,Y5C2BN,WAAP,gC4C1BQA,GAAS9S,MAAK,WAEVG,SAASC,aAtEE,EA6EnB0f,OAAS,WAIL,EAAKnhB,UAAS,SAAAkB,GAAK,MAAK,CACpBsD,YAAaoF,GAAWsX,4BAhF5B,EAAKhgB,MAAQ,CAIT+R,YAAa,CACT5T,KAAM,GACN6C,GAAI,GAMRkf,MAAO,EAIPC,UAAW,KAKX7c,YAAa,EAIb8c,cAAe,GAKf1X,GAAWwG,YACXxG,GAAW2X,OAAOlgB,MAAK,SAAA8Z,OAjCZ,E,gEAwCfvR,GAAWjK,MAAM6Q,GAAG,sBAAsB9T,KAAKukB,oBAE/CrX,GAAWjK,MAAM6Q,GAAG,cAAc9T,KAAKykB,U,+BA8CvC,IAAMnhB,EAAWtD,KAAKsD,SAASwZ,KAAK9c,MAEpC,OACI,yBAAKD,UAAU,SACX,kBAAC,GAAD,CACI0X,OAAQzX,KAAKyX,OACbF,WAAY,CACRzP,YAAa9H,KAAKwE,MAAMsD,eAIhC,kBAAC,EAAD,CAAYhB,UAAW,CAAC,WACpB,kBAACud,GAAD,CACI9N,YAAavW,KAAKwE,MAAM+R,YACxByN,eAAgB1gB,KAIxB,kBAAC,EAAD,CAAYwD,UAAW,CAAC,SAAS,WAE7B,kBAAC8c,GAAD,CACI9b,YAAa9H,KAAKwE,MAAMsD,YACxBkc,eAAgB1gB,Q,6CAYhC4J,GAAWjK,MAAMgW,GAAG,sBAAsBjZ,KAAKukB,oBAC/CrX,GAAWjK,MAAMgW,GAAG,cAAcjZ,KAAKykB,Y,GA7HbtkB,a,OCQnB,SAAS2kB,KACtB,OACI,kBAAC,IAAD,KACE,yBAAK/kB,UAAU,SAIX,yBAAKA,UAAU,SACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOujB,KAAK,SACPyB,GAAgB,SAErB,kBAAC,IAAD,CAAOC,OAAK,EAAC1B,KAAK,UA+B/BljB,EAEK,kBAAC,IAAD,CACI4E,GAAI,CACA0C,SAAU,WAMlB,kBAAC,EAAD,OAtCQ,kBAAC,IAAD,CAAOsd,OAAK,EAAC1B,KAAK,aA0C/BljB,EAEK,kBAAC,IAAD,CACI4E,GAAI,CACA0C,SAAU,WAMlB,kBAAC,EAAD,OAjDQ,kBAAC,IAAD,CAAOsd,OAAK,EAAC1B,KAAK,KACbyB,GAAgB,MAErB,kBAAC,IAAD,CAAOzB,KAAK,KACV,kBAAC2B,GAAD,WAStB,SAASA,KACP,IAAIngB,EAAWogB,cAEf,OACI,6BACE,4CACe,8BAAOpgB,EAAS4C,YAiCvC,SAASqd,GAAgBjgB,GACrB,OAAG1E,EACkB,SAAb0E,EAEI,kBAAC,GAAD,MAKA,kBAAC,IAAD,CACIE,GAAI,CACA0C,SAAU,WAMtB,kBAAC,IAAD,CACI1C,GAAI,CACA0C,SAAU,YC7FVyd,QACW,cAA7B/e,OAAOtB,SAASsgB,UAEe,UAA7Bhf,OAAOtB,SAASsgB,UAEhBhf,OAAOtB,SAASsgB,SAAS3B,MACvB,2DCZNljB,IAAaoE,MAAK,SAAA8Z,GACdzB,IAASnW,OACL,kBAAC,IAAMwe,WAAP,KACI,kBAACP,GAAD,OAEJxe,SAASgf,eAAe,YDwH1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9gB,MAAK,SAAA+gB,GACJA,EAAaC,gBAEdjH,OAAM,SAAA1M,GACLjM,QAAQiM,MAAMA,EAAM3N,a","file":"static/js/main.a8ab6144.chunk.js","sourcesContent":["\r\nexport let loggedIn = false;\r\nexport let username;\r\nexport let uid;\r\n/*\r\n    request an server, ob cookie von User gesetzt\r\n */\r\nexport function setLoggedIn(val){\r\n    loggedIn = val;\r\n}\r\n/*\r\n    TODO: error-handling\r\n */\r\nexport async function isLoggedIn(){\r\n    try {\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await fetch('/user/self', config);\r\n\r\n        if(response.status === 403)\r\n            loggedIn = false;\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n\r\n            loggedIn = true;\r\n            uid = data.uid;\r\n            username = data.username;\r\n\r\n            return loggedIn;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n/*\r\n    login-request\r\n */\r\nexport async function login(username, password){\r\n    try {\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            })\r\n        };\r\n        const response = await fetch('/auth/login', config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n            if(data.success) {\r\n                loggedIn = true;\r\n                await isLoggedIn();\r\n            }\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\nexport async function register(username,password){\r\n    try {\r\n        const config = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                username: username,\r\n                password: password\r\n            })\r\n        };\r\n        const response = await fetch('/auth/register', config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n            if(data.success) {\r\n                loggedIn = true;\r\n                await isLoggedIn();\r\n            }\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\nexport async function logout(){\r\n    try {\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await fetch('/auth/logout', config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n\r\n            return data.success;\r\n        } else {\r\n            return false;\r\n        }\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nclass ErrorMsg extends Component{\r\n    render() {\r\n        return(\r\n            <small className=\"alert alert-danger p-1 message d-block\">\r\n                {this.props.children}\r\n            </small>\r\n        )\r\n    }\r\n}\r\n\r\nexport {ErrorMsg};","import $ from 'jquery';\r\n/*\r\n    benötigt:\r\n        jQuery\r\n        font-awesome\r\n\r\n    Password-toggle\r\n */\r\nexport function extendJQuery(){\r\n    $.fn.extend({\r\n        pwToggle: function(){\r\n            this.prepend($('<i>')\r\n                .addClass(\"fas fa-eye-slash psw-toggle-icon\")\r\n                .css({\r\n                    position: 'absolute',\r\n                    right: '20px',\r\n                    top: '11px',\r\n                    color: '#666',\r\n                    cursor: 'pointer',\r\n                    width: '16px',\r\n                    height: '16px'\r\n                })\r\n                .hover(function() {\r\n                    $(this).css('color','#666');\r\n                }, function() {\r\n                    $(this).css('color','#000');\r\n                }));\r\n            this.css({\r\n                position:\"relative\"\r\n            });\r\n\r\n            let icon = this.get(0).children[0];\r\n            let input = this.get(0).children[1];\r\n\r\n            icon.addEventListener(\"click\",function(){\r\n                if(input.type === \"password\"){\r\n                    icon.classList.remove(\"fa-eye-slash\");\r\n                    icon.classList.add(\"fa-eye\");\r\n                    input.type = \"text\";\r\n                }else{\r\n                    icon.classList.remove(\"fa-eye\");\r\n                    icon.classList.add(\"fa-eye-slash\");\r\n                    input.type = \"password\";\r\n                }\r\n            });\r\n        }\r\n    });\r\n}","import React,{Component} from \"react\";\r\nimport {\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport {setLoggedIn,login} from \"./Auth\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\n\r\nclass Login extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr\r\n            });\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: ''\r\n            });\r\n           /*\r\n                request to server\r\n            */\r\n           login(this.state.username,this.state.password).then(data => {\r\n               if(data.success){\r\n                   this.setState({\r\n                       valid: true,\r\n                       redirect: true\r\n                   });\r\n               }else{\r\n                   if(data.username !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           uNameErr: data.username\r\n                       });\r\n                   if(data.password !== undefined)\r\n                       this.setState({\r\n                           valid: false,\r\n                           pwErr: data.password\r\n                       });\r\n               }\r\n           });\r\n        }\r\n\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    render(){\r\n        /*\r\n            wenn bereits eingeloggt --> redirect\r\n         */\r\n        if(this.state.redirect){\r\n            //TODO redirect should work\r\n            setLoggedIn(true);\r\n            //console.log('redirect');\r\n            // eslint-disable-next-line no-restricted-globals\r\n            location.reload();\r\n            //this.props.history.push(\"/chat\");\r\n            return(\r\n                <div>\r\n                    <div>redirect</div>\r\n                    <Redirect to=\"/chat\" />\r\n                </div>\r\n            )\r\n        }else {\r\n            return (\r\n                <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                    <div className=\"col-sm-12 my-auto\">\r\n                        <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                            <h1>Login</h1>\r\n                            <form onSubmit={this.submitHandler}>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Benutzername:</label>\r\n                                    {this.uNameErr()}\r\n                                    <input type=\"text\"\r\n                                           name=\"username\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Benutzernamen eingeben\"\r\n                                           onChange={this.changeHandler}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Passwort:</label>\r\n                                    {this.pwErr()}\r\n                                    <div id=\"psw-group\">\r\n                                        <input type=\"password\"\r\n                                               name=\"password\"\r\n                                               className=\"form-control\"\r\n                                               placeholder=\"Passwort eingeben\"\r\n                                               onChange={this.changeHandler}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\r\n                                </div>\r\n                                <input\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-primary\"\r\n                                    value=\"Login\"\r\n                                />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default Login;","import React,{Component} from \"react\";\r\nimport validate from \"validate.js\";\r\nimport {ErrorMsg} from \"./MsgBox\";\r\nimport {register, setLoggedIn} from \"./Auth\";\r\nimport {Redirect} from \"react-router\";\r\nimport $ from 'jquery';\r\nimport {extendJQuery} from './authUI';\r\n\r\nclass Register extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uNameErr: '',\r\n            username: '',\r\n            pwErr: '',\r\n            password: '',\r\n            pwRepeatErr: '',\r\n            pwRepeat: '',\r\n            valid: false,\r\n            redirect: false\r\n        };\r\n        extendJQuery();\r\n    }\r\n    changeHandler = event => {\r\n        let nam = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[nam]: val});\r\n    };\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        /*\r\n            constraints für validation\r\n         */\r\n        const  valConstraints = {\r\n            username: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 3,\r\n                    tooShort: 'has to be at least 3 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                },\r\n                format: {\r\n                    pattern: new RegExp(/^\\w\\w*$/),\r\n                    message: 'not valid'\r\n                }\r\n            },\r\n            password: {\r\n                presence: true,\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            },\r\n            passwordRepeat: {\r\n                presence: true,\r\n                equality: \"password\",\r\n                length: {\r\n                    minimum: 8,\r\n                    tooShort: 'has to be at least 8 characters long',\r\n                    maximum: 30,\r\n                    tooLong: 'can only be 30 characters long'\r\n                }\r\n            }\r\n        };\r\n        /*\r\n            es wird validiert\r\n         */\r\n        const valResult = validate({\r\n            username: this.state.username,\r\n            password: this.state.password,\r\n            passwordRepeat: this.state.pwRepeat\r\n        },valConstraints);\r\n\r\n        if(typeof(valResult)!=\"undefined\"){\r\n\r\n            let uNameErr;\r\n            let pwErr;\r\n            let pwRepeatErr;\r\n\r\n            if(typeof(valResult.username)!=\"undefined\") {\r\n                uNameErr = valResult.username[0];\r\n            }else{\r\n                uNameErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.password)!=\"undefined\") {\r\n                pwErr = valResult.password[0];\r\n            }else{\r\n                pwErr = '';\r\n            }\r\n\r\n            if(typeof(valResult.passwordRepeat)!=\"undefined\") {\r\n                pwRepeatErr = valResult.passwordRepeat[0];\r\n            }else{\r\n                pwRepeatErr = '';\r\n            }\r\n\r\n            this.setState({\r\n                valid: false,\r\n                uNameErr: uNameErr,\r\n                pwErr: pwErr,\r\n                pwRepeatErr: pwRepeatErr\r\n            });\r\n\r\n        }else {\r\n            this.setState({\r\n                valid: true,\r\n                uNameErr: '',\r\n                pwErr: '',\r\n                pwRepeatErr: ''\r\n            });\r\n            /*\r\n                request to server\r\n             */\r\n            register(this.state.username,this.state.password).then(data => {\r\n                if(data.success){\r\n                    this.setState({\r\n                        valid: true,\r\n                        redirect: true\r\n                    });\r\n                }else {\r\n                    if (data.username !== undefined)\r\n                        this.setState({\r\n                            valid: false,\r\n                            uNameErr: data.username\r\n                        });\r\n                }\r\n                console.log(data);\r\n            });\r\n        }\r\n    };\r\n    uNameErr = () => {\r\n        if(this.state.uNameErr !== '')\r\n            return (\r\n                <ErrorMsg>\r\n                    {this.state.uNameErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwErr = () => {\r\n        if(this.state.pwErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    pwRepeatErr = () => {\r\n        if(this.state.pwRepeatErr !== '')\r\n            return(\r\n                <ErrorMsg>\r\n                    {this.state.pwRepeatErr}\r\n                </ErrorMsg>\r\n            )\r\n    };\r\n    render(){\r\n        /*\r\n            wenn registriert --> redirect\r\n         */\r\n        if(this.state.redirect){\r\n            //TODO redirect should work\r\n            setLoggedIn(true);\r\n            console.log('redirect');\r\n            // eslint-disable-next-line no-restricted-globals\r\n            location.reload();\r\n            //this.props.history.push(\"/chat\");\r\n            return(\r\n                <div>\r\n                    <div>redirect</div>\r\n                    <Redirect to=\"/chat\" />\r\n                </div>\r\n            )\r\n        }else {\r\n            return (\r\n                <div className=\"h-100\" style={{display: \"flex\"}}>\r\n                    <div className=\"col-sm-12 my-auto\">\r\n                        <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\r\n                            <h1>Registrieren</h1>\r\n                            <form onSubmit={this.submitHandler}>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"username\">Benutzername:</label>\r\n                                    {this.uNameErr()}\r\n                                    <input type=\"text\"\r\n                                           name=\"username\"\r\n                                           className=\"form-control\"\r\n                                           placeholder=\"Benutzernamen eingeben\"\r\n                                           onChange={this.changeHandler}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Passwort:</label>\r\n                                    {this.pwErr()}\r\n                                    <div id=\"psw-group\">\r\n                                        <input type=\"password\"\r\n                                               name=\"password\"\r\n                                               className=\"form-control\"\r\n                                               placeholder=\"Passwort eingeben\"\r\n                                               onChange={this.changeHandler}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\">Passwort wiederholen:</label>\r\n                                    {this.pwRepeatErr()}\r\n                                    <div id=\"psw-group-repeat\">\r\n                                        <input type=\"password\"\r\n                                               name=\"pwRepeat\"\r\n                                               className=\"form-control\"\r\n                                               placeholder=\"Passwort eingeben\"\r\n                                               onChange={this.changeHandler}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        $('#psw-group-repeat, #psw-group').pwToggle();\r\n    }\r\n}\r\n\r\nexport default Register;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\r\n\r\nexport const DeviceWidthObject = {\r\n\r\n    MobileSmall      : { max: 320, min: 0 },\r\n    MobileMedium     : { max: 375, min: 321 },\r\n    MobileLarge      : { max: 767, min: 376 },\r\n\r\n    Tablet           : { max: 991, min: 768 },\r\n\r\n    LaptopSmall      : { max: 1024, min: 992 },\r\n    LaptopLarge      : { max: 1440, min: 1025 },\r\n\r\n    LargerThanLaptop : { max: 2560, min: 1441 },\r\n    LargeScreenMax   : { max: 999999, min: 2561 }\r\n\r\n};\r\n\r\nexport const IdDeviceBreakpointsByWidth = {\r\n\r\n    laptop_max : 1440,\r\n    laptop_min : 992,\r\n    tablet_min : 768,\r\n    tablet_max : 991,\r\n    mobile_max : 767,\r\n    default_min : 768 // Unrecognized device\r\n};\r\n\r\nexport const IdMobileHeight = {\r\n    mobileLandscape_min : 320,\r\n    mobileLandscape_max : 425\r\n};\r\n\r\nexport const getWindowDimension = () => {\r\n\r\n    const width = window.innerWidth\r\n        || document.documentElement.clientWidth\r\n        || document.body.clientWidth;\r\n\r\n    const height = window.innerHeight\r\n        || document.documentElement.clientHeight\r\n        || document.body.clientHeight;\r\n\r\n    return {width, height}\r\n\r\n};\r\n\r\nexport const getDeviceTypeInfo = () => {\r\n    const { width, height } = getWindowDimension();\r\n    const buildDeviceDetails = {\r\n        deviceType: '',\r\n        deviceTypeVariant: '',\r\n        orientation: 'Portrait',\r\n        width,\r\n        height,\r\n        isFallback: false\r\n    };\r\n//  Edge case\r\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\r\n    if (hasEdgeCase) {\r\n        return hasEdgeCase\r\n    }\r\n    if (height < width) {\r\n        // Orientation is landscape\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        if (height <= IdMobileHeight.mobileLandscape_max) {\r\n            // Mobile (landscape)\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    height <= DeviceWidthObject[devc].max &&\r\n                    height >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            // Tablet (landscape)\r\n            buildDeviceDetails.deviceType = 'Tablet';\r\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\r\n        } else if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            // Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'Laptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc;\r\n                    break\r\n                }\r\n            }\r\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            // Larger than Laptop (landscape)\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\r\n\r\n            for (const devc in DeviceWidthObject) {\r\n                if (\r\n                    width <= DeviceWidthObject[devc].max &&\r\n                    width >= DeviceWidthObject[devc].min\r\n                ) {\r\n                    buildDeviceDetails.deviceTypeVariant = devc\r\n                    break\r\n                }\r\n            }\r\n        } else {\r\n\r\n            buildDeviceDetails.deviceType = 'Mobile';\r\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\r\n            buildDeviceDetails.isFallback = true\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    } else {\r\n        // Orientation is portrait\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        for (const devc in DeviceWidthObject) {\r\n            if (\r\n                width <= DeviceWidthObject[devc].max &&\r\n                width >= DeviceWidthObject[devc].min\r\n            ) {\r\n                buildDeviceDetails.deviceTypeVariant = devc;\r\n                break\r\n            }\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Laptop'\r\n        }\r\n\r\n        if (\r\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n            width >= IdDeviceBreakpointsByWidth.tablet_min\r\n        ) {\r\n            buildDeviceDetails.deviceType = 'Tablet'\r\n        }\r\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\r\n            buildDeviceDetails.deviceType = 'Mobile'\r\n        }\r\n\r\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\r\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\r\n        }\r\n\r\n        return buildDeviceDetails\r\n    }\r\n};\r\n\r\nconst handleExceptions = (buildDeviceDetails, width, height) => {\r\n    //  iPadPro\r\n    if (width === 1024 && height === 1366) {\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Portrait';\r\n\r\n        return buildDeviceDetails\r\n    } else if (width === 1366 && height === 1024) {\r\n        //  Edge case\r\n        buildDeviceDetails.deviceType = 'Tablet';\r\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\r\n        buildDeviceDetails.orientation = 'Landscape';\r\n\r\n        return buildDeviceDetails\r\n    }\r\n\r\n    return undefined\r\n};","import React from 'react'\r\nimport {\r\n    getWindowDimension,\r\n    IdDeviceBreakpointsByWidth,\r\n    IdMobileHeight\r\n} from './utilResponsive';\r\n\r\nconst { width, height } = getWindowDimension();\r\nconst initialState = { width, height };\r\n\r\nexport default class Responsive extends React.PureComponent {\r\n\r\n    state = initialState;\r\n    componentDidMount () {\r\n        window.addEventListener('resize', this.handleResize, false)\r\n    }\r\n    componentWillUnmount () {\r\n        window.removeEventListener('resize', this.handleResize, false)\r\n    }\r\n    render = () => {\r\n        const { children, displayIn } = this.props;\r\n        const { width, height } = this.state;\r\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\r\n        return (\r\n            <React.Fragment>\r\n                {shouldRenderChildren ? children : null}\r\n            </React.Fragment>\r\n        )\r\n    };\r\n    handleResize = () => {\r\n        const { width, height } = getWindowDimension();\r\n        this.setState({ width, height })\r\n    };\r\n    shouldRender = (display, width, height) => {\r\n        if (\r\n            display.indexOf('Laptop') !== -1 &&\r\n            width >= IdDeviceBreakpointsByWidth.laptop_min\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('Tablet') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\r\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\r\n        ) {\r\n            return true\r\n        }\r\n        // For mobile regardless of orientation\r\n        if (\r\n            display.indexOf('Mobile') !== -1 &&\r\n            width <= IdDeviceBreakpointsByWidth.mobile_max\r\n        ) {\r\n            return true\r\n        }\r\n        if (\r\n            display.indexOf('MobilePortrait') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height >= IdMobileHeight.mobileLandscape_max)\r\n        ) {\r\n            return true\r\n        }    return !!(\r\n            display.indexOf('MobileLandScape') !== -1 &&\r\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\r\n                height <= IdMobileHeight.mobileLandscape_min)\r\n        )\r\n    }\r\n}","import React,{Component,setGlobal} from \"reactn\";\r\nimport Responsive from \"../../responsive/Responsive\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nexport const infoHeaderCenter = {\r\n    none: 0,\r\n    normalChat: 1,\r\n    groupChat: 2\r\n};\r\n\r\nsetGlobal({\r\n    infoHeaderCenter: infoHeaderCenter.none,\r\n    data: null\r\n}).then();\r\n\r\nclass HeaderLeft extends Component{\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n        /*\r\n            renders number of new messages\r\n         */\r\n        const renderNewMsgNumber = () => {\r\n            if(this.props.newMessages > 0){\r\n                return (\r\n                    <div className=\"btnBack-number\">\r\n                        {this.props.newMessages}\r\n                    </div>\r\n                )\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const renderBtnBack = () => {\r\n            /*\r\n                only small screens\r\n             */\r\n            return (\r\n                <div className=\"float-left top-left\">\r\n                    <i id=\"btnBackToChatList\"\r\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\r\n                       onClick={() => {this.props.history.goBack()}}\r\n                    />\r\n                    {renderNewMsgNumber()}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        const renderChatInfo = () => {\r\n            /*\r\n                if there is a normal chat open, this info gets displayed\r\n             */\r\n            switch(this.global.infoHeaderCenter){\r\n\r\n                case infoHeaderCenter.normalChat:\r\n                    return (\r\n                        <div id=\"chat-info\" className=\"chat-info float-left top-center pt-2\">\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n\r\n                case infoHeaderCenter.groupChat:\r\n                    return(\r\n                        <div id=\"chat-info\" className=\"chat-info float-left top-center pt-2\">\r\n                            <h3 id=\"chat-info-name\">\r\n                                {this.global.ihcData.name}\r\n                            </h3>\r\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\r\n                                <i className=\"fas fa-info-circle fa-2x\"\r\n                                   data-toggle=\"tooltip\"\r\n                                   title=\"chat info\"\r\n                                />\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n\r\n                default:\r\n                    return(\r\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\r\n                        </Responsive>\r\n                    );\r\n            }\r\n        };\r\n\r\n        return(\r\n            <div>\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n                    {renderBtnBack()}\r\n                </Responsive>\r\n                {renderChatInfo()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(HeaderLeft);","let Colors = {};\r\nColors.names = {\r\n    aqua: \"#00ffff\",\r\n    black: \"#000000\",\r\n    blue: \"#0000ff\",\r\n    brown: \"#a52a2a\",\r\n    cyan: \"#00ffff\",\r\n    darkblue: \"#00008b\",\r\n    darkcyan: \"#008b8b\",\r\n    darkgrey: \"#a9a9a9\",\r\n    darkgreen: \"#006400\",\r\n    darkkhaki: \"#bdb76b\",\r\n    darkmagenta: \"#8b008b\",\r\n    darkolivegreen: \"#556b2f\",\r\n    darkorange: \"#ff8c00\",\r\n    darkorchid: \"#9932cc\",\r\n    darkred: \"#8b0000\",\r\n    darksalmon: \"#e9967a\",\r\n    darkviolet: \"#9400d3\",\r\n    fuchsia: \"#ff00ff\",\r\n    gold: \"#ffd700\",\r\n    green: \"#008000\",\r\n    indigo: \"#4b0082\",\r\n    khaki: \"#f0e68c\",\r\n    lightblue: \"#add8e6\",\r\n    lightgreen: \"#90ee90\",\r\n    lightgrey: \"#d3d3d3\",\r\n    lightpink: \"#ffb6c1\",\r\n    lime: \"#00ff00\",\r\n    magenta: \"#ff00ff\",\r\n    maroon: \"#800000\",\r\n    navy: \"#000080\",\r\n    olive: \"#808000\",\r\n    orange: \"#ffa500\",\r\n    pink: \"#ffc0cb\",\r\n    purple: \"#800080\",\r\n    violet: \"#800080\",\r\n    red: \"#ff0000\",\r\n    silver: \"#c0c0c0\"\r\n};\r\nColors.random = function() {\r\n    let result;\r\n    let count = 0;\r\n    for (let prop in this.names)\r\n        if (Math.random() < 1/++count)\r\n            result = prop;\r\n    return result;\r\n};\r\nexport default Colors;","\r\nexport default class BinSearchArray extends Array{\r\n\r\n    getIndex(key){\r\n\r\n        let left = 0;\r\n        let right = this.length-1;\r\n\r\n        while(left<=right){\r\n            let k= Math.floor((left+right)/2);\r\n            if(this[k].key === key)\r\n                return k;\r\n            else if(this[k].key < key)\r\n                left = k+1;\r\n            else //a[k]>v\r\n                right = k-1;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getNearestKey(key){\r\n        /*\r\n            besseren Algorithmus finden\r\n         */\r\n        let i;\r\n        ++key;\r\n\r\n        while((i = this.getIndex(--key)) === -1){\r\n            /*\r\n                wenn key 0 ist, wird vorne eingefügt\r\n             */\r\n            if(key === 0) return -1;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    get(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            return this[i].value;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    add(key,value){\r\n        /*\r\n            key darf noch nicht vorhanden sein\r\n         */\r\n        if(this.getIndex(key) === -1) {\r\n\r\n            this.splice(this.getNearestKey(key) + 1, 0, {\r\n                key: key,\r\n                value: value\r\n            });\r\n        }\r\n    }\r\n\r\n    remove(key){\r\n\r\n        let i = this.getIndex(key);\r\n\r\n        if(i !== -1)\r\n            this.splice(i,1);\r\n    }\r\n}","import Colors from \"../util/Color\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\n\r\nexport const UserErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    tempChat: 2,\r\n    userNotExisting: 3,\r\n    blocked: 4,\r\n    isSelf: 5\r\n};\r\n\r\nexport async function getUserNormalChat(uid){\r\n    /*\r\n            does the user exist & does normal chat exist\r\n         */\r\n    if(this.users.getIndex(uid) !== -1){\r\n        /*\r\n            does a normalChat exist at the user\r\n         */\r\n        if(this.users.get(uid).normalChat !== 0) {\r\n            return {\r\n                userExists: true,\r\n                //does the user exist in client\r\n                isUserSaved: true,\r\n                //does a normalChat exist for this user\r\n                chatExists: true,\r\n                //is user self blocked by this user\r\n                isUserBlocked: false,\r\n                //does a temporary chat exist\r\n                tempChat: false\r\n            };\r\n        }else{\r\n            /*\r\n                chat does not exist in server\r\n                it gets created\r\n             */\r\n            const user = this.users.get(uid);\r\n            this.temporaryChat.createNew(uid,user.username);\r\n\r\n            return {\r\n                userExists: true,\r\n                //does the user exist in client\r\n                isUserSaved: true,\r\n                //does a normalChat exist for this user\r\n                chatExists: false,\r\n                //is user self blocked by this user\r\n                isUserBlocked: false,\r\n                //does a temporary chat exist\r\n                tempChat: false\r\n            };\r\n        }\r\n        /*\r\n            does there exist a temporary chat with this user\r\n        */\r\n    }else if(this.temporaryChat.doesExist(uid)){\r\n        /*\r\n            user and chat does not exist in server\r\n         */\r\n        return {\r\n            userExists: true,\r\n            //does the user exist in client\r\n            isUserSaved: false,\r\n            //does a normalChat exist for this user\r\n            chatExists: false,\r\n            //is user self blocked by this user\r\n            isUserBlocked: false,\r\n            //does a temporary chat exist\r\n            tempChat: true\r\n        };\r\n    }else{\r\n        /*\r\n            request user from server\r\n         */\r\n        return  await this.temporaryChat.requestUser(uid);\r\n    }\r\n}\r\n\r\nexport default class User{\r\n\r\n    _uid;\r\n    _username;\r\n    _color;\r\n    _online;\r\n    //ids der chats des Users\r\n    _normalChat = 0;\r\n    //ids of the groupchats\r\n    _groupChats = new BinSearchArray();\r\n\r\n    constructor(uid,username,online) {\r\n        this.uid = uid;\r\n        this.username = username;\r\n        this.color = Colors.random();\r\n        this.online = online;\r\n    }\r\n    /*\r\n        groupChat is added\r\n     */\r\n    addGroupChat(gcid){\r\n        this.groupChats.add(gcid,gcid);\r\n    }\r\n\r\n    removeGroupChat(gcid){\r\n        this.groupChats.remove(gcid);\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get username() {\r\n        return this._username;\r\n    }\r\n\r\n    set username(value) {\r\n        this._username = value;\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n\r\n    get online() {\r\n        return this._online;\r\n    }\r\n\r\n    set online(value) {\r\n        this._online = value;\r\n    }\r\n\r\n    get normalChat() {\r\n        return this._normalChat;\r\n    }\r\n\r\n    set normalChat(value) {\r\n        this._normalChat = value;\r\n    }\r\n\r\n    get groupChats() {\r\n        return this._groupChats;\r\n    }\r\n\r\n    set groupChats(value) {\r\n        this._groupChats = value;\r\n    }\r\n}","import chatSocket from \"./chatSocket\";\r\n\r\nexport default class Message {\r\n\r\n    _mid;\r\n    _content;\r\n    _uid;\r\n    _date;\r\n    _chat;\r\n\r\n    constructor(mid,content,uid,chat,date = new Date(Date.now())) {\r\n        this.mid = mid;\r\n        this.content = content;\r\n        this.uid = uid;\r\n        this.date = date;\r\n        //type: object of Chat\r\n        this.chat = chat;\r\n    }\r\n\r\n    getChatViewDateString(){\r\n        /*\r\n            Wenn weniger als 1 Tag her: Uhrzeit\r\n         */\r\n        if(this.isDateToday()){\r\n\r\n            return 'heute ' + this.getTimeString();\r\n        }\r\n        /*\r\n            Wenn gestern: gestern\r\n         */\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern';\r\n        }\r\n        /*\r\n            sonst: Datum\r\n         */\r\n        else{\r\n            return this.getDateString();\r\n        }\r\n    }\r\n\r\n    getChatViewMsgString(){\r\n        let msgString = this.content;\r\n        /*\r\n            Wenn string länger als 18 Zeichen, wird verkürzt\r\n         */\r\n        if(msgString.length>18)\r\n            msgString = msgString.substr(0,18) + '...';\r\n        /*\r\n            wenn selbst geschrieben, steht Du: davor\r\n         */\r\n        if(this.uid === chatSocket.userSelf.uid)\r\n            return `Du: ${msgString}`;\r\n\r\n        else if(this.chat.type === 'normalchat')\r\n            return this.content;\r\n\r\n        else\r\n            return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\r\n\r\n    }\r\n\r\n    getMessageViewDateString(){\r\n        if(this.isDateToday()){\r\n\r\n            return this.getTimeString();\r\n        }\r\n        else if(this.isDateYesterday()){\r\n\r\n            return 'gestern ' + this.getTimeString();\r\n        }else{\r\n\r\n            return this.getDateString() + ' ' + this.getTimeString();\r\n        }\r\n    }\r\n\r\n    isDateToday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    isDateYesterday(){\r\n        const dateNow = new Date(Date.now());\r\n        return this.date.getDate() === dateNow.getDate() - 1 &&\r\n            this.date.getMonth() === dateNow.getMonth() &&\r\n            this.date.getFullYear() === dateNow.getFullYear();\r\n    }\r\n\r\n    getDateString(){\r\n        const d = this.date.getDate();\r\n        let ds;\r\n        if(d<10)\r\n            ds = '0'+d;\r\n        else\r\n            ds = d;\r\n        const m = this.date.getMonth();\r\n        let ms;\r\n        if(m+1<10)\r\n            ms = '0'+(m+1);\r\n        else\r\n            ms = m+1;\r\n        const y = this.date.getFullYear();\r\n\r\n        return `${ds}.${ms}.${y}`;\r\n    }\r\n\r\n    getTimeString(){\r\n        const h = this.date.getHours();\r\n        let hs;\r\n        if(h<10)\r\n            hs = '0'+h;\r\n        else\r\n            hs = h;\r\n        const m = this.date.getMinutes();\r\n        let ms;\r\n        if(m<10)\r\n            ms = '0'+m;\r\n        else\r\n            ms = m;\r\n\r\n        return `${hs}:${ms}`;\r\n    }\r\n    /*\r\n        es wird überprüft, ob date2 an einem anderen Tag war\r\n     */\r\n    isDifferentDay(date2){\r\n        return this.date.getDay() !== date2.getDay()\r\n            || this.date.getMonth() !== date2.getMonth()\r\n            || this.date.getFullYear() !== date2.getFullYear();\r\n    }\r\n\r\n    get mid() {\r\n        return this._mid;\r\n    }\r\n\r\n    set mid(value) {\r\n        this._mid = value;\r\n    }\r\n\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    set content(value) {\r\n        this._content = value;\r\n    }\r\n\r\n    get uid() {\r\n        return this._uid;\r\n    }\r\n\r\n    set uid(value) {\r\n        this._uid = value;\r\n    }\r\n\r\n    get date() {\r\n        return this._date;\r\n    }\r\n\r\n    set date(value) {\r\n        this._date = value;\r\n    }\r\n\r\n    get chat() {\r\n        return this._chat;\r\n    }\r\n\r\n    set chat(value) {\r\n        this._chat = value;\r\n    }\r\n}","export default class EventHandler{\r\n\r\n    _events;\r\n\r\n    constructor() {\r\n        this.events = new Map();\r\n    }\r\n\r\n    /*\r\n        event-handler wird hinzugefügt\r\n     */\r\n    on(event,fn){\r\n        /*\r\n            wenn event in Map vorhanden, wird event hinzugefügt\r\n         */\r\n        if(this.events.has(event))\r\n            this.events.get(event).push(fn);\r\n        /*\r\n            wenn event in map noch nicht vorhanden,\r\n            wird entry in map hinzugefügt\r\n         */\r\n        else\r\n            this.events.set(event,[fn]);\r\n    }\r\n    /*\r\n        event-handler wird entfernt\r\n     */\r\n    rm(event,fn){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            const e = this.events.get(event);\r\n            for(let i=0;i<e.length;i++)\r\n                //wenn element die gesuchte function, wird sie gelöscht\r\n                if(e[i] === fn)\r\n                    e.splice(i,1);\r\n        }\r\n    }\r\n    /*\r\n        alle registrierten functions eines events werden ausgelöst\r\n     */\r\n    trigger(event,...rest){\r\n        /*\r\n            wenn event existiert\r\n         */\r\n        if(this.events.has(event)){\r\n            /*\r\n                es werden alle functions aufgerufen\r\n             */\r\n            for(let i=0;i<this.events.get(event).length;i++)\r\n                this.events.get(event)[i](...rest);\r\n        }\r\n    }\r\n\r\n    get events() {\r\n        return this._events;\r\n    }\r\n\r\n    set events(value) {\r\n        this._events = value;\r\n    }\r\n}","import BinSearchArray from \"../util/BinSearch\";\r\nimport Message from \"./Message\";\r\nimport EventHandler from \"../util/Event\";\r\nimport chatSocket from \"./chatSocket\";\r\n\r\nclass Chat {\r\n\r\n    _isSelfPart;\r\n    _type;\r\n    _id;\r\n    _chatName;\r\n    _messages = new BinSearchArray();\r\n    _event = new EventHandler();\r\n    _hasNewMsg = false;\r\n    _unreadMessages = 0;\r\n\r\n    constructor(type, id,chatName) {\r\n        this.type = type;\r\n        this.id = id;\r\n        this.chatName = chatName;\r\n    }\r\n    /*\r\n        Nacrichten werden geladen\r\n     */\r\n    loadMessages(num){\r\n        const getLastMsgId = () => {\r\n            const msg = this.getLastMessage();\r\n            if(msg !== null)\r\n                return msg.mid;\r\n            return -1;\r\n        };\r\n        /*\r\n            event wird an server emitted,\r\n            aber nur wenn gerade nicht dieses event in Bearbeitung\r\n         */\r\n        chatSocket.socket.emit('load messages', {\r\n            chatType: this.type,\r\n            chatId: this.id,\r\n            lastMsgId: getLastMsgId(),\r\n            num: num\r\n        });\r\n    }\r\n    addLoadedMessages(data){\r\n        /*\r\n            es wird geschaut, ob schon oben angelangt\r\n         */\r\n        this.reachedTop = data.status === 'reached top';\r\n\r\n        const lMessages = data.messages;\r\n        for(let i=lMessages.length-1;i>=0;i--){\r\n            const lm = lMessages[i];\r\n            this.messages.add(lm.mid,new Message(lm.mid,lm.content,lm.uid,this,new Date(lm.date)));\r\n        }\r\n        /*\r\n            msg loaded wird getriggert\r\n         */\r\n        this.event.trigger('messages loaded');\r\n    }\r\n    /*\r\n        gibt die Nachricht, die am längsten zurück liegt, zurück\r\n     */\r\n    getLastMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[0].value;\r\n        return null;\r\n    }\r\n    /*\r\n        gibt die neueste Nachricht im chat zurück\r\n     */\r\n    getFirstMessage(){\r\n        if (this.messages.length !== 0)\r\n            return this.messages[this.messages.length - 1].value;\r\n        return null;\r\n    }\r\n    /*\r\n        neue Nachricht wird hinzugefügt\r\n     */\r\n    addMessage(uid,content,mid){\r\n        this.messages.add(mid,new Message(mid,content,uid,this,new Date(Date.now())));\r\n        this.event.trigger(\"new message\",uid);\r\n    }\r\n\r\n    get isSelfPart() {\r\n        return this._isSelfPart;\r\n    }\r\n\r\n    set isSelfPart(value) {\r\n        this._isSelfPart = value;\r\n    }\r\n\r\n    get type() {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get chatName() {\r\n        return this._chatName;\r\n    }\r\n\r\n    set chatName(value) {\r\n        this._chatName = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get hasNewMsg() {\r\n        return this._hasNewMsg;\r\n    }\r\n\r\n    set hasNewMsg(value) {\r\n        this._hasNewMsg = value;\r\n    }\r\n\r\n    get unreadMessages() {\r\n        return this._unreadMessages;\r\n    }\r\n\r\n    set unreadMessages(value) {\r\n        this._unreadMessages = value;\r\n    }\r\n}\r\n\r\nexport class NormalChat extends Chat{\r\n\r\n    _otherUser;\r\n    _isTyping = false;\r\n\r\n    constructor(id,chatName,uid) {\r\n        super('normalChat',id,chatName);\r\n        this.otherUser = uid;\r\n\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return [\r\n                {\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                }\r\n            ];\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.isTyping) {\r\n            const user = chatSocket.users.get(this.otherUser);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = true;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(uid === this.otherUser){\r\n            this.isTyping = false;\r\n            this.event.trigger(\"typeState changed\");\r\n        }\r\n    }\r\n\r\n    get otherUser() {\r\n        return this._otherUser;\r\n    }\r\n\r\n    set otherUser(value) {\r\n        this._otherUser = value;\r\n    }\r\n\r\n    get isTyping() {\r\n        return this._isTyping;\r\n    }\r\n\r\n    set isTyping(value) {\r\n        this._isTyping = value;\r\n    }\r\n}\r\nexport class GroupChat extends Chat{\r\n    //array with uids\r\n    _users = [];\r\n    //Array mit uids von den usern, die gerade schreibem\r\n    _usersTyping = [];\r\n\r\n    constructor(id,chatName,uids) {\r\n        super('groupChat',id,chatName);\r\n        this.users = uids;\r\n    }\r\n\r\n    getUsersTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n\r\n            let rc = [];\r\n            for(let i=0;i<this.usersTyping.length;i++){\r\n                const user = chatSocket.users.get(this.usersTyping[i]);\r\n                rc.push({\r\n                    uid: user.uid,\r\n                    username: user.username\r\n                });\r\n            }\r\n            return rc;\r\n        }\r\n        return [];\r\n    }\r\n    /*\r\n        gibt den user zurück, der am neuestem schriebt\r\n     */\r\n    getLatestUserTyping(){\r\n        if(this.usersTyping.length > 0) {\r\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\r\n            return {\r\n                uid: user.uid,\r\n                username: user.username\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    /*\r\n        is called when a user started typing\r\n     */\r\n    startedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(!this.isTyping(uid)){\r\n                /*\r\n                    the user is added to the currently typing users\r\n                 */\r\n                this.usersTyping.push(uid);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        is called when a user stopped typing\r\n     */\r\n    stoppedTyping(uid){\r\n        if(this.isMember(uid)){\r\n            if(this.isTyping(uid)){\r\n                /*\r\n                    user is removed from the array of currently typing users\r\n                 */\r\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\r\n                this.event.trigger(\"typeState changed\");\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        returns true if the uid is member of the chat and not self\r\n     */\r\n    isMember(uid){\r\n        if(uid === chatSocket.userSelf.uid)\r\n            return false;\r\n        return this.users.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns true if the user is currently typing\r\n     */\r\n    isTyping(uid){\r\n        return this.usersTyping.find(e => e === uid);\r\n    }\r\n    /*\r\n        returns the index of a currently typing user\r\n     */\r\n    getIndexOfTyping(uid){\r\n        return this.usersTyping.findIndex(e => e === uid);\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get usersTyping() {\r\n        return this._usersTyping;\r\n    }\r\n\r\n    set usersTyping(value) {\r\n        this._usersTyping = value;\r\n    }\r\n}","import {NormalChat} from \"./Chat\";\r\nimport chatSocket from \"./chatSocket\";\r\nimport User from \"./User\";\r\nimport Message from \"./Message\";\r\n\r\nexport default class TempChatLoader{\r\n\r\n    _isShown = false;\r\n    _chatNow;\r\n    /*\r\n        a new temporary chat gets created.\r\n        parameters uid and username required\r\n     */\r\n    createNew(uid,username){\r\n        this.chatNow = new NormalChat(0, username, uid);\r\n    }\r\n    /*\r\n        user gets requested\r\n     */\r\n    async requestUser(uid){\r\n\r\n        return new Promise((resolve, reject) =>  {\r\n            /*\r\n                the userInfo gets requested\r\n             */\r\n            chatSocket.socket.emit('getUserInfo',uid,(res,error) => {\r\n                /*\r\n                    if success, the temporary chat gets created\r\n                 */\r\n                if(!error){\r\n                    /*\r\n                        if user does exist and user is not blocked, the temporary chat is created\r\n                     */\r\n                    if(res.userExists && !res.blocked) {\r\n\r\n                        this.createNew(uid,res.username);\r\n\r\n                        resolve({\r\n                            userExists: true,\r\n                            //does the user exist in client\r\n                            isUserSaved: false,\r\n                            //does a normalChat exist for this user\r\n                            chatExists: false,\r\n                            //is user self blocked by this user\r\n                            isUserBlocked: false,\r\n                            //does a temporary chat exist\r\n                            tempChat: true\r\n                        });\r\n                    }else{\r\n                        resolve({\r\n                            userExists: res.userExists,\r\n                            //does the user exist in client\r\n                            isUserSaved: false,\r\n                            //does a normalChat exist for this user\r\n                            chatExists: false,\r\n                            //is user self blocked by this user\r\n                            isUserBlocked: res.blocked,\r\n                            //does a temporary chat exist\r\n                            tempChat: false\r\n                        });\r\n                    }\r\n                /*\r\n                    else false is returned\r\n                 */\r\n                }else{\r\n\r\n                    resolve({\r\n                        userExists: false,\r\n                        //does the user exist in client\r\n                        isUserSaved: false,\r\n                        //does a normalChat exist for this user\r\n                        chatExists: false,\r\n                        //is user self blocked by this user\r\n                        isUserBlocked: false,\r\n                        //does a temporary chat exist\r\n                        tempChat: false\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /*\r\n        is the current tempChat already the one with this uid?\r\n     */\r\n    doesExist(uid){\r\n        if(this.chatNow === undefined)\r\n            return false;\r\n        return this.chatNow.otherUser === uid;\r\n    }\r\n    /*\r\n        tempChat gets shown\r\n     */\r\n    show(){\r\n        this.isShown = true;\r\n        chatSocket.event.trigger(\"tempChat shown\");\r\n    }\r\n\r\n    update(){\r\n        chatSocket.event.trigger(\"tempChat updated\");\r\n    }\r\n\r\n    hide(){\r\n        this.isShown = false;\r\n        chatSocket.event.trigger(\"tempChat hidden\");\r\n    }\r\n    /*\r\n        a new normalChat is created out of the current tempChat\r\n     */\r\n    async createNewNormalChat(message){\r\n\r\n        return new Promise((resolve,reject) => {\r\n            /*\r\n                the request gets sent to the server\r\n             */\r\n            const otherUid = this.chatNow.otherUser;\r\n            const otherUsername = this.chatNow.chatName;\r\n\r\n            chatSocket.socket.emit('new normalChat',{\r\n                uid: otherUid,\r\n                username: otherUsername,\r\n                message: message\r\n            },res => {\r\n                /*\r\n                    the user and the chat get created client-side\r\n                 */\r\n                if(chatSocket.users.getIndex(otherUid) === -1){\r\n                    chatSocket.users.add(otherUid,new User(otherUid,otherUsername,res.online));\r\n                }\r\n                const otherUser = chatSocket.users.get(otherUid);\r\n                otherUser.online = res.online;\r\n\r\n                const newChat = new NormalChat(res.ncid,otherUsername,otherUid);\r\n                /*\r\n                    chat gets added to user\r\n                 */\r\n                otherUser.normalChat = newChat.id;\r\n                /*\r\n                    chat is added in binsearchArray\r\n                 */\r\n                chatSocket.chats.normal.add(res.ncid,newChat);\r\n                /*\r\n                    message is added to chat\r\n                 */\r\n                newChat.messages.add(res.mid,new Message(res.mid,message,chatSocket.userSelf.uid,newChat,new Date(Date.now())));\r\n\r\n                //args: chat\r\n                chatSocket.event.trigger('new chat',newChat);\r\n                /*\r\n                    currentChat gets changed\r\n                 */\r\n                chatSocket.setCurrentChat(newChat);\r\n                this.hide();\r\n\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    get isShown() {\r\n        return this._isShown;\r\n    }\r\n\r\n    set isShown(value) {\r\n        this._isShown = value;\r\n    }\r\n\r\n    get chatNow() {\r\n        return this._chatNow;\r\n    }\r\n\r\n    set chatNow(value) {\r\n        this._chatNow = value;\r\n    }\r\n}\r\n\r\n","import io from 'socket.io-client';\r\nimport {uid, username} from \"../Auth/Auth\";\r\nimport User from \"./User\";\r\nimport BinSearchArray from \"../util/BinSearch\";\r\nimport {GroupChat, NormalChat} from \"./Chat\";\r\nimport Message from \"./Message\";\r\nimport EventHandler from \"../util/Event\";\r\nimport TempChatLoader from \"./tempChatLoader\";\r\n\r\nclass ChatSocket{\r\n\r\n    _socket;\r\n    _userSelf;\r\n    _users = new BinSearchArray();\r\n    _chats = {\r\n        normal: new BinSearchArray(),\r\n        group: new BinSearchArray()\r\n    };\r\n    _event = new EventHandler();\r\n    _finishedLoading = false;\r\n    _currentChat = {\r\n        type: '',\r\n        id: 0\r\n    };\r\n    /*\r\n        normalchat not saved in the database\r\n     */\r\n    _temporaryChat = new TempChatLoader();\r\n    _initCalled = false;\r\n\r\n    constructor() {\r\n        /*\r\n            user-Object is created\r\n         */\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n    }\r\n    async init(){\r\n\r\n        this.initCalled = true;\r\n\r\n        this.userSelf = new User(uid,username);\r\n\r\n        this.userInfo = {\r\n            uid: uid,\r\n            username: username\r\n        };\r\n        \r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'text/plain'\r\n            }\r\n        };\r\n        const response = await fetch('/IP', config);\r\n\r\n        let IP_SERVER = '';\r\n\r\n        if (response.ok) {\r\n\r\n            console.log(await(response.text()));\r\n            IP_SERVER = '172.16.1.149';\r\n        }\r\n\r\n        this.socket = io('http://' + IP_SERVER + ':3002');\r\n\r\n        /*\r\n            userInfo wird an client gesendet\r\n         */\r\n        this.socket.emit('auth', uid, username);\r\n\r\n        this.socket.on('all chats', data => {\r\n            this.initChats(data);\r\n        });\r\n        // wenn messages geladen\r\n        this.socket.on('messages', data => {\r\n            /*\r\n                gets chat of msg\r\n                loads messages of this chat\r\n             */\r\n            const chat = this.getChat(data.chatType,data.chatId);\r\n            if(chat !== undefined)\r\n                chat.addLoadedMessages(data);\r\n        });\r\n\r\n        /*\r\n            msg-handler\r\n         */\r\n        this.socket.on('chat message',data => {\r\n            /*\r\n                gets chat of msg\r\n                adds this message to chat\r\n            */\r\n            const chat = this.getChat(data.type,data.id);\r\n            if(chat !== null) {\r\n                const isCurrentChat = this.isCurrentChat(chat.type, chat.id);\r\n                chat.addMessage(data.uid, data.content, data.mid);\r\n                /*\r\n                    hasNewMsg gets updated\r\n                    if current chat --> false\r\n                 */\r\n                chat.hasNewMsg = !isCurrentChat;\r\n                /*\r\n                    if chat is not currentChat, unreadMessages gets incremented\r\n                 */\r\n                chat.unreadMessages ++;\r\n                /*\r\n                    new message event is triggered\r\n                 */\r\n                this.event.trigger('new message', data.type, data.id);\r\n            }\r\n        });\r\n        /*\r\n            started typing\r\n         */\r\n        this.socket.on('started typing',data => {\r\n            const chat = this.getChat(data.type,data.id);\r\n            chat.startedTyping(data.uid);\r\n        });\r\n        /*\r\n            stopped typing\r\n         */\r\n        this.socket.on('stopped typing',data => {\r\n            const chat = this.getChat(data.type,data.id);\r\n            chat.stoppedTyping(data.uid);\r\n        });\r\n        /*\r\n            the result of the search in new chat\r\n         */\r\n        this.socket.on('users-noChat',data => {\r\n            chatSocket.event.trigger('users-noChat',data);\r\n        });\r\n        /*\r\n            the user has been added to a new chat\r\n         */\r\n        this.socket.on(\"new chat\",data => {\r\n            this.addNewChat(data);\r\n        });\r\n        /*\r\n            Bei disconnect wird Seite neu geladen\r\n         */\r\n        this.socket.on('disconnect',() => {\r\n            setTimeout(function() {\r\n                alert('Verbindung verloren! Seite wird neu geladen');\r\n                // eslint-disable-next-line no-restricted-globals\r\n                location.reload();\r\n            },1000);\r\n        });\r\n    }\r\n\r\n    initChats(data){\r\n\r\n        for(let i=0;i<data.length;i++){\r\n\r\n            if(data[i].type === 'normalChat'){\r\n\r\n                this.addNewNormalChat(data[i]);\r\n            }\r\n            else if(data[i].type === 'groupChat'){\r\n\r\n                this.addNewGroupChat(data[i]);\r\n            }\r\n        }\r\n        this.finishedLoading = true;\r\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\r\n    }\r\n\r\n    getChatArraySortedByDate(){\r\n\r\n        const getMessageTime = chat => {\r\n            const c = chat.lastMessage;\r\n            if(c !== null)\r\n                return c.date.getTime();\r\n            return new Date(0).getTime();\r\n        };\r\n\r\n        const getMaxDate = (chats,iFrom) => {\r\n            let max = iFrom;\r\n            for(let i = iFrom+1;i<chats.length;i++){\r\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\r\n                    max = i;\r\n            }\r\n            return max;\r\n        };\r\n        const swap = (items, firstIndex, secondIndex) => {\r\n            let temp = items[firstIndex];\r\n            items[firstIndex] = items[secondIndex];\r\n            items[secondIndex] = temp;\r\n        };\r\n        /*\r\n            Array wird geklont\r\n         */\r\n        const cloneArr = arr => {\r\n            const clone = new Array(arr.length);\r\n            for(let i=0;i<arr.length;i++){\r\n                const chat = arr[i].value;\r\n                let lastMessage;\r\n                if(chat.messages.length === 0){\r\n                    lastMessage = null;\r\n                }else{\r\n                    const lm = chat.messages[chat.messages.length - 1].value;\r\n                    lastMessage = {\r\n                        date: lm.date\r\n                    };\r\n                }\r\n                clone[i] = {\r\n                    type: chat.type,\r\n                    id: chat.id,\r\n                    chatName: chat.chatName,\r\n                    lastMessage: lastMessage\r\n                };\r\n            }\r\n            return clone;\r\n        };\r\n        /*\r\n            es wird ein sortiertes Array zurückgegeben\r\n         */\r\n        const getSorted = chats => {\r\n            //Array wird erzeugt\r\n            const sorted = cloneArr(chats);\r\n            /*\r\n                es wird immer das höchste eingefügt, um Array zu sortieren\r\n             */\r\n            for(let i=0;i<sorted.length-1;i++){\r\n                let max = getMaxDate(sorted,i);\r\n                swap(sorted,i,max);\r\n            }\r\n            return sorted;\r\n        };\r\n        /*\r\n            Arrays werden gemerged\r\n         */\r\n        const mergeArr = (arr1,arr2) => {\r\n\r\n            const merged = new Array(arr1.length + arr2.length);\r\n            let p1 = 0;\r\n            let p2 = 0;\r\n            for(let i=0;i<merged.length;i++){\r\n                if(! (p2 < arr2.length)){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else if (! (p1 < arr1.length)){\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\r\n                    merged[i] = arr1[p1];\r\n                    p1++;\r\n                }else{\r\n                    merged[i] = arr2[p2];\r\n                    p2++;\r\n                }\r\n            }\r\n            return merged;\r\n        };\r\n        const ncSorted = getSorted(this.chats.normal);\r\n        const gcSorted = getSorted(this.chats.group);\r\n\r\n        return mergeArr(ncSorted, gcSorted);\r\n    }\r\n\r\n    getChat(type,id){\r\n        /*\r\n            type can be:\r\n                normalChat\r\n                tempChat\r\n                groupChat\r\n         */\r\n        if(type === 'normalChat')\r\n            return this.chats.normal.get(id);\r\n        else if(type === 'tempChat') {\r\n            return this.temporaryChat.chatNow;\r\n        }\r\n        else if(type === 'groupChat')\r\n            return this.chats.group.get(id);\r\n    }\r\n\r\n    isCurrentChat(type,id){\r\n        return this.currentChat.type === type && this.currentChat.id === id;\r\n    };\r\n\r\n    async userExists(uid){\r\n\r\n        /*\r\n            does the user exist & does normal chat exist\r\n         */\r\n        if(this.users.getIndex(uid) !== -1){\r\n            /*\r\n                does a normalChat exist at the user\r\n             */\r\n            if(this.users.get(uid).normalChat !== 0) {\r\n                return {\r\n                    userExists: true,\r\n                    //does the user exist in client\r\n                    isUserSaved: true,\r\n                    //does a normalChat exist for this user\r\n                    chatExists: true,\r\n                    //is user self blocked by this user\r\n                    isUserBlocked: false,\r\n                    //does a temporary chat exist\r\n                    tempChat: false\r\n                };\r\n            }else{\r\n                /*\r\n                    chat does not exist in server\r\n                    it gets created\r\n                 */\r\n                const user = this.users.get(uid);\r\n                this.temporaryChat.createNew(uid,user.username);\r\n\r\n                return {\r\n                    userExists: true,\r\n                    //does the user exist in client\r\n                    isUserSaved: true,\r\n                    //does a normalChat exist for this user\r\n                    chatExists: false,\r\n                    //is user self blocked by this user\r\n                    isUserBlocked: false,\r\n                    //does a temporary chat exist\r\n                    tempChat: false\r\n                };\r\n            }\r\n        /*\r\n            does there exist a temporary chat with this user\r\n        */\r\n        }else if(this.temporaryChat.doesExist(uid)){\r\n            /*\r\n                user and chat does not exist in server\r\n             */\r\n            return {\r\n                userExists: true,\r\n                //does the user exist in client\r\n                isUserSaved: false,\r\n                //does a normalChat exist for this user\r\n                chatExists: false,\r\n                //is user self blocked by this user\r\n                isUserBlocked: false,\r\n                //does a temporary chat exist\r\n                tempChat: true\r\n            };\r\n        }else{\r\n            /*\r\n                request user from server\r\n             */\r\n            return  await this.temporaryChat.requestUser(uid);\r\n        }\r\n    }\r\n\r\n    setCurrentChat(newChat){\r\n        /*\r\n            if chat is null, no chat will be selected:\r\n                type: '', id: 0\r\n\r\n            changes only if something has changed --> otherwise endless loop\r\n         */\r\n        if(newChat === null){\r\n            /*\r\n                check if something has been changed\r\n             */\r\n            if (this.currentChat.type !== '' ||\r\n                this.currentChat.id !== 0) {\r\n\r\n                this.currentChat = {\r\n                    type: '',\r\n                    id: 0\r\n                };\r\n                this.event.trigger('currentChat changed', null);\r\n            }\r\n\r\n        } else if(newChat.type === 'tempChat' && this.currentChat.type !== 'tempChat'){\r\n            this.currentChat = {\r\n                type: 'tempChat',\r\n                id: 0\r\n            };\r\n\r\n            this.socket.emit('change chat', null);\r\n\r\n            this.event.trigger('currentChat changed', newChat);\r\n        }\r\n        else{\r\n            if(newChat.type !== '' && newChat.id !== 0) {\r\n                /*\r\n                   if something changed, currentChat gets updated\r\n                 */\r\n                if (this.currentChat.type !== newChat.type ||\r\n                    this.currentChat.id !== newChat.id) {\r\n\r\n                    const chat = this.getChat(newChat.type, newChat.id);\r\n                    chat.hasNewMsg = false;\r\n                    /*\r\n                        unreadMessages gets set to 0\r\n                     */\r\n                    chat.unreadMessages = 0;\r\n                    this.currentChat = newChat;\r\n\r\n                    this.socket.emit('change chat', {\r\n                        type: this.currentChat.type,\r\n                        id: this.currentChat.id\r\n                    });\r\n\r\n                    //console.log(this.currentChat);\r\n\r\n                    this.event.trigger('currentChat changed', newChat);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /*\r\n        returns number of new messages\r\n     */\r\n    getNumberNewMessages(){\r\n\r\n        let newMessages = 0;\r\n\r\n        for(let i=0;i<this.chats.normal.length;i++){\r\n            if(this.chats.normal[i].value.hasNewMsg)\r\n                newMessages ++;\r\n        }\r\n\r\n        for(let i=0;i<this.chats.group.length;i++){\r\n            if(this.chats.group[i].value.hasNewMsg)\r\n                newMessages ++;\r\n        }\r\n        return newMessages;\r\n    }\r\n    /*\r\n        a new chat gets added\r\n     */\r\n    addNewChat(data){\r\n\r\n        let newChat;\r\n\r\n        if(data.type === 'normalChat'){\r\n            /*\r\n                new normalChat gets created\r\n             */\r\n            newChat = this.addNewNormalChat(data);\r\n\r\n        }else if(data.type === 'groupChat'){\r\n\r\n            newChat = this.addNewGroupChat((data));\r\n        }\r\n        newChat.unreadMessages = 1;\r\n        /*\r\n            event gets triggered\r\n         */\r\n        chatSocket.event.trigger('new chat',newChat);\r\n    }\r\n    /*\r\n        a new normalChat gets added\r\n     */\r\n    addNewNormalChat(data){\r\n        /*\r\n            check if the other user does already exist\r\n                if not --> gets created\r\n         */\r\n        let otherUser;\r\n        if(this.users.getIndex(data.members[0].uid) === -1){\r\n            otherUser = new User(data.members[0].uid,data.members[0].username,data.members[0].online);\r\n            this.users.add(otherUser.uid,otherUser);\r\n        }else{\r\n            otherUser = this.users.get(data.members[0].uid);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat = new NormalChat(data.id,data.chatName,otherUser.uid);\r\n        /*\r\n            normalChat is set at other user\r\n         */\r\n        otherUser.normalChat = newChat.id;\r\n        /*\r\n            first message is initialized\r\n         */\r\n        const message = data.firstMessage;\r\n        /*\r\n            if message exists it gets added to the chat\r\n         */\r\n        if(!message.empty)\r\n            newChat.messages.add(message.mid,new Message(message.mid,message.content,message.uid,newChat,new Date(message.date)));\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.normal.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n    /*\r\n        a new groupChat gets added\r\n     */\r\n    addNewGroupChat(data){\r\n        /*\r\n            check which do not exist already --> get added\r\n         */\r\n        const members = [];\r\n\r\n        for(let i=0;i<data.members.length;i++) {\r\n\r\n            const member = data.members[i];\r\n            /*\r\n                does the user already exist?\r\n             */\r\n            let user;\r\n            if (this.users.getIndex(member.uid) === -1) {\r\n                user = new User(member.uid, member.username, member.online);\r\n                this.users.add(user.uid, user);\r\n            } else {\r\n                user = this.users.get(member.uid);\r\n            }\r\n            /*\r\n                member gets added\r\n             */\r\n            members.push(user.uid);\r\n            /*\r\n                chat is added at user\r\n             */\r\n            user.addGroupChat(data.id);\r\n        }\r\n        /*\r\n            new chat gets created\r\n         */\r\n        const newChat = new GroupChat(data.id,data.chatName,members);\r\n        /*\r\n            first message is initialized\r\n         */\r\n        const message = data.firstMessage;\r\n        /*\r\n            if message exists it gets added to the chat\r\n         */\r\n        if(!message.empty)\r\n            newChat.messages.add(message.mid,new Message(message.mid,message.content,message.uid,newChat,new Date(message.date)));\r\n        /*\r\n            new chat gets added to binSearchArray\r\n         */\r\n        this.chats.group.add(data.id,newChat);\r\n\r\n        return newChat;\r\n    }\r\n\r\n    get socket() {\r\n        return this._socket;\r\n    }\r\n\r\n    set socket(value) {\r\n        this._socket = value;\r\n    }\r\n\r\n    get userSelf() {\r\n        return this._userSelf;\r\n    }\r\n\r\n    set userSelf(value) {\r\n        this._userSelf = value;\r\n    }\r\n\r\n    get users() {\r\n        return this._users;\r\n    }\r\n\r\n    set users(value) {\r\n        this._users = value;\r\n    }\r\n\r\n    get chats() {\r\n        return this._chats;\r\n    }\r\n\r\n    set chats(value) {\r\n        this._chats = value;\r\n    }\r\n\r\n    get event() {\r\n        return this._event;\r\n    }\r\n\r\n    set event(value) {\r\n        this._event = value;\r\n    }\r\n\r\n    get finishedLoading() {\r\n        return this._finishedLoading;\r\n    }\r\n\r\n    set finishedLoading(value) {\r\n        this._finishedLoading = value;\r\n    }\r\n\r\n    get currentChat() {\r\n        return this._currentChat;\r\n    }\r\n\r\n    set currentChat(value) {\r\n        this._currentChat = value;\r\n    }\r\n\r\n    get temporaryChat() {\r\n        return this._temporaryChat;\r\n    }\r\n\r\n    set temporaryChat(value) {\r\n        this._temporaryChat = value;\r\n    }\r\n\r\n    get initCalled() {\r\n        return this._initCalled;\r\n    }\r\n\r\n    set initCalled(value) {\r\n        this._initCalled = value;\r\n    }\r\n}\r\n\r\nlet chatSocket = new ChatSocket();\r\n\r\nexport default chatSocket;\r\n","import React,{Component} from \"react\";\r\nimport {username} from \"../../Auth/Auth\";\r\nimport $ from 'jquery';\r\nimport HeaderLeft from \"./HeaderLeft\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nclass Header extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: username,\r\n            checkBoxClicked: false\r\n        };\r\n    }\r\n    clickCheckBox = event => {\r\n        if(this.state.checkBoxClicked)\r\n            event.stopPropagation();\r\n        else {\r\n            setTimeout(() => {\r\n                this.setState(state => ({\r\n                    checkBoxClicked: true\r\n                }));\r\n            }, 20);\r\n        }\r\n    };\r\n    clickDocument = event => {\r\n        if (this.state.checkBoxClicked)\r\n            this.changeChecked(event);\r\n    };\r\n    changeChecked = event => {\r\n        this.setState(state => ({\r\n            checkBoxClicked: !state.checkBoxClicked\r\n        }));\r\n    };\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return (\r\n            <div className=\"container-top\">\r\n\r\n                <HeaderLeft\r\n                    newMessages={this.props.headerLeft.newMessages}\r\n                />\r\n\r\n                <div id=\"top-right\" className=\"top-right\" onClick={this.clickCheckBox}>\r\n\r\n                    <div className=\"top-right-left\">\r\n\r\n                    </div>\r\n\r\n                    <input type=\"checkbox\"\r\n                           id=\"btnControlTopRight\"\r\n                           checked={this.state.checkBoxClicked}\r\n                           onChange={this.changeChecked}\r\n                    />\r\n                    <label className=\"button-top-right\"\r\n                           htmlFor=\"btnControlTopRight\">\r\n\r\n                        <div className=\"top-right-center\">\r\n                            <div className=\"d-only-when-small\">\r\n                                <i  id=\"user-info\"\r\n                                    className=\"fas fa-user fa-2x user-icon\"\r\n                                    data-toggle=\"tooltip\"\r\n                                    title=\"Benutzer-Info\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"d-only-when-big top-2right\">\r\n\r\n                                <Link to={pathname + \"/userInfo/\" + chatSocket.userSelf.uid}>\r\n                                    <h4 id=\"username\"\r\n                                        className=\"p-2 username\"\r\n                                        data-toggle=\"tooltip\"\r\n                                        title=\"Benutzer-Info\"\r\n                                    >\r\n                                            {this.state.username}\r\n                                    </h4>\r\n                                </Link>\r\n                                <div className=\"float-right\">\r\n                                    <Link to={pathname + \"/settings\"}>\r\n                                        <i className=\"fas fa-user-cog fa-2x\"\r\n                                           data-toggle=\"tooltip\"\r\n                                           title=\"Einstellungen\"\r\n                                        />\r\n                                    </Link>\r\n                                    &nbsp;\r\n                                    <i id=\"user-logout\"\r\n                                       className=\"fas fa-sign-out-alt fa-2x logout\"\r\n                                       data-toggle=\"tooltip\"\r\n                                       title=\"logout\"\r\n                                       onClick={this.props.logout}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        $('[data-toggle=\"tooltip\"]').tooltip();\r\n        document.addEventListener('click',this.clickDocument,false);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click',this.clickDocument,false);\r\n    }\r\n\r\n}\r\nexport default withRouter(Header);","import React,{Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\n\r\nclass ChatSearchBox extends Component{\r\n\r\n    searchChanged = event => {\r\n        this.props.onSearch(event.target.value);\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        return(\r\n            <div className=\"chat-container-top border rounded mb-2\">\r\n                <div className=\"chat-select-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chat-search\"\r\n                        className=\"chat-search\"\r\n                        placeholder=\"Chat suchen\"\r\n                        onChange={this.searchChanged}\r\n                    />\r\n                    <Link to={pathname + \"/newChat\"}>\r\n                        <button id=\"btn-newChat\"\r\n                                className=\"btn-newChat\"\r\n                        >\r\n                            <i className=\"fas fa-plus fa-lg\" />\r\n                        </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(ChatSearchBox);","import React,{Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class ChatItem extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            unreadMessages: 0,\r\n            lastMsg: undefined,\r\n            typeMsg: ''\r\n        }\r\n    }\r\n\r\n    isSelected = () => {\r\n        return this.props.id === chatSocket.currentChat.id && this.props.type === chatSocket.currentChat.type;\r\n    };\r\n    /*\r\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\r\n        um die typeMsg zu aktualisieren\r\n     */\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        let typeMsg = '';\r\n        /*\r\n            wenn latestuserTyping = null, schreibt gerade keiner\r\n         */\r\n        const userTyping = chat.getLatestUserTyping();\r\n        if(userTyping !== null){\r\n            typeMsg = userTyping.username + \" schreibt...\";\r\n        }\r\n        //state wird aktualisiert\r\n        this.setState({\r\n            typeMsg: typeMsg\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n\r\n        const lastMsg = chat.getFirstMessage();\r\n\r\n        const renderUnreadMsg = () => {\r\n            if(this.state.unreadMessages === 0)\r\n                return null;\r\n            else\r\n                return(\r\n                    <div className=\"newMsg-number\">\r\n                        {/*TODO unreadMessages do not get incremented the first time\r\n                        */}\r\n                        {this.state.unreadMessages}\r\n                    </div>\r\n                );\r\n        };\r\n        /*\r\n            in der unteren Hälfte wird angezeigt wer schreibt\r\n            schreibt keiner, wird letzte Nachricht angezeigt\r\n         */\r\n        const renderLowerHalf = () => {\r\n            if(this.state.typeMsg === '')\r\n                return (\r\n                    <div className=\"w-100 lastMsg\">\r\n                        {renderMsg()}\r\n                        {renderDate()}\r\n                    </div>\r\n                );\r\n            else{\r\n                return (\r\n                    <div className=\"w-100 typeMsg\">\r\n                        {this.state.typeMsg}\r\n                    </div>\r\n                );\r\n            }\r\n        };\r\n\r\n        const renderMsg = () => {\r\n            if(lastMsg)\r\n                return(\r\n                    <span>\r\n                        {lastMsg.getChatViewMsgString()}\r\n                    </span>\r\n                );\r\n            else\r\n                return(\r\n                    <span>\r\n                        Noch keine Nachrichten vorhanden\r\n                    </span>\r\n                );\r\n        };\r\n\r\n        const renderDate = () => {\r\n            if(lastMsg)\r\n                return(\r\n                    <div className=\"lastMsg-date\">\r\n                        {lastMsg.getChatViewDateString()}\r\n                    </div>\r\n                );\r\n            else\r\n                return null;\r\n        };\r\n\r\n        const getLink = () => {\r\n            if(this.props.type === 'normalChat'){\r\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\r\n            }else if(this.props.type === 'groupChat'){\r\n                return '/chat/group/' + this.props.id;\r\n            }else if(this.props.type === 'tempChat'){\r\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\r\n            }\r\n        };\r\n\r\n        return(\r\n            <li key={this.props._key_}\r\n                className={\"list-group-item p-1\" + (this.isSelected() ? \" selected \" : \"\")}\r\n            >\r\n                <Link to={getLink()}>\r\n                    <div className=\"w-100\">\r\n                        <strong>\r\n                            {this.props.name}\r\n                        </strong>\r\n                        {renderUnreadMsg()}\r\n                    </div>\r\n                    {renderLowerHalf()}\r\n                </Link>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    newMessage = uid => {\r\n        /*\r\n            wenn chat nicht selected, wird newMessages inkrmentiert\r\n         */\r\n        if(!this.isSelected()) {\r\n            this.setState(state => ({\r\n                unreadMessages: state.unreadMessages + 1\r\n            }));\r\n        }\r\n        /*\r\n            chat wird nach oben gereiht\r\n         */\r\n        this.props.toTop(this.props._key_);\r\n    };\r\n\r\n    componentDidMount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        this.setState({\r\n            unreadMessages: chat.unreadMessages\r\n        });\r\n        /*\r\n            event listener werden angelegt\r\n         */\r\n        chat.event.on(\"new message\",this.newMessage);\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            wenn component selected, wird newMessages counter zurückgesetzt\r\n         */\r\n        if(this.isSelected() && this.state.unreadMessages !== 0)\r\n            this.setState({\r\n                unreadMessages: 0\r\n            });\r\n        /*\r\n            did component update?\r\n         */\r\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\r\n            //Listeners get replaced\r\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\r\n            prevChat.event.rm(\"new message\",this.newMessage);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\r\n            newChat.event.on(\"new message\",this.newMessage);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n\r\n            //typeMsg gets deleted\r\n            this.setState({\r\n                typeMsg: '',\r\n                unreadMessages: newChat.unreadMessages\r\n            });\r\n        }\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\r\n        /*\r\n            event listener werden entfernt\r\n         */\r\n        chat.event.rm(\"new message\",this.newMessage);\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport ChatSearchBox from \"./ChatSearchBox\";\r\nimport ChatItem from \"./ChatItem\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class ChatList extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //a array with all chats\r\n            chats: [],\r\n            //the current searchValue at the chatlist\r\n            searchValue: '',\r\n            //should the tempChat be shown?\r\n            showTempChat: false,\r\n            tempChatName: ''\r\n        };\r\n    }\r\n\r\n    chatItemToTop = index => {\r\n        const chatsClone = this.state.chats.splice(0);\r\n        const item = chatsClone[index];\r\n        chatsClone.splice(index,1);\r\n        chatsClone.unshift(item);\r\n        this.setState({\r\n            chats: chatsClone\r\n        });\r\n    };\r\n    /*\r\n        gets emitted if a new chat gets loaded\r\n     */\r\n    newChat = chat => {\r\n        /*\r\n            chat object gets created\r\n         */\r\n        const chatObj = {\r\n            type: chat.type,\r\n            id: chat.id,\r\n            chatName: chat.chatName,\r\n            lastMessage: {\r\n                date: chat.date\r\n            }\r\n        };\r\n        /*\r\n            this is concatenated with the Array\r\n         */\r\n        this.setState(state => ({\r\n            chats: [chatObj].concat(state.chats)\r\n        }));\r\n    };\r\n\r\n    tempChatShown = () => {\r\n\r\n        const chat = chatSocket.temporaryChat.chatNow;\r\n\r\n        this.setState({\r\n            showTempChat: true ,\r\n            tempChatName: chat.chatName\r\n        });\r\n    };\r\n\r\n    tempChatUpdated = () => {\r\n\r\n        const chat = chatSocket.temporaryChat.chatNow;\r\n\r\n        this.setState({\r\n            showTempChat: true ,\r\n            tempChatName: chat.chatName\r\n        });\r\n    };\r\n\r\n    tempChatHidden = () => {\r\n        console.log('hidden');\r\n\r\n        this.setState({\r\n            showTempChat: false ,\r\n            tempChatName: ''\r\n        });\r\n    };\r\n\r\n    chatsLoaded = chats => {\r\n        this.setState({\r\n            chats: chats\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        /*\r\n            is a tempChat already shown?\r\n         */\r\n        if(chatSocket.temporaryChat.isShown)\r\n            this.setState({\r\n                showTempChat: true\r\n            });\r\n        /*\r\n            Listeners are attached\r\n         */\r\n        chatSocket.event.on(\"tempChat shown\",this.tempChatShown);\r\n        chatSocket.event.on(\"tempChat updated\",this.tempChatUpdated);\r\n        chatSocket.event.on(\"tempChat hidden\",this.tempChatHidden);\r\n        chatSocket.event.on('new chat',this.newChat);\r\n        /*\r\n            chats get initialized\r\n            is loading of chats already finished?\r\n                --> chatArray gets requested immediately\r\n         */\r\n        if(chatSocket.finishedLoading){\r\n            this.setState({\r\n                chats: chatSocket.getChatArraySortedByDate()\r\n            });\r\n        /*\r\n            otherwise --> event handler that gets triggered when loading finished\r\n         */\r\n        }else{\r\n            chatSocket.event.on('chats loaded',this.chatsLoaded);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const paddingTop = this.props.paddingTop || '1rem';\r\n        let found = 0;\r\n\r\n        const showNothingFoundMsg = () => {\r\n            if(found === 0)\r\n                return(\r\n                    <span>\r\n                        Nichts gefunden\r\n                    </span>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderTempChat = () => {\r\n            if(this.state.showTempChat){\r\n                return(\r\n                    <ChatItem\r\n                        key={-1}\r\n                        _key_={-1}\r\n                        id={0}\r\n                        type={'tempChat'}\r\n                        name={this.state.tempChatName}\r\n                        toTop={() => {}}\r\n                    />\r\n                );\r\n            }\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div style={{\r\n                paddingTop: paddingTop,\r\n                height: '100%'\r\n            }}>\r\n                <div className=\"chat-container m-2\">\r\n                    <ChatSearchBox\r\n                        onSearch={searchValue => {\r\n                            this.setState({\r\n                                searchValue: searchValue\r\n                            })\r\n                        }}\r\n                        setHomeState={this.props.setHomeState}\r\n                    />\r\n\r\n                    <ul className=\"chat-list list-group pb-5\" style={{height: 'calc (100% - 80px'}}>\r\n                        {renderTempChat()}\r\n                        {this.state.chats.map((chat,i) => {\r\n                            if(chat.chatName.includes(this.state.searchValue)) {\r\n                                found++;\r\n                                return (\r\n                                    <ChatItem\r\n                                        key={i}\r\n                                        _key_={i}\r\n                                        id={chat.id}\r\n                                        type={chat.type}\r\n                                        name={chat.chatName}\r\n                                        toTop={this.chatItemToTop}\r\n                                    />\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })}\r\n                    </ul>\r\n                    {showNothingFoundMsg()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentWillUnmount() {\r\n        /*\r\n            Listeners are removed\r\n         */\r\n        chatSocket.event.rm(\"tempChat shown\",this.tempChatShown);\r\n        chatSocket.event.rm(\"tempChat updated\",this.tempChatUpdated);\r\n        chatSocket.event.rm(\"tempChat hidden\",this.tempChatHidden);\r\n        chatSocket.event.rm('new chat',this.newChat);\r\n        chatSocket.event.rm('chats loaded',this.chatsLoaded);\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default function ChatViewLoader (props){\r\n    return(\r\n        <div className=\"loader-init\">\r\n            <div className=\"col-sm-12 my-auto\">\r\n                <div className=\"init-container border rounded\">\r\n                    <div className=\"spinner-border text-secondary\"\r\n                         style={{\r\n                             width: '15rem',\r\n                             height: '15rem',\r\n                             borderWidth: '0.5rem'\r\n                         }}\r\n                         role=\"status\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div className=\"loader-text\">{props.msg}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport 'emoji-mart/css/emoji-mart.css';\r\nimport { Picker } from 'emoji-mart';\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass MessageForm extends Component{\r\n\r\n    _userTyping = false;\r\n    _typeEventEmitted = false;\r\n    _typeTimeout;\r\n    /*\r\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\r\n     */\r\n    _isTempChat;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: '',\r\n            showEmoji: false\r\n        }\r\n    }\r\n\r\n    onTyping = event => {\r\n\r\n        this.setState({\r\n           message: event.target.value\r\n        });\r\n\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    handleTypeMessage = () => {\r\n        /*\r\n            type message get only handled if the chat is not temporary\r\n         */\r\n        if(!this.isTempChat) {\r\n\r\n            if (this.userTyping) {\r\n                clearTimeout(this.typeTimeout);\r\n            }\r\n            this.userTyping = true;\r\n            if (!this.typeEventEmitted) {\r\n                this.typeEventEmitted = true;\r\n                chatSocket.socket.emit('started typing');\r\n            }\r\n            this.typeTimeout = setTimeout(() => {\r\n                this.userTyping = false;\r\n                if (this.typeEventEmitted) {\r\n                    this.typeEventEmitted = false;\r\n                    chatSocket.socket.emit('stopped typing');\r\n                }\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    onSubmit = event => {\r\n        event.preventDefault();\r\n        /*\r\n            es kann keine leere Nachricht geschickt werden\r\n         */\r\n        if(this.state.message !== ''){\r\n            const message = this.state.message;\r\n            /*\r\n                input wird geleert\r\n             */\r\n            this.setState({\r\n                message: ''\r\n            });\r\n            if(this.isTempChat) {\r\n\r\n                const {pathname} = this.props.location;\r\n                /*\r\n                    the chat is created\r\n                 */\r\n                chatSocket.temporaryChat.createNewNormalChat(message)\r\n                    .then(redirect => {\r\n                        if(redirect) {\r\n                            this.props.history.replace(\"/chat\");\r\n                            this.props.history.replace(pathname);\r\n                        }\r\n                    });\r\n            }else{\r\n                /*\r\n                    message wird zu server emitted, über callback wird msgId geholt\r\n                 */\r\n                chatSocket.socket.emit('chat message', message, mid => {\r\n                    /*\r\n                        eigene msg wird angehängt\r\n                    */\r\n                    const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\r\n                    chat.addMessage(chatSocket.userSelf.uid, message, mid);\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    onEmojiInput = emoji => {\r\n\r\n        this.setState({\r\n            message: this.state.message + emoji.native\r\n        });\r\n        this.handleTypeMessage();\r\n    };\r\n\r\n    toggleEmoji = event => {\r\n        this.setState(state => ({\r\n            showEmoji: !state.showEmoji\r\n        }))\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.onSubmit} className=\"msg-form\">\r\n                    <div className=\"message-input\">\r\n                        <input autoComplete=\"off\"\r\n                               placeholder=\"Nachricht:\"\r\n                               value={this.state.message}\r\n                               onChange={this.onTyping}\r\n                        />\r\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\r\n                           onClick={this.toggleEmoji}\r\n                        />\r\n                    </div>\r\n                    <button className=\"btn-submit\" type=\"submit\">\r\n                        <i className=\"far fa-paper-plane fa-2x\"\r\n                           data-toggle=\"tooltip\"\r\n                           title=\"send message\" />\r\n                    </button>\r\n                </form>\r\n                {this.state.showEmoji ?\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        bottom: '60px',\r\n                        right: '50px',\r\n                        width: '350px',\r\n                        height: '425px'\r\n                    }}>\r\n                        <Picker onSelect={this.onEmojiInput}/>\r\n                    </div>\r\n                : null}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*\r\n            isTempChat gets set\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            isTempChat gets updated\r\n         */\r\n        this.isTempChat = this.props.chatType === 'tempChat';\r\n    }\r\n\r\n    get userTyping() {\r\n        return this._userTyping;\r\n    }\r\n\r\n    set userTyping(value) {\r\n        this._userTyping = value;\r\n    }\r\n\r\n    get typeEventEmitted() {\r\n        return this._typeEventEmitted;\r\n    }\r\n\r\n    set typeEventEmitted(value) {\r\n        this._typeEventEmitted = value;\r\n    }\r\n\r\n    get typeTimeout() {\r\n        return this._typeTimeout;\r\n    }\r\n\r\n    set typeTimeout(value) {\r\n        this._typeTimeout = value;\r\n    }\r\n\r\n    get isTempChat() {\r\n        return this._isTempChat;\r\n    }\r\n\r\n    set isTempChat(value) {\r\n        this._isTempChat = value;\r\n    }\r\n}\r\n\r\nexport default withRouter(MessageForm);","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport Colors from \"../../util/Color\";\r\n\r\nexport default class Message extends Component{\r\n\r\n    render() {\r\n\r\n        const msg = this.props.msg;\r\n\r\n        const isMsgBySelf = () => {\r\n            return msg.uid === chatSocket.userSelf.uid;\r\n        };\r\n\r\n        const user = isMsgBySelf() ? chatSocket.userSelf : chatSocket.users.get(msg.uid);\r\n\r\n        return(\r\n            <div className={\"p-2 border rounded \" + (isMsgBySelf() ? \"float-right \" : \"float-left \") + \"msg-container-other msg-container\"}>\r\n                {(chatSocket.currentChat.type === 'groupChat') ?\r\n                    <div className=\"w-100\">\r\n                        <strong className=\"msg-container-header\"><span\r\n                            style={{\r\n                                color: Colors.names[user.color]\r\n                            }}>\r\n                            {//wenn msg von user selbst ist, wird \"Du\" angezeigt\r\n                                isMsgBySelf() ? \"Du\" : user.username}\r\n                        </span>\r\n                        </strong>\r\n                    </div>\r\n                : null}\r\n                <div className=\"w-100 msg-container-content\">\r\n                    <p className=\"mb-0\">\r\n                        {msg.content}\r\n                    </p>\r\n                </div>\r\n                <div className=\"w-100 msg-date-outer\">\r\n                    <div className=\"msg-date\">\r\n                        {msg.getMessageViewDateString()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport MessageForm from \"./MessageForm\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport Message from \"./Message\";\r\n\r\nexport default class ChatContainer extends Component{\r\n\r\n    _isMounted = false;\r\n    _messages;\r\n    _messagesNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\r\n        this.state = {\r\n            msgLoading: false,\r\n            scrollToBottom: 0,\r\n            newMessages: 0,\r\n            typeMessages: []\r\n        };\r\n    }\r\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\r\n    scrollHandler = event => {\r\n        this.setState({\r\n            scrollToBottom: this.getScrollToBottom()\r\n        });\r\n        /*\r\n            wenn oben angelangt, werden Nachrichten geladen\r\n         */\r\n        if (this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\r\n    };\r\n\r\n    assignMessagesRef = target => {\r\n        this.messages = target;\r\n    };\r\n\r\n    loadMessages = () => {\r\n        this.setState({\r\n            msgLoading: true\r\n        });\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.loadMessages(10);\r\n    };\r\n\r\n    messagesLoaded = () => {\r\n        this.setState({\r\n            msgLoading: false\r\n        });\r\n        this.setScrollToBottom(this.state.scrollToBottom);\r\n    };\r\n\r\n    newMessage = uid => {\r\n        /*\r\n            wenn nach unten gescrollt:\r\n                state.newMsg = 0\r\n            wenn nicht nach unten gescrollt\r\n                wenn eigene msg\r\n                     state.newMsg = 0\r\n                     nach unten scrollen\r\n                wenn nicht eigene msg\r\n                    state.newMsg ++\r\n                    derzeitigen scrollstatus beibehalten\r\n         */\r\n        if(this.getScrollToBottom() === 0){\r\n            this.setState({\r\n                newMessages: 0\r\n            });\r\n        }else{\r\n            if(uid === chatSocket.userSelf.uid){\r\n                this.setState({\r\n                    scrollToBottom: 0,\r\n                    newMessages: 0\r\n                });\r\n            }else{\r\n                this.setState(state => ({\r\n                    newMessages: state.newMessages +1\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\r\n        if(this.messagesNode.scrollTop === 0)\r\n            this.loadMessages();\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.on('messages loaded',this.messagesLoaded);\r\n        chat.event.on('new message',this.newMessage);\r\n\r\n        this.isMounted = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn das der Fall ist:\r\n                wird messages loaded listener auf neuen chat angewandt\r\n                scrollToBottom wird auf 0 gesetzt\r\n                scrolltop wird überprüft\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n            //message loaded listener\r\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\r\n            prevChat.event.rm('messages loaded',this.messagesLoaded);\r\n            prevChat.event.rm('new message',this.newMessage);\r\n\r\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n            newChat.event.on('messages loaded',this.messagesLoaded);\r\n            newChat.event.on('new message',this.newMessage);\r\n\r\n            //scrollToBottom wird auf 0 gesetzt\r\n            this.setScrollToBottom(0);\r\n            //wenn scrolltop = 0, werden messages geladen\r\n            if (this.messagesNode.scrollTop === 0)\r\n                this.loadMessages();\r\n        }\r\n        /*\r\n            wenn scrollToBottom 0 wird zu bottom gescrollt\r\n         */\r\n        if(this.state.scrollToBottom === 0)\r\n            this.setScrollToBottom(0);\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n\r\n        const showLoaderTop = () => {\r\n            if(this.state.msgLoading)\r\n                return(\r\n                    <div className=\"messageLoader-top\">\r\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\r\n                            <span className=\"sr-only\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderNewMessages = () => {\r\n            if(this.state.newMessages > 0)\r\n                return(\r\n                    <div id=\"scroll-down-number\" className=\"number\">\r\n                        {this.state.newMessages}\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        const renderBtnToBottom = () => {\r\n            if(this.isMounted) {\r\n                if (this.getScrollToBottom() > 10) {\r\n                    return (\r\n                        <div id=\"messages-bottom\"\r\n                             className=\"messages-bottom\"\r\n                             onClick={() => {\r\n                                 this.setState({\r\n                                     scrollToBottom: 0,\r\n                                     newMessages: 0\r\n                                 })\r\n                             }}\r\n                        >\r\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\r\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\r\n                            </div>\r\n                            {renderNewMessages()}\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        let lastDate = new Date(0);\r\n        /*\r\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\r\n            wird ein Container mit Datum gerendert\r\n         */\r\n        const renderDateContainer = msg => {\r\n            if(msg.isDifferentDay(lastDate)){\r\n                lastDate = msg.date;\r\n                return(\r\n                    <div className = \"date-container\">\r\n                        <div>\r\n                            {msg.getDateString()}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            lastDate = msg.date;\r\n            return null;\r\n        };\r\n\r\n        const renderAlertNoMessages = () => {\r\n            if(chat.messages.length === 0)\r\n                return(\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\"\r\n                     onScroll={this.scrollHandler}\r\n                     ref={this.assignMessagesRef}\r\n                >\r\n                    {showLoaderTop()}\r\n                    {chat.messages.map((msg,i) => {\r\n                        return (\r\n                            <div key={i}>\r\n                                {renderDateContainer(msg.value)}\r\n                                <Message\r\n                                    msg={msg.value}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {renderAlertNoMessages()}\r\n                    {renderBtnToBottom()}\r\n                </div>\r\n                <MessageForm\r\n                    chatType={this.props.chatType}\r\n                    chatId={this.props.chatId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.isMounted = false;\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.rm('messages loaded',this.messagesLoaded);\r\n        chat.event.rm('new message',this.newMessage);\r\n    }\r\n\r\n    get isMounted() {\r\n        return this._isMounted;\r\n    }\r\n\r\n    set isMounted(value) {\r\n        this._isMounted = value;\r\n    }\r\n\r\n    get messages() {\r\n        return this._messages;\r\n    }\r\n\r\n    set messages(value) {\r\n        this._messages = value;\r\n    }\r\n\r\n    get messagesNode() {\r\n        return this._messagesNode;\r\n    }\r\n\r\n    set messagesNode(value) {\r\n        this._messagesNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class TempChatContainer extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"chat-container\">\r\n                <div className=\"messages\">\r\n                    <div className=\"alert alert-primary\" role=\"alert\">\r\n                        Noch keine Nachrichten vorhanden\r\n                    </div>\r\n                </div>\r\n                <MessageForm\r\n                    chatType={'tempChat'}\r\n                    chatId={0}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        chatSocket.temporaryChat.show();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        chatSocket.temporaryChat.update();\r\n    }\r\n    componentWillUnmount() {\r\n        chatSocket.temporaryChat.hide();\r\n    }\r\n}","import React,{Component} from \"reactn\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./ChatContainer\";\r\nimport TempChatContainer from \"./TempChatContainer\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\n\r\nconst errorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    tempChat: 2,\r\n    userNotExisting: 3,\r\n    blocked: 4,\r\n    isSelf: 5\r\n};\r\n\r\nexport default class NormalChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: errorCode.none\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if(this.state.error === errorCode.nan){\r\n                return(\r\n                    <div>\r\n                        <h2>ungültige Addresse</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            else if(this.state.error === errorCode.isSelf){\r\n                return(\r\n                    <div>\r\n                        <h2>Du kannst dir selbst nicht schreiben</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if(this.state.loaded){\r\n\r\n                if(this.state.error === errorCode.none){\r\n\r\n                    return(\r\n                        <ChatContainer\r\n                            chatType={chatSocket.currentChat.type}\r\n                            chatId={chatSocket.currentChat.id}\r\n                        />\r\n                    )\r\n                }else if(this.state.error === errorCode.tempChat){\r\n                    return(\r\n                        <TempChatContainer />\r\n                    )\r\n                }else if(this.state.error === errorCode.blocked){\r\n                    return(\r\n                        <div>\r\n                            <h2>Dieser User hat dich blockiert</h2>\r\n                        </div>\r\n                    )\r\n                }else{\r\n                    return(\r\n                        <div>\r\n                            <h2>Dieser User existiert nicht</h2>\r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n        };\r\n\r\n        return <div className=\"h-100\">\r\n            {renderLoader()}\r\n            {renderChat()}\r\n        </div>;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.userChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did uid change?\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            /*\r\n                is props.uid a number?\r\n             */\r\n            if(isNaN(this.props.uid)){\r\n                this.setState({\r\n                    error: errorCode.nan\r\n                });\r\n            }\r\n            else{\r\n                this.userChanged();\r\n            }\r\n\r\n        }\r\n    }\r\n    /*\r\n        is called when the user changed and when the component mounted\r\n            this is checked after each update\r\n     */\r\n    userChanged = () => {\r\n\r\n        const uid = parseInt(this.props.uid);\r\n\r\n        /*\r\n                is the user self?\r\n             */\r\n        if(chatSocket.userSelf.uid === uid){\r\n            this.setState({\r\n                error: errorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else {\r\n\r\n            const userExists = () => {\r\n                chatSocket.userExists(uid)\r\n                    .then(res => {\r\n                        /*\r\n                            if there was an error, the error code gets set\r\n                         */\r\n                        if (!res.userExists) {\r\n                            this.setState({\r\n                                error: errorCode.userNotExisting\r\n                            });\r\n                        } else if (res.isUserBlocked) {\r\n                            this.setState({\r\n                                error: errorCode.blocked\r\n                            });\r\n                        } else {\r\n                            /*\r\n                                no error\r\n                                    checks if existing or tempChat\r\n                             */\r\n                            if (res.chatExists) {\r\n                                this.setState({\r\n                                    error: errorCode.none\r\n                                });\r\n                                this.setGlobal({\r\n                                    infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                    ihcData: {\r\n                                        name: chatSocket.users.get(uid).username,\r\n                                        uid: uid\r\n                                    }\r\n                                }).then();\r\n                                setCurrentChat(false);\r\n                            } else {\r\n                                this.setState({\r\n                                    error: errorCode.tempChat\r\n                                });\r\n                                this.setGlobal({\r\n                                    infoHeaderCenter: infoHeaderCenter.normalChat,\r\n                                    ihcData: {\r\n                                        name: chatSocket.temporaryChat.chatNow.chatName,\r\n                                        uid: uid\r\n                                    }\r\n                                }).then();\r\n                                setCurrentChat(true);\r\n                            }\r\n                        }\r\n                        this.setState({\r\n                            loaded: true\r\n                        });\r\n                    });\r\n            };\r\n\r\n            const setCurrentChat = tempChat => {\r\n                /*\r\n                    is the chat a tempchat?\r\n                 */\r\n                if (tempChat) {\r\n                    chatSocket.setCurrentChat({\r\n                        type: 'tempChat',\r\n                        id: 0\r\n                    });\r\n                }\r\n                /*\r\n                    currentChat in chatSocket gets updated\r\n                    if the chat does not exist, id is -1\r\n                */\r\n                else if (chatSocket.users.getIndex(uid) === -1) {\r\n                    /*\r\n                        current chat gets set to null -> no chat selected\r\n                     */\r\n                    chatSocket.setCurrentChat(null);\r\n                } else {\r\n                    chatSocket.setCurrentChat({\r\n                        type: 'normalChat',\r\n                        id: chatSocket.users.get(uid).normalChat\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                userExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    userExists();\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                uid: parseInt(this.props.uid)\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        property- display normalChat is removed from global\r\n     */\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class Dummy extends Component {\r\n\r\n    componentDidMount() {\r\n        if(typeof(this.props.didMount) === 'function')\r\n            this.props.didMount();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(typeof(this.props.didUpdate) === 'function')\r\n            this.props.didUpdate();\r\n    }\r\n\r\n    render() {\r\n        if(this.props.children)\r\n            return this.props.children;\r\n        return null;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport ChatViewLoader from \"../ChatViewLoader\";\r\nimport {Link,withRouter} from 'react-router-dom';\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nclass GroupChatInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n            loaded: false,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadChatInfo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did gcid change?\r\n         */\r\n        if(prevProps.gcid !== this.props.gcid)\r\n            this.loadChatInfo();\r\n    }\r\n\r\n    loadChatInfo = () => {\r\n\r\n        const loadChatInfoI = async() =>{\r\n\r\n            const config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            };\r\n            const response = await fetch('/group/' + this.props.gcid + '/',config);\r\n\r\n            if(response.ok){\r\n\r\n                let data = await response.json();\r\n\r\n                this.setState({\r\n                    data: data\r\n                });\r\n                console.log(data);\r\n            }\r\n        };\r\n\r\n        loadChatInfoI()\r\n            .then(r => {\r\n                this.setState({\r\n                    loaded: true,\r\n                    error: false\r\n                })\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    loaded: true,\r\n                    error: true\r\n                })\r\n            });\r\n    };\r\n\r\n    render() {\r\n\r\n        const {pathname} = this.props.location;\r\n\r\n        if(this.state.error)\r\n            return(\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Ein Fehler ist aufgetreten!\r\n                </div>\r\n            );\r\n        else if(!this.state.loaded)\r\n            return (\r\n                <ChatViewLoader msg = \"info wird geladen\"/>\r\n            );\r\n        const uidSelf = chatSocket.userSelf.uid;\r\n        return(\r\n            <div className=\"groupChatInfo\">\r\n                <h1>{this.state.data.name}</h1>\r\n                <h4>{this.state.data.users.length} Mitglieder:</h4>\r\n                <ul className=\"userList\">\r\n                    {this.state.data.users.map((item,index) => (\r\n                        <li key={index}>\r\n                            <Link to={pathname + \"/userInfo/\" + item.uid}>\r\n                                {uidSelf === item.uid ?\r\n                                    <span>Du</span>\r\n                                :\r\n                                    item.username\r\n                                }\r\n                                {item.isAdmin === 1 ?\r\n                                    <div className=\"user-admin\">\r\n                                        Admin\r\n                                    </div>\r\n                                : null}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(GroupChatInfo);","import React,{Component} from \"reactn\";\r\nimport ChatViewLoader from \"./ChatViewLoader\";\r\nimport ChatContainer from \"./ChatContainer\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\r\nimport GroupChatInfo from \"./groupChatInfo/GroupChatInfo\";\r\n\r\nexport const groupChatErrorCode = {\r\n    none: 0,\r\n    nan: 1,\r\n    chatNotExisting: 2,\r\n    notPartOfChat: 3,\r\n    private: 4\r\n};\r\n\r\nexport const groupChatTabs = {\r\n    chat: 0,\r\n    info: 1\r\n};\r\n\r\nexport default class GroupChatView extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gcid: 0,\r\n            loaded: false,\r\n            error: groupChatErrorCode.none\r\n        }\r\n    }\r\n\r\n    groupChatExists = async(gcid) => {\r\n        /*\r\n            does the chat already exist in the client\r\n         */\r\n        if(chatSocket.chats.group.getIndex(gcid) !== -1){\r\n            return groupChatErrorCode.none;\r\n        }else{\r\n            return groupChatErrorCode.chatNotExisting;\r\n        }\r\n    };\r\n    /*\r\n        is called after the chatId changed\r\n     */\r\n    chatChanged = () => {\r\n        /*\r\n            is props.gcid a number?\r\n         */\r\n        if(isNaN(this.props.gcid)){\r\n            this.setState({\r\n                error: groupChatErrorCode.nan,\r\n                loaded: true\r\n            });\r\n        }else{\r\n\r\n            const chatExists = () => {\r\n\r\n                const gcid = parseInt(this.props.gcid);\r\n\r\n                const setCurrentChat = () => {\r\n                    /*\r\n                        currentChat in chatSocket gets updated\r\n                        if the chat does not exist, id is -1\r\n                    */\r\n                    if (chatSocket.chats.group.getIndex(gcid) === -1) {\r\n                        /*\r\n                            current chat gets set to null -> no chat selected\r\n                         */\r\n                        chatSocket.setCurrentChat(null);\r\n                    } else {\r\n                        chatSocket.setCurrentChat({\r\n                            type: 'groupChat',\r\n                            id: gcid\r\n                        });\r\n                    }\r\n                };\r\n\r\n                this.groupChatExists(gcid)\r\n                    .then(r => {\r\n                        if (r === groupChatErrorCode.none) {\r\n                            setCurrentChat();\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: groupChatErrorCode.none,\r\n                                gcid: gcid\r\n                            });\r\n                            this.setGlobal({\r\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\r\n                                ihcData: {\r\n                                    name: chatSocket.chats.group.get(gcid).chatName,\r\n                                    gcid: gcid\r\n                                }\r\n                            }).then();\r\n                        } else {\r\n                            setCurrentChat();\r\n                            this.setState({\r\n                                loaded: true,\r\n                                error: r\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch();\r\n            };\r\n\r\n            if (chatSocket.finishedLoading) {\r\n                chatExists();\r\n            } else {\r\n                chatSocket.event.on('chats loaded', () => {\r\n                    chatExists();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.chatChanged();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            did gcid change?\r\n         */\r\n        if(prevProps.gcid !== this.props.gcid){\r\n            this.chatChanged();\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setGlobal({\r\n            infoHeaderCenter: infoHeaderCenter.none,\r\n            ihcData: null\r\n        }).then();\r\n    }\r\n\r\n    render() {\r\n        const renderLoader = () => {\r\n            if(!this.state.loaded){\r\n                return(\r\n                    <ChatViewLoader\r\n                        msg=\"Chat wird geladen\"\r\n                    />\r\n                )\r\n            }\r\n        };\r\n\r\n        const renderChat = () => {\r\n            /*\r\n                es wird überprüft, ob uid number ist\r\n                --> wenn nicht, ungültige Addresse\r\n             */\r\n            if (this.state.error === groupChatErrorCode.nan) {\r\n                return (\r\n                    <div>\r\n                        <h2>ungültige Addresse</h2>\r\n                    </div>\r\n                );\r\n            }\r\n            /*\r\n                chat wird nur gerendert, wenn geladen\r\n             */\r\n            else if (this.state.loaded) {\r\n\r\n                switch(this.state.error){\r\n\r\n                    case groupChatErrorCode.none:\r\n\r\n                        switch(this.props.tab){\r\n                            case(groupChatTabs.chat):\r\n                                return (\r\n                                    <ChatContainer\r\n                                        chatType={chatSocket.currentChat.type}\r\n                                        chatId={chatSocket.currentChat.id}\r\n                                    />\r\n                                );\r\n\r\n                            case(groupChatTabs.info):\r\n                                return(\r\n                                    <GroupChatInfo\r\n                                        gcid={this.state.gcid}\r\n                                    />\r\n                                );\r\n\r\n                            default:\r\n                                return null;\r\n                        }\r\n\r\n                    case groupChatErrorCode.notPartOfChat:\r\n                        return (\r\n                            <div>\r\n                                <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    case groupChatErrorCode.private:\r\n                        return (\r\n                            <div>\r\n                                <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    case groupChatErrorCode.chatNotExisting:\r\n                        return (\r\n                            <div>\r\n                                <h2>Dieser Chat existiert nicht</h2>\r\n                            </div>\r\n                        );\r\n\r\n                    default:\r\n                        return null;\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n                {renderLoader()}\r\n                {renderChat()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nclass Modal extends Component{\r\n\r\n    render() {\r\n        const clickedOutside = () => {\r\n            this.props.history.goBack();\r\n        };\r\n        return(\r\n            <div\r\n                className=\"modal-outer\"\r\n                onClick={clickedOutside}>\r\n                <div className=\"h-100\" style={{display: \"flex\"}}>\r\n\r\n                        <div\r\n                            className=\"modal-inner\"\r\n                            onClick={event => {event.stopPropagation()}}>\r\n                            <div\r\n                                className=\"modal-btn-close\"\r\n                                onClick={() => {this.props.history.goBack()}}>\r\n                                &times;\r\n                            </div>\r\n                            {this.props.children}\r\n                        </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Modal);","import React, {Component} from \"react\";\r\nimport {Link,withRouter} from \"react-router-dom\";\r\nimport chatSocket from \"../../../chatData/chatSocket\";\r\n\r\nclass UserItem extends Component{\r\n\r\n    elementClicked = event => {\r\n\r\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n\r\n                <li className=\"list-group-item\">\r\n                    <Link to={\"/chat/user/\" + this.props.uid}\r\n                          onClick={this.elementClicked}\r\n                          replace={true}\r\n                    >\r\n                    {this.props.username}\r\n                    </Link>\r\n                </li>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport {tabs} from \"../NewChat\";\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class ChooseUser extends Component{\r\n\r\n    _clickedOutsideTimer;\r\n    /*\r\n        the number of results already loaded\r\n     */\r\n    _numAlreadyLoaded = 0;\r\n    _reachedBottom;\r\n    _listRef;\r\n    _listNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: errorCode.none,\r\n            showOptions: false,\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                is the search valid?\r\n             */\r\n            searchValid: true,\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            /*\r\n                should loader at the bottom be shown?\r\n             */\r\n            showLoaderBottom: false\r\n        };\r\n    }\r\n    /*\r\n        options get shown\r\n     */\r\n    showOptions = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.setState({\r\n            showOptions: true\r\n        });\r\n    };\r\n    /*\r\n        options get hidden\r\n     */\r\n    clickedOutsideOptions = () => {\r\n        this.clickedOutsideTimer = setTimeout(this.hideOptions,100);\r\n    };\r\n    hideOptions = () => {\r\n        this.setState({\r\n            showOptions: false\r\n        });\r\n    };\r\n    /*\r\n        when new group gets clicked\r\n     */\r\n    newGroupClick = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.props.setCurrentTab(tabs.newGroup);\r\n    };\r\n    /*\r\n        when join group is clicked\r\n     */\r\n    joinGroupClick = event => {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        this.props.setCurrentTab(tabs.chooseGroup);\r\n    };\r\n    /*\r\n        gets called when the search of the user changed. the new result gets requested\r\n     */\r\n    searchChanged = event => {\r\n        const searchValue = event.target.value;\r\n\r\n        const searchValid = true;\r\n\r\n        this.setState({\r\n            searchValue: searchValue,\r\n            searchValid: searchValid\r\n        });\r\n        /*\r\n            new search result gets requested if search is valid\r\n         */\r\n        if(searchValid) {\r\n            this.numAlreadyLoaded = 0;\r\n            this.reachedBottom = false;\r\n            this.requestSearchResult(searchValue).then(r => {\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        the search result gets requested\r\n     */\r\n    requestSearchResult = async (searchValue) => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    search: searchValue,\r\n                    limit: 10,\r\n                    start: this.numAlreadyLoaded\r\n                })\r\n            };\r\n            const response = await fetch('/user/noChat', config);\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0 && this.numAlreadyLoaded === 0){\r\n                    this.setState({\r\n                        searchResult: []\r\n                    });\r\n                }else if(data.length === 0){\r\n                    this.reachedBottom = true;\r\n                } else {\r\n\r\n                    let scrollToBottomBuffer = this.getScrollToBottom();\r\n\r\n                    if(this.numAlreadyLoaded === 0)\r\n                        this.setState({\r\n                            searchResult: data\r\n                        });\r\n                    else\r\n                        this.setState(state => ({\r\n                            searchResult: state.searchResult.concat(data)\r\n                        }));\r\n                    this.numAlreadyLoaded += data.length;\r\n                    /*\r\n                        if scrollToBottom is 0, the next result is requested\r\n                     */\r\n                    if(scrollToBottomBuffer === 0){\r\n                        this.requestSearchResult(searchValue);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n\r\n    assignListRef = target => {\r\n        this.listRef = target;\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.listNode.scrollTop = this.listNode.scrollHeight - this.listNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        if(this.listNode !== null)\r\n            return this.listNode.scrollHeight - this.listNode.offsetHeight - this.listNode.scrollTop;\r\n        return 0;\r\n    };\r\n\r\n    render() {\r\n        /*\r\n            if state.showOptions is true, options get rendered\r\n         */\r\n        const renderOptions = () => {\r\n            if(this.state.showOptions)\r\n                return(\r\n                    <div className=\"options\">\r\n                        <ul className=\"list-group\"\r\n                            ref={this.assignListRef}\r\n                        >\r\n                            <li className=\"list-group-item\"\r\n                                onClick={this.newGroupClick}\r\n                            >\r\n                                neue Gruppe\r\n                            </li>\r\n                            <li className=\"list-group-item\"\r\n                                onClick={this.joinGroupClick}\r\n                            >\r\n                                einer Gruppe beitreten\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            return null;\r\n        };\r\n        /*\r\n            results only get rendered if search was valid\r\n         */\r\n        const renderResult = () => {\r\n            if(this.state.error === errorCode.error){\r\n                return(\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        Ein Fehler ist aufgetreten!\r\n                    </div>\r\n                )\r\n            }\r\n            else if(this.state.searchValid) {\r\n                if(this.state.searchResult.length > 0) {\r\n                    return (\r\n                        <Dummy>\r\n                            <h5>Ergebnisse:</h5>\r\n                            <ul className=\"list-user list-group result-list\">\r\n                                {this.state.searchResult.map((item, index) => (\r\n                                    <UserItem\r\n                                        key={index}\r\n                                        uid={item.uid}\r\n                                        username={item.username}\r\n                                        hide={this.props.hide}\r\n                                    />\r\n                                ))}\r\n                            </ul>\r\n                        </Dummy>\r\n                    );\r\n                }else{\r\n                    return(\r\n                        <ul className=\"list-user result-list\">\r\n                            <div className=\"alert alert-warning\" role=\"alert\">\r\n                                Nichts gefunden!\r\n                            </div>\r\n                        </ul>\r\n                    )\r\n                }\r\n            }else{\r\n                return(\r\n                    <div className=\"alert alert-danger\" role=\"alert\">\r\n                        Ihre Suche enthält ungültige Zeichen!\r\n                    </div>\r\n                )\r\n            }\r\n        };\r\n\r\n        return(\r\n            <div className=\"modal-main\">\r\n                <div className=\"user-results\">\r\n                    <div className=\"newChat-user-top\">\r\n                        <div className=\"newChat-searchUser\">\r\n                            <input type=\"text\"\r\n                                   name=\"newChat-searchUser\"\r\n                                   className=\"form-control\"\r\n                                   placeholder=\"Benutzer suchen\"\r\n                                   onChange={this.searchChanged}\r\n                            />\r\n                        </div>\r\n                        <div className=\"newChat-user-more\">\r\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\r\n                               onClick={this.showOptions}\r\n                            />\r\n                            {renderOptions()}\r\n                        </div>\r\n                    </div>\r\n                    {renderResult()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        document.body.addEventListener('click',this.clickedOutsideOptions);\r\n        /*\r\n            users are requested\r\n         */\r\n        this.numAlreadyLoaded = 0;\r\n        this.reachedBottom = false;\r\n        this.requestSearchResult('').then(r => {});\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.clickedOutsideTimer);\r\n        document.body.removeEventListener('click',this.clickedOutsideOptions);\r\n    }\r\n\r\n    get clickedOutsideTimer() {\r\n        return this._clickedOutsideTimer;\r\n    }\r\n\r\n    set clickedOutsideTimer(value) {\r\n        this._clickedOutsideTimer = value;\r\n    }\r\n\r\n    get numAlreadyLoaded() {\r\n        return this._numAlreadyLoaded;\r\n    }\r\n\r\n    set numAlreadyLoaded(value) {\r\n        this._numAlreadyLoaded = value;\r\n    }\r\n\r\n    get reachedBottom() {\r\n        return this._reachedBottom;\r\n    }\r\n\r\n    set reachedBottom(value) {\r\n        this._reachedBottom = value;\r\n    }\r\n\r\n    get listRef() {\r\n        return this._listRef;\r\n    }\r\n\r\n    set listRef(value) {\r\n        this._listRef = value;\r\n    }\r\n\r\n    get listNode() {\r\n        return this._listNode;\r\n    }\r\n\r\n    set listNode(value) {\r\n        this._listNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class UserItem extends Component{\r\n\r\n    clicked = event => {\r\n        if(this.props.isSelected){\r\n            this.props.deselectUser(this.props.index);\r\n        }else\r\n            this.props.selectUser(this.props.index);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <li key={this.props.index}\r\n                className=\"list-group-item p-2\"\r\n                onClick={this.clicked}\r\n            >\r\n                {this.props.username}\r\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\r\n                    <i className=\"fas fa-check\" />\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport UserItem from \"./UserItem\";\r\nimport Dummy from \"../../../utilComp/Dummy\";\r\n\r\nconst errorCode={\r\n    none: 0,\r\n    error: 1\r\n};\r\n\r\nexport default class extends Component {\r\n\r\n    /*\r\n        the number of results already loaded\r\n     */\r\n    _numAlreadyLoaded = 0;\r\n    _reachedBottom = false;\r\n    _listRef;\r\n    _listNode;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the value of the search input\r\n             */\r\n            searchValue: '',\r\n            /*\r\n                the last search result received from the server\r\n             */\r\n            searchResult: [],\r\n            /*\r\n                should loader at the bottom be shown?\r\n             */\r\n            showLoaderBottom: false,\r\n            error: errorCode.none\r\n        }\r\n    }\r\n    /*\r\n        search gets refreshed\r\n     */\r\n    refreshSearch = () => {\r\n        this.numAlreadyLoaded = 0;\r\n        this.loadUsers().then(r => {});\r\n    };\r\n\r\n    searchChanged = event => {\r\n        this.setState({\r\n            searchValue: event.target.value\r\n        });\r\n        this.refreshSearch();\r\n    };\r\n    /*\r\n        more users are loaded\r\n     */\r\n    loadUsers = async () => {\r\n        try {\r\n            const config = {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    search: this.state.searchValue,\r\n                    limit: 10,\r\n                    start: this.numAlreadyLoaded\r\n                })\r\n            };\r\n            const response = await fetch('/user/', config);\r\n\r\n            if (response.ok) {\r\n                //return json\r\n                let data = await response.json();\r\n\r\n                if(data.length === 0 && this.numAlreadyLoaded === 0){\r\n                    this.setState({\r\n                        searchResult: []\r\n                    });\r\n                }else if(data.length === 0){\r\n                    this.reachedBottom = true;\r\n                } else {\r\n\r\n                    let scrollToBottomBuffer = this.getScrollToBottom();\r\n\r\n                    if(this.numAlreadyLoaded === 0)\r\n                        this.setState({\r\n                            searchResult: data\r\n                        });\r\n                    else\r\n                        this.setState(state => ({\r\n                            searchResult: state.searchResult.concat(data)\r\n                        }));\r\n                    this.numAlreadyLoaded += data.length;\r\n                    /*\r\n                        if scrollToBottom is 0, the next result is requested\r\n                     */\r\n                    if(scrollToBottomBuffer === 0){\r\n                        this.loadUsers(this.props.searchValue);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    error: errorCode.none\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    error: errorCode.error\r\n                });\r\n            }\r\n        } catch (error) {\r\n            this.setState({\r\n                error: errorCode.error\r\n            });\r\n        }\r\n    };\r\n    /*\r\n        is called when an user is selected\r\n     */\r\n    selectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.selectUser(user.uid,user.username);\r\n    };\r\n\r\n    deselectUser = index => {\r\n        const user = this.state.searchResult[index];\r\n        this.props.deselectUser(user.uid);\r\n    };\r\n\r\n    assignListRef = target => {\r\n        this.listRef = target;\r\n    };\r\n\r\n    setScrollToBottom = val => {\r\n        this.listNode.scrollTop = this.listNode.scrollHeight - this.listNode.offsetHeight - val;\r\n    };\r\n\r\n    getScrollToBottom  = () => {\r\n        if(this.listNode !== null)\r\n            return this.listNode.scrollHeight - this.listNode.offsetHeight - this.listNode.scrollTop;\r\n        return 0;\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Dummy>\r\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\r\n                    <input type=\"text\"\r\n                           className=\"form-control p-2 m-2\"\r\n                           placeholder=\"Benutzer suchen\"\r\n                           value={this.state.searchValue}\r\n                           onChange={this.searchChanged}\r\n                    />\r\n                </form>\r\n                <ul className=\"list-group result-list\"\r\n                    ref={this.assignListRef}\r\n                >\r\n                    {this.state.searchResult.length > 0 ?\r\n\r\n                        this.state.searchResult.map((item, index) => (\r\n                            <UserItem\r\n                                key={index}\r\n                                index={index}\r\n                                uid={item.uid}\r\n                                username={item.username}\r\n                                selectUser={this.selectUser}\r\n                                deselectUser={this.deselectUser}\r\n                                isSelected={this.props.isUserSelected(item.uid)}\r\n                            />\r\n                        ))\r\n\r\n                        :\r\n\r\n                        <div className=\"alert alert-warning\" role=\"alert\">\r\n                            Nichts gefunden!\r\n                        </div>\r\n\r\n                    }\r\n                </ul>\r\n            </Dummy>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        this.refreshSearch();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.listNode = ReactDOM.findDOMNode(this.listRef);\r\n        if(this.props.searchValue !== prevProps.searchValue)\r\n            this.refreshSearch();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    get numAlreadyLoaded() {\r\n        return this._numAlreadyLoaded;\r\n    }\r\n\r\n    set numAlreadyLoaded(value) {\r\n        this._numAlreadyLoaded = value;\r\n    }\r\n\r\n    get reachedBottom() {\r\n        return this._reachedBottom;\r\n    }\r\n\r\n    set reachedBottom(value) {\r\n        this._reachedBottom = value;\r\n    }\r\n\r\n    get listRef() {\r\n        return this._listRef;\r\n    }\r\n\r\n    set listRef(value) {\r\n        this._listRef = value;\r\n    }\r\n\r\n    get listNode() {\r\n        return this._listNode;\r\n    }\r\n\r\n    set listNode(value) {\r\n        this._listNode = value;\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport UserList from \"./UserList\";\r\nimport UserItem from \"./UserItem\";\r\n\r\nexport default class SelectUsers extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the users already selected\r\n             */\r\n            selectedUsers: [],\r\n            showOnlySelected: false\r\n        }\r\n    }\r\n    /*\r\n        gets called when a user gets selected\r\n     */\r\n    selectUser = (uid,username) => {\r\n        this.setState(state => ({\r\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\r\n        }));\r\n    };\r\n\r\n    deselectUser = (uid) => {\r\n        this.setState(state => {\r\n            const arrClone = [...state.selectedUsers];\r\n            const index = arrClone.findIndex(item => {\r\n                return item.uid === uid;\r\n            });\r\n            arrClone.splice(index,1);\r\n            return {\r\n                selectedUsers: arrClone\r\n            }\r\n        });\r\n    };\r\n\r\n    deselectIndex = index => {\r\n        this.deselectUser(this.state.selectedUsers[index].uid);\r\n    };\r\n\r\n    isUserSelected = (uid) => {\r\n        return this.state.selectedUsers.find(item => {\r\n            return item.uid === uid;\r\n        });\r\n    };\r\n    /*\r\n        an Array with the uids of the users gets returned to the parent component\r\n     */\r\n    btnNextClicked = event => {\r\n\r\n        this.props.onNext(this.state.selectedUsers);\r\n    };\r\n\r\n    render() {\r\n\r\n        const renderSelectedUsers = () => {\r\n            if(this.state.selectedUsers.length === 0){\r\n                return (\r\n                    <h4>\r\n                        Noch niemand ausgewählt\r\n                    </h4>);\r\n            }else{\r\n                return(\r\n                    <h4 className=\"w-100\">\r\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\r\n                              onClick={event => {\r\n                                  this.setState(state => ({\r\n                                      showOnlySelected: !state.showOnlySelected\r\n                                  }));\r\n                              }}\r\n                        >\r\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\r\n                        </span>\r\n                        &nbsp;ausgewählt\r\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\r\n                           onClick={this.btnNextClicked}\r\n                        />\r\n                    </h4>\r\n                )\r\n            }\r\n        };\r\n        /*\r\n            selected users cannot be shown if there is no one selected.\r\n                --> showOnlySelected = false\r\n         */\r\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\r\n            this.setState({\r\n                showOnlySelected: false\r\n            });\r\n\r\n        return(\r\n            <div className=\"user-results\">\r\n                <div className=\"select-users\">\r\n                    {renderSelectedUsers()}\r\n                </div>\r\n                {!this.state.showOnlySelected ?\r\n                    <UserList selectUser={this.selectUser}\r\n                              deselectUser={this.deselectUser}\r\n                              isUserSelected={this.isUserSelected}\r\n                    />\r\n                :\r\n                    <ul className=\"list-group\">\r\n                        {this.state.selectedUsers.map((item,index) => (\r\n                            <UserItem\r\n                                key={index}\r\n                                index={index}\r\n                                uid={item.uid}\r\n                                username={item.username}\r\n                                selectUser={() => {}}\r\n                                deselectUser={this.deselectIndex}\r\n                                isSelected={true}\r\n                            />\r\n                        ))}\r\n                    </ul>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\n\r\nexport default class GroupInfoForm extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            groupName: ''\r\n        }\r\n    }\r\n\r\n    groupNameChanged = event => {\r\n        this.setState({\r\n            groupName: event.target.value\r\n        })\r\n    };\r\n\r\n    formSubmitted = event => {\r\n\r\n        event.preventDefault();\r\n        this.props.submitGroup({\r\n            name: this.state.groupName,\r\n            description: '',\r\n            isPublic: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"user-results\">\r\n                <form className=\"form-group p-3\"\r\n                      onSubmit={this.formSubmitted}\r\n                >\r\n                    <h4>\r\n                        Gruppennamen eingeben\r\n                    </h4>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"input-groupName\"\r\n                        name=\"groupName\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Gruppenname\"\r\n                        onChange={this.groupNameChanged}\r\n                    />\r\n                    <div>\r\n                        <button type=\"submit\" className=\"float-right btn btn-primary m-3\">\r\n                            Gruppe erstellen\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport SelectUsers from \"./SelectUsers\";\r\nimport GroupInfoForm from \"./GroupInfoForm\";\r\n\r\nconst tabs = {\r\n    selectUsers: 0,\r\n    enterChatInfo: 1\r\n};\r\n\r\nclass NewGroup extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.selectUsers,\r\n            selectedUsers: []\r\n        }\r\n    }\r\n\r\n    showEnterChatInfo = selectedUsers => {\r\n\r\n        this.setState({\r\n            currentTab: tabs.enterChatInfo,\r\n            selectedUsers: selectedUsers\r\n        });\r\n    };\r\n\r\n    submitGroup = data => {\r\n\r\n        const users = new Array(this.state.selectedUsers.length);\r\n        for(let i=0;i<this.state.selectedUsers.length;i++){\r\n            users[i] = {\r\n                uid: this.state.selectedUsers[i].uid,\r\n                username: this.state.selectedUsers[i].username,\r\n                isAdmin: false\r\n            };\r\n        }\r\n\r\n        this.createGroupChat(data,users).then(r => {});\r\n    };\r\n\r\n    createGroupChat = async (data,users) => {\r\n        try {\r\n            const config = {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    data: data,\r\n                    users: users\r\n                })\r\n            };\r\n            const response = await fetch('/group/', config);\r\n            /*\r\n                if ok, modal is closed\r\n             */\r\n            if(response.ok)\r\n                this.props.history.goBack();\r\n\r\n        }catch(error){\r\n\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        switch(this.state.currentTab){\r\n\r\n            case tabs.selectUsers:\r\n                return (\r\n                    <SelectUsers\r\n                        onNext={this.showEnterChatInfo}\r\n                    />);\r\n\r\n            case tabs.enterChatInfo:\r\n                return(\r\n                    <GroupInfoForm\r\n                        submitGroup={this.submitGroup}\r\n                    />\r\n                );\r\n\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\r\nimport ChooseUser from \"./chooseUser/ChooseUser\";\r\nimport NewGroup from \"./newGroup/NewGroup\";\r\nimport Dummy from \"../../utilComp/Dummy\";\r\n\r\nexport const tabs = {\r\n    chooseUser: 0,\r\n    newGroup: 1,\r\n    chooseGroup: 2\r\n};\r\n\r\nexport default class NewChat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTab: tabs.chooseUser\r\n        }\r\n    }\r\n\r\n    setCurrentTab = newTab => {\r\n        this.setState({\r\n            currentTab: newTab\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        const router = () => {\r\n\r\n            switch (this.state.currentTab) {\r\n\r\n                case tabs.chooseUser:{\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n\r\n                }\r\n\r\n                case tabs.newGroup:{\r\n                    return(\r\n                        <NewGroup />\r\n                    );\r\n                }\r\n\r\n                case tabs.chooseGroup:{\r\n                    return(\r\n                        <div>\r\n                            <h4>chooseGroup</h4>\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n\r\n                default: {\r\n                    return(\r\n                        <ChooseUser\r\n                            setCurrentTab={this.setCurrentTab}\r\n                            hide={this.props.hide}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        const getHeader = () => {\r\n\r\n            switch(this.state.currentTab){\r\n\r\n                case tabs.chooseUser:\r\n                    return 'Neuer Chat';\r\n\r\n                case tabs.newGroup:\r\n                    return 'Neue Gruppe';\r\n\r\n                case tabs.chooseGroup:\r\n                    return 'Gruppe auswählen';\r\n\r\n                default:\r\n                    return 'Neuer Chat';\r\n\r\n            }\r\n        };\r\n\r\n        return(\r\n            <Dummy>\r\n                <div className=\"modal-header-b\">\r\n                    <h1>{getHeader()}</h1>\r\n                </div>\r\n                {router()}\r\n            </Dummy>\r\n        )\r\n    }\r\n}","import React,{Component} from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nconst errorCode = {\r\n    none: 0,\r\n    isSelf: 1,\r\n    //not a number\r\n    nan: 2\r\n};\r\n\r\nexport default class UserInfo extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: 0,\r\n            loaded: false,\r\n            error: errorCode.none,\r\n            userInfo: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if(!this.state.loaded){\r\n            return null;\r\n\r\n        }else if(this.state.error === errorCode.isSelf){\r\n            return(\r\n                <div className=\"modal-header-b\">\r\n                    <h1>\r\n                        Du\r\n                    </h1>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div>\r\n                    <div className=\"modal-header-b\">\r\n                        <h1>\r\n                            {this.state.userInfo.username}\r\n                            &nbsp;\r\n                            <Link to={\"/chat/user/\" + this.state.uid}>\r\n                                <i className=\"far fa-comment-alt\" />\r\n                            </Link>\r\n                        </h1>\r\n                    </div>\r\n                    <h2>Gruppen</h2>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    setUser = () => {\r\n\r\n        if(isNaN(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.nan\r\n            });\r\n        }else if(chatSocket.userSelf.uid === parseInt(this.props.uid)){\r\n            this.setState({\r\n                error: errorCode.isSelf,\r\n                loaded: true\r\n            });\r\n        }else{\r\n            const uid = parseInt(this.props.uid);\r\n            this.setState({\r\n                uid: uid,\r\n                error: errorCode.none,\r\n                loaded: false\r\n            });\r\n            this.fetchUser(uid)\r\n                .then()\r\n                .catch();\r\n        }\r\n    };\r\n    /*\r\n        userInfo gets fetched from server\r\n     */\r\n    async fetchUser (uid) {\r\n\r\n        const config = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json'\r\n            }\r\n        };\r\n        const response = await fetch('/user/' + uid, config);\r\n        //const json = await response.json()\r\n        if (response.ok) {\r\n            //return json\r\n            let data = await response.json();\r\n\r\n            this.setState({\r\n                userInfo: data,\r\n                loaded: true\r\n            });\r\n\r\n            return data;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setUser();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            check if uid changed\r\n         */\r\n        if(prevProps.uid !== this.props.uid){\r\n            this.setUser();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport Modal from \"../utilComp/Modal\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport Dummy from \"../utilComp/Dummy\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\nimport UserItem from \"./newChat/chooseUser/UserItem\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterBigScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <NewChat />\r\n                </Modal>\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <Dummy>\r\n                        {props.children}\r\n                        <Modal>\r\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                        </Modal>\r\n                    </Dummy>\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                {props.children}\r\n                <Modal>\r\n                    <h3>settings</h3>\r\n                </Modal>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React,{useEffect} from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch,\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\r\n\r\nexport default function GridBigScreens(props){\r\n\r\n    let { path, url } = useRouteMatch();\r\n    let params = useParams();\r\n\r\n\r\n    useEffect(() => {\r\n       /*\r\n            newMessages is set to 0, because big screen\r\n        */\r\n        if(props.newMessages !== 0)\r\n            props.setParentState({\r\n                newMessages: 0\r\n            });\r\n    });\r\n\r\n    return(\r\n        <div className=\"row w-100 justify-content-end row-height\">\r\n            <div className=\"col-md-5 col-lg-4 col-xl-3 d-none d-md-block pr-3 pl-0 h-100\">\r\n\r\n                <ChatList\r\n                    setHomeState={props.setParentState}\r\n                />\r\n            </div>\r\n            <div className=\"col-md-7 col-lg-8 col-xl-9 col-overflow\"\r\n                 style={{padding:'0'}}\r\n            >\r\n\r\n                <Switch>\r\n                    <Route path={`${path}/user/:uid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <NormalChatView\r\n                                    uid={routeProps.match.params.uid}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/group/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.chat}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={`${path}/groupInfo/:gcid`} render={\r\n                        routeProps => (\r\n                            <ModalRouterBigScreens>\r\n                                <GroupChatView\r\n                                    gcid={routeProps.match.params.gcid}\r\n                                    tab={groupChatTabs.info}\r\n                                />\r\n                            </ModalRouterBigScreens>\r\n                        )\r\n                    } />\r\n                    <Route path={path}>\r\n                        <ModalRouterBigScreens>\r\n                            <h1>noch kein chat ausgewählt</h1>\r\n                        </ModalRouterBigScreens>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{Component} from \"react\";\r\nimport chatSocket from \"../../chatData/chatSocket\";\r\n\r\nexport default class TypeMsgContainer extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersTyping: []\r\n        };\r\n    }\r\n    typeStateChanged = () => {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        this.setState({\r\n            usersTyping: chat.getUsersTyping()\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"typeMsg-container\">\r\n                {this.state.usersTyping.map((user,index) => (\r\n                    <div key={index} className=\"typeMsg\">\r\n                        {user.username + \" schreibt...\"}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n            es wird überprüft, ob sich der chat geändert hat\r\n            wenn ja, werden events neu initialisiert\r\n         */\r\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\r\n\r\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\r\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n\r\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\r\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\r\n    }\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport NewChat from \"./newChat/NewChat\";\r\nimport UserInfo from \"./userInfo/UserInfo\";\r\n/*\r\n    modals are always at the end of the url\r\n */\r\nexport default function ModalRouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    return(\r\n        <Switch>\r\n            <Route path={`${path}/newChat`}>\r\n                <NewChat />\r\n            </Route>\r\n            <Route path={`${path}/userInfo/:uidInfo`} render={\r\n                routeProps => (\r\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\r\n                )\r\n            } />\r\n            <Route path={`${path}/settings`}>\r\n                <h3>settings</h3>\r\n            </Route>\r\n            <Route path=\"*\">\r\n                {props.children}\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useRouteMatch\r\n} from \"react-router-dom\";\r\nimport ChatList from \"./allChats/ChatList\";\r\nimport NormalChatView from \"./chatView/NormalChatView\";\r\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\r\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\r\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\r\n\r\nexport default function RouterSmallScreens(props){\r\n\r\n    let { path } = useRouteMatch();\r\n\r\n    const renderTypeMsgContainer = () => {\r\n        if(props.currentChat.type !== '' && props.currentChat.id !== 0){\r\n            return(\r\n                <TypeMsgContainer\r\n                    chatType={props.currentChat.type}\r\n                    chatId={props.currentChat.id}\r\n                />\r\n            )\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return(\r\n        <div className=\"row-height position-relative\">\r\n            <Switch>\r\n                <Route path={`${path}/user/:uid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <NormalChatView\r\n                                uid={routeProps.match.params.uid}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                }>\r\n                </Route>\r\n                <Route path={`${path}/group/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.chat}\r\n                            />\r\n                            {renderTypeMsgContainer()}\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={`${path}/groupInfo/:gcid`} render={\r\n                    routeProps => (\r\n                        <ModalRouterSmallScreens>\r\n                            <GroupChatView\r\n                                gcid={routeProps.match.params.gcid}\r\n                                tab={groupChatTabs.info}\r\n                            />\r\n                        </ModalRouterSmallScreens>\r\n                    )\r\n                } />\r\n                <Route path={path}>\r\n                    <ModalRouterSmallScreens>\r\n                        <ChatList\r\n                            paddingTop=\"20px\"\r\n                            setHomeState={props.setParentState}\r\n                        />\r\n                    </ModalRouterSmallScreens>\r\n                </Route>\r\n                <Route path = \"*\">\r\n                    <h3>Not found!</h3>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n\r\n}","import React,{Component} from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport {logout} from \"../Auth/Auth\";\r\nimport Responsive from \"../responsive/Responsive\";\r\nimport GridBigScreens from \"./GridBigScreens\";\r\nimport RouterSmallScreens from \"./RouterSmallScreens\";\r\nimport chatSocket from \"../chatData/chatSocket\";\r\n\r\nexport default class Chat extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            /*\r\n                the current chat of the user\r\n             */\r\n            currentChat: {\r\n                type: '',\r\n                id: 0\r\n            },\r\n            /*\r\n                which modal is currently open\r\n                    0: none\r\n             */\r\n            modal: 0,\r\n            /*\r\n                info about the currently open modal\r\n             */\r\n            modalInfo: null,\r\n            /*\r\n                only relevant for mobile devices, is shown at btn back\r\n                gets incremented if there is a message in a non-selected chat\r\n             */\r\n            newMessages: 0,\r\n            /*\r\n                is shown at the user-icon\r\n             */\r\n            notifications: 0\r\n        };\r\n        /*\r\n            if chatsocket is undefined, it gets initialized\r\n         */\r\n        if(!chatSocket.initCalled) {\r\n            chatSocket.init().then(r => {});\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        //event-listener: gets triggered if current chat changes\r\n        chatSocket.event.on('currentChat changed',this.currentChatChanged);\r\n        //event-lister: gets triggered if there is a new message\r\n        chatSocket.event.on('new message',this.newMsg);\r\n    }\r\n\r\n    currentChatChanged = currentChat => {\r\n        /*\r\n            current chat gets changed\r\n         */\r\n        if(currentChat === null) {\r\n            this.setState({\r\n                currentChat: {\r\n                    type: '',\r\n                    id: 0\r\n                }\r\n            });\r\n        }else{\r\n            this.setState({\r\n                currentChat: {\r\n                    type: currentChat.type,\r\n                    id: currentChat.id\r\n                },\r\n                newMessages: chatSocket.getNumberNewMessages()\r\n            });\r\n        }\r\n    };\r\n\r\n    logout = () => {\r\n        logout().then(() => {\r\n            // eslint-disable-next-line no-restricted-globals\r\n            location.reload();\r\n        });\r\n    };\r\n\r\n    /*\r\n        gets called if there is a new msg\r\n     */\r\n    newMsg = () => {\r\n        /*\r\n            newMsg gets set\r\n         */\r\n        this.setState(state => ({\r\n            newMessages: chatSocket.getNumberNewMessages()\r\n        }));\r\n    };\r\n\r\n    render() {\r\n\r\n        const setState = this.setState.bind(this);\r\n\r\n        return (\r\n            <div className=\"h-100\">\r\n                <Header\r\n                    logout={this.logout}\r\n                    headerLeft={{\r\n                        newMessages: this.state.newMessages\r\n                    }}\r\n                />\r\n\r\n                <Responsive displayIn={[\"Mobile\"]}>\r\n                    <RouterSmallScreens\r\n                        currentChat={this.state.currentChat}\r\n                        setParentState={setState}\r\n                    />\r\n                </Responsive>\r\n\r\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\r\n\r\n                    <GridBigScreens\r\n                        newMessages={this.state.newMessages}\r\n                        setParentState={setState}\r\n                    />\r\n\r\n                </Responsive>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    componentWillUnmount() {\r\n        /*\r\n            event-listeners get removed\r\n         */\r\n        chatSocket.event.rm('currentChat changed',this.currentChatChanged);\r\n        chatSocket.event.rm('new message',this.newMsg);\r\n    }\r\n}","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    useLocation,\n    Redirect\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {loggedIn} from \"./Auth/Auth\";\nimport Chat from \"./Home/Home\";\nimport 'bootstrap';\nimport 'popper.js';\n\nexport default function App() {\n  return (\n      <Router>\n        <div className=\"h-100\">\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <div className=\"h-100\">\n                <Switch>\n                    <Route path=\"/chat\">\n                        {redirectToLogin('chat')}\n                    </Route>\n                    <Route exact path=\"/login\">\n                        {showLogin()}\n                    </Route>\n                    <Route exact path=\"/register\">\n                        {showRegister()}\n                    </Route>\n                    <Route exact path=\"/\">\n                        {redirectToLogin('/')}\n                    </Route>\n                    <Route path=\"*\">\n                      <NoMatch />\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n      </Router>\n  );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\nfunction showLogin(){\n    if(loggedIn)\n        return (\n            <Redirect\n                to={{\n                    pathname: \"/chat\"\n                }}\n            />\n        );\n    else\n        return(\n            <Login />\n        );\n}\nfunction showRegister(){\n    if(loggedIn)\n        return (\n            <Redirect\n                to={{\n                    pathname: \"/chat\"\n                }}\n            />\n        );\n    else\n        return(\n            <Register />\n        );\n}\nfunction redirectToLogin(location){\n    if(loggedIn) {\n        if (location === 'chat') {\n            return (\n                <Chat/>\n            );\n        }\n        else\n            return (\n                <Redirect\n                    to={{\n                        pathname: \"/chat\"\n                    }}\n                />\n            )\n    }else {\n        return(\n            <Redirect\n                to={{\n                    pathname: \"/login\"\n                }}\n            />\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {isLoggedIn} from \"./Auth/Auth\";\n\nisLoggedIn().then(r => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}