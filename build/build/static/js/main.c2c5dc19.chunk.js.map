{"version":3,"sources":["img/placeholder.png","Auth/MsgBox.js","Auth/authUI.js","Auth/Login.js","Auth/Register.js","utilComp/PrivateRoute.js","responsive/utilResponsive.js","responsive/Responsive.js","utilComp/Dummy.js","Home/Header/HeaderLeft.js","Home/Header/Header.js","Home/allChats/ChatSearchBox.js","util/Color.js","util/BinSearch.js","global/requests.js","chatData/User.js","global/globalData.js","Home/chatView/chatContainer/message/NormalMessage.js","Home/chatView/chatContainer/message/StatusMessage.js","Home/chatView/chatContainer/message/Message.js","chatData/message/statusMessage.js","chatData/message/message.js","util/Event.js","chatData/chat/chat.js","chatData/chat/normalChat.js","chatData/chat/groupChat.js","chatData/tempChatLoader.js","chatData/chatSocket.js","Home/allChats/ChatItem.js","Home/allChats/ChatList.js","Home/chatView/ChatViewLoader.js","Home/chatView/chatContainer/MessageForm.js","Home/chatView/chatContainer/ChatContainer.js","Home/chatView/TempChatContainer.js","Home/chatView/chatViewErrorMessages.js","Home/chatView/NormalChatView.js","utilComp/Modal.js","Home/selectUsers/UserItem.js","Home/selectUsers/UserList.js","Home/selectUsers/SelectUsers.js","Home/chatView/groupChatInfo/AddUsers.js","Home/chatView/groupChatInfo/UserOptions.js","Home/chatView/groupChatInfo/ChatOptions.js","Home/chatView/groupChatInfo/edit/inlineEdit.js","Home/chatView/groupChatInfo/edit/editDescription.js","Home/chatView/groupChatInfo/edit/editChatName.js","Home/chatView/groupChatInfo/GroupChatInfo.js","Home/chatView/groupChatInfo/ModalRouterGroupChatInfo.js","Home/chatView/GroupChatView.js","Home/selectChat/UserItem.js","Home/selectChat/SelectChat.js","Home/newChat/chooseUser/ChooseUser.js","Home/newChat/newGroup/GroupInfoForm.js","Home/newChat/newGroup/NewGroup.js","Home/newChat/NewChat.js","Home/userInfo/UserInfo.js","Home/ModalRouterBigScreens.js","Home/GridBigScreens.js","Home/chatView/TypeMsgContainer.js","Home/ModalRouterSmallScreens.js","Home/RouterSmallScreens.js","Home/Home.js","global/authTokens.js","App.js","global/global.js","global/initChats.js","global/chats.js","serviceWorker.js","index.js"],"names":["module","exports","ErrorMsg","className","this","props","children","Component","extendJQuery","$","fn","extend","pwToggle","prepend","addClass","css","position","right","top","color","cursor","width","height","hover","icon","get","input","addEventListener","type","classList","remove","add","Login","changeHandler","event","nam","target","name","val","value","setState","submitHandler","preventDefault","uNameErr","pwErr","valConstraints","username","presence","length","minimum","tooShort","maximum","tooLong","format","pattern","RegExp","message","password","valResult","validate","state","valid","login","then","data","success","undefined","a","config","method","headers","body","JSON","stringify","fetch","response","ok","json","dispatch","setUserSelf","uid","setAuthTokens","tokens","history","push","redirect","style","display","maxWidth","onSubmit","htmlFor","placeholder","onChange","id","to","withRouter","Register","pwRepeatErr","passwordRepeat","equality","pwRepeat","register","PrivateRoute","component","rest","useGlobal","global","render","loaded","authTokens","pathname","referer","location","IdDeviceBreakpointsByWidth","IdMobileHeight","getWindowDimension","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","initialState","Responsive","displayIn","shouldRenderChildren","shouldRender","Fragment","handleResize","indexOf","removeEventListener","React","PureComponent","Dummy","didMount","prevProps","prevState","snapshot","didUpdate","infoHeaderCenter","HeaderLeft","onClick","goBack","newMessages","HeaderCenter","ihcData","data-toggle","title","gcid","renderChatInfo","Header","clickCheckBox","checkBoxClicked","stopPropagation","setTimeout","clickDocument","changeChecked","logout","deleteAuthTokens","checked","userSelf","tooltip","ChatSearchBox","searchChanged","onSearch","Colors","aqua","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightgreen","lightgrey","lightpink","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","result","count","prop","names","Math","random","BinSearchArray","key","left","k","floor","i","getIndex","splice","getNearestKey","Array","makeRequest","tokensP","getGlobal","configI","status","getDispatch","Error","UserErrorCode","chatSocket","users","normalChat","user","temporaryChat","createNew","doesExist","userExists","blocked","User","_normalChat","_groupChats","groupChats","_uid","_username","_color","globalData","fetchData","NormalMessage","msg","bySelf","userTop","UsernameSpan","content","text","mDateString","StatusMessage","StatusMsgContent","getStatusMessageString","Message","messageTypes","normalMessage","statusMessage","middleStringD","statusMessagesD","useReact","passiveUsers","statusMessageTypes","chatCreated","renderStringD","usersAdded","usersRemoved","usersJoined","usersLeft","usersMadeAdmin","usersRemovedAdmin","getStatusMessageStringD","middle","getMiddleString","getPassiveUsers","getTString","mid","chat","date","Date","now","userTopShown","getMessageViewDateString","dateString","getDateString","getUserTop","isBySelf","isDateToday","getTimeString","isDateYesterday","msgString","substr","getMessageObject","dateNow","getDate","getMonth","getFullYear","ds","d","ms","m","y","hs","h","getHours","getMinutes","date2","getDay","_mid","_date","_chat","_type","_content","EventHandler","events","Map","has","set","e","_events","Chat","chatName","_messages","_event","_unreadMessages","_reachedTopMessages","messageData","empty","messages","num","reachedTopMessages","getLastMsgId","getLastMessage","chatType","chatId","lastMsgId","lMessages","showUserInfoMessage","rMessages","newMsg","unreadMessages","latestMessage","getLatestMessageObject","lm","getFirstMessage","getChatViewMsgString","getChatViewDateString","_id","_chatName","NormalChat","_isTyping","otherUser","isTyping","trigger","_otherUser","GroupChat","uids","_users","_usersTyping","usersTyping","rc","isMember","getIndexOfTyping","find","findIndex","TempChatLoader","_isShown","chatNow","isShown","showTempChat","updateTempChat","hideTempChat","otherUid","otherUsername","mentions","media","newChat","ncid","chats","normal","addChat","selectChat","hide","_chatNow","ChatSocket","_userSelf","_chats","group","_finishedLoading","_temporaryChat","_initCalled","socket","removeAllListeners","disconnect","initCalled","userInfo","io","connect","secure","emit","on","initChats","getChat","isCurrentChat","addMessage","hasNewMsg","startedTyping","stoppedTyping","addNewChat","alert","reload","addNewNormalChat","addNewGroupChat","finishedLoading","getChatArraySortedByDate","getMessageTime","c","getTime","getMaxDate","iFrom","max","swap","items","firstIndex","secondIndex","temp","getSorted","sorted","arr","clone","getChatObject","cloneArr","arr1","arr2","merged","p1","p2","mergeArr","currentChat","members","initFirstMessage","firstMessage","member","addGroupChat","_socket","ChatItem","isSelected","typeStateChanged","typeMsg","userTyping","getLatestUserTyping","lastMsg","renderMsg","renderDate","rm","ChatList","searchValue","paddingTop","found","tempChat","map","includes","ChatViewLoader","borderWidth","role","MessageForm","_userTyping","_typeEventEmitted","onTyping","handleTypeMessage","isTempChat","clearTimeout","typeTimeout","typeEventEmitted","createNewNormalChat","replace","sendMessage","catch","err","onEmojiInput","emoji","native","toggleEmoji","showEmoji","autoComplete","bottom","onSelect","_typeTimeout","_isTempChat","ChatContainer","_isMounted","scrollHandler","scrollToBottom","getScrollToBottom","messagesNode","scrollTop","loadMessages","setScrollToBottom","scrollHeight","offsetHeight","assignMessagesRef","msgLoading","addLoadedMessages","chatChanged","bind","typeMessages","ReactDOM","findDOMNode","isMounted","setGlobal","lastDate","onScroll","ref","date1","renderDateContainer","_messagesNode","TempChatContainer","show","update","AddressNotValid","CannotWriteYourself","BlockedByThisUser","UserNotExisting","NoMemberInPublicChat","NoAuthorization","ChatNotExisting","GeneralError","NormalChatView","userChanged","parseInt","error","getUserNormalChat","res","selectNormalChat","selectTempChat","renderLoader","isNaN","Modal","ModalHeader","ModalMain","UserItem","clicked","deselectUser","index","selectUser","errorCode","lastRequest","searchResult","hasMore","loadUsers","concat","scrollParentRef","pageStart","loadMore","loader","useWindow","getScrollParent","item","isUserSelected","SelectUsers","selectedUsers","arrClone","deselectIndex","btnNextClicked","onNext","showOnlySelected","AddUsers","useHistory","submitUsers","numAlreadyLoaded","search","limit","start","UserOptions","isSelfAdmin","memberSelf","isAdmin","removeMemberFromChat","makeMemberAdmin","removeMemberAdmin","isMemberSelf","ChatOptions","leaveChat","console","log","removeSelfAdmin","Edit","handleEdit","isEditing","editPressed","class","changeCallback","optClass","DescriptionEdit","description","ChatNameEdit","GroupChatInfo","uidSelf","overlay","animation","alignPoint","ModalRouterGroupChatInfo","path","useRouteMatch","groupChatInfo","groupChatErrorCode","groupChatTabs","GroupChatView","loadGroupChatInfo","chatData","chatExists","r","selectGroupChat","tab","renderChat","elementClicked","SelectChat","loadChats","showOptions","showSearchBar","ChooseUser","newGroupClick","setCurrentTab","tabs","newGroup","joinGroupClick","chooseGroup","searchValid","options","GroupInfoForm","groupNameChanged","groupName","descriptionChanged","isPublicChanged","isPublic","formSubmitted","submitGroup","src","alt","minLength","rows","NewGroup","showEnterChatInfo","currentTab","createGroupChat","chooseUser","NewChat","newTab","getHeader","router","UserInfo","setUser","fetchUser","ModalRouterBigScreens","routeProps","match","params","uidInfo","GridBigScreens","padding","TypeMsgContainer","getUsersTyping","ModalRouterSmallScreens","RouterSmallScreens","renderTypeMsgContainer","modal","modalInfo","notifications","init","addReducer","localStorage","removeItem","deleteUserSelf","resetGlobal","destruct","existingTokens","setItem","App","useDispatch","useEffect","parse","getItem","initAuthTokens","exact","NoMatch","useLocation","chatsLoaded","element","chatsClone","chatObject","unshift","getMessages","chat1","chat2","initChatReducers","Boolean","hostname","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2c5dc19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/placeholder.99b71231.png\";","import React,{Component} from \"react\";\n\nclass ErrorMsg extends Component{\n    render() {\n        return(\n            <small className=\"alert alert-danger p-1 message d-block\">\n                {this.props.children}\n            </small>\n        )\n    }\n}\n\nexport {ErrorMsg};","import $ from 'jquery';\n/*\n    benötigt:\n        jQuery\n        font-awesome\n\n    Password-toggle\n */\nexport function extendJQuery(){\n    $.fn.extend({\n        pwToggle: function(){\n            this.prepend($('<i>')\n                .addClass(\"fas fa-eye-slash psw-toggle-icon\")\n                .css({\n                    position: 'absolute',\n                    right: '20px',\n                    top: '11px',\n                    color: '#666',\n                    cursor: 'pointer',\n                    width: '16px',\n                    height: '16px'\n                })\n                .hover(function() {\n                    $(this).css('color','#666');\n                }, function() {\n                    $(this).css('color','#000');\n                }));\n            this.css({\n                position:\"relative\"\n            });\n\n            let icon = this.get(0).children[0];\n            let input = this.get(0).children[1];\n\n            icon.addEventListener(\"click\",function(){\n                if(input.type === \"password\"){\n                    icon.classList.remove(\"fa-eye-slash\");\n                    icon.classList.add(\"fa-eye\");\n                    input.type = \"text\";\n                }else{\n                    icon.classList.remove(\"fa-eye\");\n                    icon.classList.add(\"fa-eye-slash\");\n                    input.type = \"password\";\n                }\n            });\n        }\n    });\n}","import React,{Component} from \"reactn\";\nimport {\n    Link,\n    withRouter\n} from \"react-router-dom\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport $ from 'jquery';\nimport {extendJQuery} from './authUI';\n\nclass Login extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uNameErr: '',\n            username: '',\n            pwErr: '',\n            password: '',\n            valid: false,\n            redirect: false\n        };\n        extendJQuery();\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'has to be at least 3 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w\\w*$/),\n                    message: 'not valid'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            }\n        };\n        /*\n            es wird validiert\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password\n        },valConstraints);\n\n        if(typeof(valResult)!=\"undefined\"){\n\n            let uNameErr;\n            let pwErr;\n\n            if(typeof(valResult.username)!=\"undefined\") {\n                uNameErr = valResult.username[0];\n            }else{\n                uNameErr = '';\n            }\n            if(typeof(valResult.password)!=\"undefined\") {\n                pwErr = valResult.password[0];\n            }else{\n                pwErr = '';\n            }\n\n            this.setState({\n                valid: false,\n                uNameErr: uNameErr,\n                pwErr: pwErr\n            });\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: ''\n            });\n           /*\n                request to server\n            */\n           this.login(this.state.username,this.state.password).then(data => {\n               if(!data.success){\n\n                   if(data.username !== undefined)\n                       this.setState({\n                           valid: false,\n                           uNameErr: data.username\n                       });\n                   if(data.password !== undefined)\n                       this.setState({\n                           valid: false,\n                           pwErr: data.password\n                       });\n               }\n           });\n        }\n\n    };\n    uNameErr = () => {\n        if(this.state.uNameErr !== '')\n            return (\n                <ErrorMsg>\n                    {this.state.uNameErr}\n                </ErrorMsg>\n            )\n    };\n    pwErr = () => {\n        if(this.state.pwErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwErr}\n                </ErrorMsg>\n            )\n    };\n\n    login = async (username,password) => {\n        try {\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password\n                })\n            };\n            const response = await fetch('/auth/login', config);\n            //const json = await response.json()\n            if (response.ok) {\n                //return json\n                let data = await response.json();\n\n                if(data.success) {\n                    this.dispatch.setUserSelf(data.uid,username);\n\n                    this.dispatch.setAuthTokens(data.tokens);\n\n                    this.props.history.push('/chat');\n                }\n                return data;\n            } else {\n                return null;\n            }\n        } catch (error) {\n            return null;\n        }\n    };\n\n    render(){\n\n        return(\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Login</h1>\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                {this.uNameErr()}\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                {this.pwErr()}\n                                <div id=\"psw-group\">\n                                    <input type=\"password\"\n                                           name=\"password\"\n                                           className=\"form-control\"\n                                           placeholder=\"Passwort eingeben\"\n                                           onChange={this.changeHandler}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                haben Sie noch keinen Account? <Link to=\"/register\">Jetzt registrieren</Link>\n                            </div>\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                value=\"Login\"\n                            />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        $('#psw-group').pwToggle();\n    }\n}\n\nexport default withRouter(Login);","import React,{Component} from \"reactn\";\nimport validate from \"validate.js\";\nimport {ErrorMsg} from \"./MsgBox\";\nimport $ from 'jquery';\nimport {extendJQuery} from './authUI';\nimport {withRouter} from \"react-router-dom\";\n\nclass Register extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uNameErr: '',\n            username: '',\n            pwErr: '',\n            password: '',\n            pwRepeatErr: '',\n            pwRepeat: '',\n            valid: false,\n            redirect: false\n        };\n        extendJQuery();\n    }\n    changeHandler = event => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n    };\n    submitHandler = event => {\n        event.preventDefault();\n        /*\n            constraints für validation\n         */\n        const  valConstraints = {\n            username: {\n                presence: true,\n                length: {\n                    minimum: 3,\n                    tooShort: 'has to be at least 3 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                },\n                format: {\n                    pattern: new RegExp(/^\\w\\w*$/),\n                    message: 'not valid'\n                }\n            },\n            password: {\n                presence: true,\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            },\n            passwordRepeat: {\n                presence: true,\n                equality: \"password\",\n                length: {\n                    minimum: 8,\n                    tooShort: 'has to be at least 8 characters long',\n                    maximum: 30,\n                    tooLong: 'can only be 30 characters long'\n                }\n            }\n        };\n        /*\n            es wird validiert\n         */\n        const valResult = validate({\n            username: this.state.username,\n            password: this.state.password,\n            passwordRepeat: this.state.pwRepeat\n        },valConstraints);\n\n        if(typeof(valResult)!=\"undefined\"){\n\n            let uNameErr;\n            let pwErr;\n            let pwRepeatErr;\n\n            if(typeof(valResult.username)!=\"undefined\") {\n                uNameErr = valResult.username[0];\n            }else{\n                uNameErr = '';\n            }\n\n            if(typeof(valResult.password)!=\"undefined\") {\n                pwErr = valResult.password[0];\n            }else{\n                pwErr = '';\n            }\n\n            if(typeof(valResult.passwordRepeat)!=\"undefined\") {\n                pwRepeatErr = valResult.passwordRepeat[0];\n            }else{\n                pwRepeatErr = '';\n            }\n\n            this.setState({\n                valid: false,\n                uNameErr: uNameErr,\n                pwErr: pwErr,\n                pwRepeatErr: pwRepeatErr\n            });\n\n        }else {\n            this.setState({\n                valid: true,\n                uNameErr: '',\n                pwErr: '',\n                pwRepeatErr: ''\n            });\n            /*\n                request to server\n             */\n            this.register(this.state.username,this.state.password).then(data => {\n                if(!data.success){\n\n                    if (data.username !== undefined)\n                        this.setState({\n                            valid: false,\n                            uNameErr: data.username\n                        });\n                }\n            });\n        }\n    };\n    uNameErr = () => {\n        if(this.state.uNameErr !== '')\n            return (\n                <ErrorMsg>\n                    {this.state.uNameErr}\n                </ErrorMsg>\n            )\n    };\n    pwErr = () => {\n        if(this.state.pwErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwErr}\n                </ErrorMsg>\n            )\n    };\n    pwRepeatErr = () => {\n        if(this.state.pwRepeatErr !== '')\n            return(\n                <ErrorMsg>\n                    {this.state.pwRepeatErr}\n                </ErrorMsg>\n            )\n    };\n\n    register = async(username,password) => {\n        try {\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password\n                })\n            };\n            const response = await fetch('/auth/register', config);\n            //const json = await response.json()\n            if (response.ok) {\n                //return json\n                let data = await response.json();\n\n                if(data.success) {\n                    this.dispatch.setUserSelf(data.uid,username);\n\n                    this.dispatch.setAuthTokens(data.tokens);\n\n                    this.props.history.push('/chat');\n                }\n                return data;\n            }else\n                return null;\n        } catch (error) {\n            return null;\n        }\n    };\n\n    render(){\n\n        return (\n            <div className=\"h-100\" style={{display: \"flex\"}}>\n                <div className=\"col-sm-12 my-auto\">\n                    <div className=\"container border rounded p-3\" style={{maxWidth: \"800px\"}}>\n                        <h1>Registrieren</h1>\n                        <form onSubmit={this.submitHandler}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Benutzername:</label>\n                                {this.uNameErr()}\n                                <input type=\"text\"\n                                       name=\"username\"\n                                       className=\"form-control\"\n                                       placeholder=\"Benutzernamen eingeben\"\n                                       onChange={this.changeHandler}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort:</label>\n                                {this.pwErr()}\n                                <div id=\"psw-group\">\n                                    <input type=\"password\"\n                                           name=\"password\"\n                                           className=\"form-control\"\n                                           placeholder=\"Passwort eingeben\"\n                                           onChange={this.changeHandler}\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Passwort wiederholen:</label>\n                                {this.pwRepeatErr()}\n                                <div id=\"psw-group-repeat\">\n                                    <input type=\"password\"\n                                           name=\"pwRepeat\"\n                                           className=\"form-control\"\n                                           placeholder=\"Passwort eingeben\"\n                                           onChange={this.changeHandler}\n                                    />\n                                </div>\n                            </div>\n                            <input type=\"submit\" className=\"btn btn-primary\" value=\"Registrieren\"/>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        $('#psw-group-repeat, #psw-group').pwToggle();\n    }\n}\n\nexport default withRouter(Register);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport {useGlobal} from \"reactn\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n\n    const [global,setGlobal] = useGlobal();\n\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                global.loaded ? (\n                    global.authTokens ?\n                    (\n                        <Component {...props} />\n                    )\n                    : (\n                        <Redirect\n                            to={{\n                                pathname: \"/login\",\n                                state: {\n                                    referer: props.location\n                                }\n                            }}\n                        />\n                    )\n                ) : null\n            }\n        />\n    );\n}\n\nexport default PrivateRoute;","//https://medium.com/applike/https-medium-com-applike-react-responsive-conditional-rendering-of-component-c97ab247097d\n\nexport const DeviceWidthObject = {\n\n    MobileSmall      : { max: 320, min: 0 },\n    MobileMedium     : { max: 375, min: 321 },\n    MobileLarge      : { max: 767, min: 376 },\n\n    Tablet           : { max: 991, min: 768 },\n\n    LaptopSmall      : { max: 1024, min: 992 },\n    LaptopLarge      : { max: 1440, min: 1025 },\n\n    LargerThanLaptop : { max: 2560, min: 1441 },\n    LargeScreenMax   : { max: 999999, min: 2561 }\n\n};\n\nexport const IdDeviceBreakpointsByWidth = {\n\n    laptop_max : 1440,\n    laptop_min : 992,\n    tablet_min : 768,\n    tablet_max : 991,\n    mobile_max : 767,\n    default_min : 768 // Unrecognized device\n};\n\nexport const IdMobileHeight = {\n    mobileLandscape_min : 320,\n    mobileLandscape_max : 425\n};\n\nexport const getWindowDimension = () => {\n\n    const width = window.innerWidth\n        || document.documentElement.clientWidth\n        || document.body.clientWidth;\n\n    const height = window.innerHeight\n        || document.documentElement.clientHeight\n        || document.body.clientHeight;\n\n    return {width, height}\n\n};\n\nexport const getDeviceTypeInfo = () => {\n    const { width, height } = getWindowDimension();\n    const buildDeviceDetails = {\n        deviceType: '',\n        deviceTypeVariant: '',\n        orientation: 'Portrait',\n        width,\n        height,\n        isFallback: false\n    };\n//  Edge case\n    const hasEdgeCase = handleExceptions(buildDeviceDetails, width, height);\n    if (hasEdgeCase) {\n        return hasEdgeCase\n    }\n    if (height < width) {\n        // Orientation is landscape\n        buildDeviceDetails.orientation = 'Landscape';\n\n        if (height <= IdMobileHeight.mobileLandscape_max) {\n            // Mobile (landscape)\n            buildDeviceDetails.deviceType = 'Mobile';\n            for (const devc in DeviceWidthObject) {\n                if (\n                    height <= DeviceWidthObject[devc].max &&\n                    height >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            // Tablet (landscape)\n            buildDeviceDetails.deviceType = 'Tablet';\n            buildDeviceDetails.deviceTypeVariant = 'Tablet';\n        } else if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            // Laptop (landscape)\n            buildDeviceDetails.deviceType = 'Laptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc;\n                    break\n                }\n            }\n        } else if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            // Larger than Laptop (landscape)\n            buildDeviceDetails.deviceType = 'LargerThanLaptop';\n\n            for (const devc in DeviceWidthObject) {\n                if (\n                    width <= DeviceWidthObject[devc].max &&\n                    width >= DeviceWidthObject[devc].min\n                ) {\n                    buildDeviceDetails.deviceTypeVariant = devc\n                    break\n                }\n            }\n        } else {\n\n            buildDeviceDetails.deviceType = 'Mobile';\n            buildDeviceDetails.deviceTypeVariant = 'MobileLarge';\n            buildDeviceDetails.isFallback = true\n        }\n\n        return buildDeviceDetails\n    } else {\n        // Orientation is portrait\n        buildDeviceDetails.orientation = 'Portrait';\n\n        for (const devc in DeviceWidthObject) {\n            if (\n                width <= DeviceWidthObject[devc].max &&\n                width >= DeviceWidthObject[devc].min\n            ) {\n                buildDeviceDetails.deviceTypeVariant = devc;\n                break\n            }\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.laptop_max &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            buildDeviceDetails.deviceType = 'Laptop'\n        }\n\n        if (\n            width <= IdDeviceBreakpointsByWidth.tablet_max &&\n            width >= IdDeviceBreakpointsByWidth.tablet_min\n        ) {\n            buildDeviceDetails.deviceType = 'Tablet'\n        }\n        if (width <= IdDeviceBreakpointsByWidth.mobile_max) {\n            buildDeviceDetails.deviceType = 'Mobile'\n        }\n\n        if (width > IdDeviceBreakpointsByWidth.laptop_max) {\n            buildDeviceDetails.deviceType = 'LargerThanLaptop'\n        }\n\n        return buildDeviceDetails\n    }\n};\n\nconst handleExceptions = (buildDeviceDetails, width, height) => {\n    //  iPadPro\n    if (width === 1024 && height === 1366) {\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Portrait';\n\n        return buildDeviceDetails\n    } else if (width === 1366 && height === 1024) {\n        //  Edge case\n        buildDeviceDetails.deviceType = 'Tablet';\n        buildDeviceDetails.deviceTypeVariant = 'iPadPro';\n        buildDeviceDetails.orientation = 'Landscape';\n\n        return buildDeviceDetails\n    }\n\n    return undefined\n};","import React from 'react'\nimport {\n    getWindowDimension,\n    IdDeviceBreakpointsByWidth,\n    IdMobileHeight\n} from './utilResponsive';\n\nconst { width, height } = getWindowDimension();\nconst initialState = { width, height };\n\nexport default class Responsive extends React.PureComponent {\n\n    state = initialState;\n    componentDidMount () {\n        window.addEventListener('resize', this.handleResize, false)\n    }\n    componentWillUnmount () {\n        window.removeEventListener('resize', this.handleResize, false)\n    }\n    render = () => {\n        const { children, displayIn } = this.props;\n        const { width, height } = this.state;\n        const shouldRenderChildren = this.shouldRender(displayIn, width, height);\n        return (\n            <React.Fragment>\n                {shouldRenderChildren ? children : null}\n            </React.Fragment>\n        )\n    };\n    handleResize = () => {\n        const { width, height } = getWindowDimension();\n        this.setState({ width, height })\n    };\n    shouldRender = (display, width, height) => {\n        if (\n            display.indexOf('Laptop') !== -1 &&\n            width >= IdDeviceBreakpointsByWidth.laptop_min\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('Tablet') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.tablet_max &&\n                width >= IdDeviceBreakpointsByWidth.tablet_min)\n        ) {\n            return true\n        }\n        // For mobile regardless of orientation\n        if (\n            display.indexOf('Mobile') !== -1 &&\n            width <= IdDeviceBreakpointsByWidth.mobile_max\n        ) {\n            return true\n        }\n        if (\n            display.indexOf('MobilePortrait') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height >= IdMobileHeight.mobileLandscape_max)\n        ) {\n            return true\n        }    return !!(\n            display.indexOf('MobileLandScape') !== -1 &&\n            (width <= IdDeviceBreakpointsByWidth.mobile_max &&\n                height <= IdMobileHeight.mobileLandscape_min)\n        )\n    }\n}","import {Component} from \"react\";\n\nexport default class Dummy extends Component {\n\n    componentDidMount() {\n        if(typeof(this.props.didMount) === 'function')\n            this.props.didMount();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(typeof(this.props.didUpdate) === 'function')\n            this.props.didUpdate();\n    }\n\n    render() {\n        if(this.props.children)\n            return this.props.children;\n        return null;\n    }\n}","import React,{Component} from \"reactn\";\nimport Responsive from \"../../responsive/Responsive\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport \"./headerLeft.scss\";\n\nexport const infoHeaderCenter = {\n    none: 0,\n    normalChat: 1,\n    groupChat: 2\n};\n\nclass HeaderLeft extends Component{\n\n    render() {\n\n        const {pathname} = this.props.location;\n        /*\n            renders number of new messages\n         */\n        const renderNewMsgNumber = () => {\n            if(this.global.newMessages > 0){\n                return (\n                    <div className=\"btnBack-number\">\n                        {this.global.newMessages}\n                    </div>\n                )\n            }\n            return null;\n        };\n\n        const renderBtnBack = () => {\n            /*\n                only small screens\n             */\n            return (\n                <div className=\"float-left left\">\n                    <i id=\"btnBackToChatList\"\n                       className=\"fas fa-arrow-left fa-2x d-block d-md-none\"\n                       onClick={() => {this.props.history.goBack()}}\n                    />\n                    {renderNewMsgNumber()}\n                </div>\n            );\n        };\n\n        const renderChatInfo = () => {\n            /*\n                if there is a normal chat open, this info gets displayed\n             */\n            switch(this.global.infoHeaderCenter){\n\n                case infoHeaderCenter.normalChat:\n                    return (\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={pathname + \"/userInfo/\" + this.global.ihcData.uid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                case infoHeaderCenter.groupChat:\n                    return(\n                        <HeaderCenter>\n                            <h3 id=\"chat-info-name\">\n                                {this.global.ihcData.name}\n                            </h3>\n                            <Link to={\"/chat/groupInfo/\" + this.global.ihcData.gcid}>\n                                <i className=\"fas fa-info-circle fa-2x\"\n                                   data-toggle=\"tooltip\"\n                                   title=\"chat info\"\n                                />\n                            </Link>\n                        </HeaderCenter>\n                    );\n\n                default:\n                    return(\n                        <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                            <h3 className=\"pt-2 pl-2\">chat</h3>\n                        </Responsive>\n                    );\n            }\n        };\n\n        return(\n            <Dummy>\n                <Responsive displayIn={[\"Mobile\"]}>\n                    {renderBtnBack()}\n                </Responsive>\n                {renderChatInfo()}\n            </Dummy>\n        )\n    }\n}\nexport default withRouter(HeaderLeft);\n\nfunction HeaderCenter(props){\n    return(\n        <div id=\"chat-info\" className=\"center pt-2\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"reactn\";\nimport $ from 'jquery';\nimport HeaderLeft from \"./HeaderLeft\";\nimport {Link,withRouter} from \"react-router-dom\";\n\nimport './header.scss';\n\nclass Header extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checkBoxClicked: false\n        };\n    }\n    clickCheckBox = event => {\n        if(this.state.checkBoxClicked)\n            event.stopPropagation();\n        else {\n            setTimeout(() => {\n                this.setState(state => ({\n                    checkBoxClicked: true\n                }));\n            }, 20);\n        }\n    };\n    clickDocument = event => {\n        if (this.state.checkBoxClicked)\n            this.changeChecked(event);\n    };\n    changeChecked = event => {\n        this.setState(state => ({\n            checkBoxClicked: !state.checkBoxClicked\n        }));\n    };\n\n    logout = () => {\n        /*\n            authTokens are deleted\n         */\n        this.dispatch.deleteAuthTokens();\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"c-header\">\n\n                <HeaderLeft />\n\n                <div id=\"top-right\" className=\"right\" onClick={this.clickCheckBox}>\n\n                    <div className=\"right-l\" />\n\n                    <input type=\"checkbox\"\n                           id=\"btnControlTopRight\"\n                           className=\"btnControl\"\n                           checked={this.state.checkBoxClicked}\n                           onChange={this.changeChecked}\n                    />\n                    <label htmlFor=\"btnControlTopRight\">\n\n                        <div className=\"right-c\">\n                            <div className=\"d-only-when-small\">\n                                <i  id=\"user-info\"\n                                    className=\"fas fa-user fa-2x user-icon\"\n                                    data-toggle=\"tooltip\"\n                                    title=\"Benutzer-Info\"\n                                />\n                            </div>\n                            <div className=\"d-only-when-big top-2right\">\n\n                                <Link to={pathname + \"/userInfo/\" + this.global.userSelf.uid}>\n                                    <h4 id=\"username\"\n                                        className=\"p-2 username\"\n                                        data-toggle=\"tooltip\"\n                                        title=\"Benutzer-Info\"\n                                    >\n                                            {this.global.userSelf.username}\n                                    </h4>\n                                </Link>\n                                <div className=\"float-right\">\n                                    <Link to={pathname + \"/settings\"}>\n                                        <i className=\"fas fa-user-cog fa-2x\"\n                                           data-toggle=\"tooltip\"\n                                           title=\"Einstellungen\"\n                                        />\n                                    </Link>\n                                    &nbsp;\n                                    <i id=\"user-logout\"\n                                       className=\"fas fa-sign-out-alt fa-2x logout\"\n                                       data-toggle=\"tooltip\"\n                                       title=\"logout\"\n                                       onClick={this.logout}\n                                    />\n                                </div>\n\n                            </div>\n                        </div>\n                    </label>\n                </div>\n            </div>\n        )\n    }\n    componentDidMount() {\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        document.addEventListener('click',this.clickDocument,false);\n    }\n    componentWillUnmount() {\n        document.removeEventListener('click',this.clickDocument,false);\n    }\n\n}\nexport default withRouter(Header);","import React,{Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\n\nimport \"./chatSearchBox.scss\";\n\nclass ChatSearchBox extends Component{\n\n    searchChanged = event => {\n        this.props.onSearch(event.target.value);\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <div className=\"chatSearchBox\">\n                <div className=\"chat-select-form\">\n                    <input\n                        type=\"text\"\n                        name=\"chat-search\"\n                        className=\"chat-search\"\n                        placeholder=\"Chat suchen\"\n                        onChange={this.searchChanged}\n                    />\n                    <Link to={pathname + \"/newChat\"}>\n                        <button id=\"btn-newChat\"\n                                className=\"btn-newChat\"\n                        >\n                            <i className=\"fas fa-plus fa-lg\" />\n                        </button>\n                    </Link>\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(ChatSearchBox);","let Colors = {};\nColors.names = {\n    aqua: \"#00ffff\",\n    black: \"#000000\",\n    blue: \"#0000ff\",\n    brown: \"#a52a2a\",\n    cyan: \"#00ffff\",\n    darkblue: \"#00008b\",\n    darkcyan: \"#008b8b\",\n    darkgrey: \"#a9a9a9\",\n    darkgreen: \"#006400\",\n    darkkhaki: \"#bdb76b\",\n    darkmagenta: \"#8b008b\",\n    darkolivegreen: \"#556b2f\",\n    darkorange: \"#ff8c00\",\n    darkorchid: \"#9932cc\",\n    darkred: \"#8b0000\",\n    darksalmon: \"#e9967a\",\n    darkviolet: \"#9400d3\",\n    fuchsia: \"#ff00ff\",\n    gold: \"#ffd700\",\n    green: \"#008000\",\n    indigo: \"#4b0082\",\n    khaki: \"#f0e68c\",\n    lightblue: \"#add8e6\",\n    lightgreen: \"#90ee90\",\n    lightgrey: \"#d3d3d3\",\n    lightpink: \"#ffb6c1\",\n    lime: \"#00ff00\",\n    magenta: \"#ff00ff\",\n    maroon: \"#800000\",\n    navy: \"#000080\",\n    olive: \"#808000\",\n    orange: \"#ffa500\",\n    pink: \"#ffc0cb\",\n    purple: \"#800080\",\n    violet: \"#800080\",\n    red: \"#ff0000\",\n    silver: \"#c0c0c0\"\n};\nColors.random = function() {\n    let result;\n    let count = 0;\n    for (let prop in this.names)\n        if (Math.random() < 1/++count)\n            result = prop;\n    return result;\n};\nexport default Colors;","\nexport default class BinSearchArray extends Array{\n\n    getIndex(key){\n\n        let left = 0;\n        let right = this.length-1;\n\n        while(left<=right){\n            let k= Math.floor((left+right)/2);\n            if(this[k].key === key)\n                return k;\n            else if(this[k].key < key)\n                left = k+1;\n            else //a[k]>v\n                right = k-1;\n        }\n        return -1;\n    }\n\n    getNearestKey(key){\n        /*\n            besseren Algorithmus finden\n         */\n        let i;\n        ++key;\n\n        while((i = this.getIndex(--key)) === -1){\n            /*\n                wenn key 0 ist, wird vorne eingefügt\n             */\n            if(key === 0) return -1;\n        }\n\n        return i;\n    }\n\n    get(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            return this[i].value;\n\n        return undefined;\n    }\n\n    add(key,value){\n        /*\n            key darf noch nicht vorhanden sein\n         */\n        if(this.getIndex(key) === -1) {\n\n            this.splice(this.getNearestKey(key) + 1, 0, {\n                key: key,\n                value: value\n            });\n        }\n    }\n\n    remove(key){\n\n        let i = this.getIndex(key);\n\n        if(i !== -1)\n            this.splice(i,1);\n    }\n}","import {getGlobal,getDispatch} from 'reactn';\n\nexport async function makeRequest(target,config,tokensP){\n    /*\n        if parameter tokens is defined, this is taken\n        else the one from global\n     */\n    const tokens = tokensP ? tokensP : getGlobal().authTokens;\n\n    const configI = {\n        ...config,\n        method: config.method,\n        headers: {\n            ...config.headers,\n            /*\n                jwt\n             */\n            'Authorization': tokens\n        }\n    };\n\n    const response = await fetch(target,configI);\n    /*\n        http-status 401: jwt timeout\n     */\n    if(response.status === 401){\n        /*\n            autToken is deleted\n         */\n        getDispatch().deleteAuthTokens();\n        /*\n            error is thrown\n         */\n        throw new Error('jwt expired');\n    }\n    return response;\n}","import Colors from \"../util/Color\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport chatSocket from \"./chatSocket\";\nimport {makeRequest} from \"../global/requests\";\n\nexport const UserErrorCode = {\n    none: 0,\n    nan: 1,\n    tempChat: 2,\n    userNotExisting: 3,\n    blocked: 4,\n    isSelf: 5,\n    error: 6\n};\n\nexport async function getUserNormalChat(uid){\n    /*\n        does the user exist & does normal chat exist\n     */\n    if(chatSocket.users.getIndex(uid) !== -1){\n        /*\n            does a normalChat exist at the user\n         */\n        if(chatSocket.users.get(uid).normalChat !== 0) {\n\n            return UserErrorCode.none;\n        }else{\n            /*\n                chat does not exist in server\n                it gets created\n             */\n            const user = chatSocket.users.get(uid);\n            chatSocket.temporaryChat.createNew(uid,user.username);\n\n            return UserErrorCode.tempChat;\n        }\n        /*\n            does there exist a temporary chat with this user\n        */\n    }else if(chatSocket.temporaryChat.doesExist(uid)){\n        /*\n            user and chat does not exist in server\n         */\n        return UserErrorCode.tempChat;\n\n    }else{\n        /*\n            request user from server\n         */\n        try {\n            const config = {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n            const response = await makeRequest('/user/' + uid, config);\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok) {\n\n                const data = await response.json();\n\n                if(data.userExists && !data.blocked) {\n\n                    chatSocket.temporaryChat.createNew(uid,data.username);\n                    return UserErrorCode.tempChat;\n\n                }else{\n\n                    if(!data.userExists)\n\n                        return UserErrorCode.userNotExisting;\n\n                    else\n\n                        return UserErrorCode.blocked;\n                }\n\n            }else\n                return UserErrorCode.error;\n\n        }catch(error){\n            return UserErrorCode.error;\n        }\n    }\n}\n\nexport default class User{\n\n    _uid;\n    _username;\n    _color;\n    //ids der chats des Users\n    _normalChat = 0;\n    //ids of the groupchats\n    _groupChats = new BinSearchArray();\n\n    constructor(uid,username) {\n        this.uid = uid;\n        this.username = username;\n        this.color = Colors.random();\n    }\n    /*\n        groupChat is added\n     */\n    addGroupChat(gcid){\n        this.groupChats.add(gcid,gcid);\n    }\n\n    removeGroupChat(gcid){\n        this.groupChats.remove(gcid);\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get username() {\n        return this._username;\n    }\n\n    set username(value) {\n        this._username = value;\n    }\n\n    get color() {\n        return this._color;\n    }\n\n    set color(value) {\n        this._color = value;\n    }\n\n    get normalChat() {\n        return this._normalChat;\n    }\n\n    set normalChat(value) {\n        this._normalChat = value;\n    }\n\n    get groupChats() {\n        return this._groupChats;\n    }\n\n    set groupChats(value) {\n        this._groupChats = value;\n    }\n}","\nexport let globalData = {};\n\n/*\n    is called in isLoggedIn in App.js\n */\nexport async function fetchData(){\n\n    const config = {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json'\n        }\n    };\n    const response = await fetch('/data.json', config);\n\n    if(response.ok){\n\n        globalData = await response.json();\n    }else{\n        throw new Error();\n    }\n}","import React from \"react\";\nimport {UsernameSpan} from \"./Message\";\n\nexport default function NormalMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            {msg.userTop ?\n                <div className=\"w-100\">\n                    <strong className=\"header\">\n                        <UsernameSpan user={msg.userTop}/>\n                    </strong>\n                </div>\n                : null}\n            <div className=\"content\">\n                <p>\n                    {msg.content.text}\n                </p>\n            </div>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport Dummy from \"../../../../utilComp/Dummy\";\nimport {getStatusMessageString} from \"../../../../chatData/message/statusMessage\";\n\nexport default function StatusMessage(props){\n\n    const msg = props.msg;\n\n    return(\n        <div className={\n            (msg.bySelf ? \"self \" : \"other \") +\n            \"msg-container\"\n        }>\n            <StatusMsgContent msg={msg}/>\n            <div className=\"date-outer\">\n                <div className=\"date\">\n                    {msg.mDateString}\n                </div>\n            </div>\n        </div>\n    );\n}\nfunction StatusMsgContent(props) {\n\n    const msg = props.msg;\n\n    return(\n        <Dummy>\n            {getStatusMessageString(msg,true)}\n        </Dummy>\n    );\n}","import React from \"react\";\nimport {globalData} from \"../../../../global/globalData\";\nimport NormalMessage from \"./NormalMessage\";\nimport StatusMessage from \"./StatusMessage\";\nimport Colors from \"../../../../util/Color\";\n\nimport './message.scss'\n\nexport default function Message(props){\n\n    const msg = props.msg;\n\n    switch (msg.type) {\n\n        case globalData.messageTypes.normalMessage: {\n\n            return (\n                <NormalMessage msg={msg}/>\n            )\n        }\n\n        case globalData.messageTypes.statusMessage: {\n\n            return (\n                <StatusMessage msg={msg}/>\n            );\n        }\n\n        default:\n            return <span />;\n    }\n}\n\nexport function UsernameSpan(props){\n\n    return(\n        <span\n            style={{\n                color: Colors.names[props.user.color]\n            }}>\n                {props.user.username}\n        </span>\n    );\n}","import {UsernameSpan} from \"../../Home/chatView/chatContainer/message/Message\";\nimport {globalData} from \"../../global/globalData\";\nimport React from \"react\";\nimport chatSocket from \"../chatSocket\";\n\nexport const middleStringD = {\n    hatHast: 0,\n    ist: 1\n};\n\nexport const statusMessagesD = [\n    \"den chat erstellt\",\n    \"hinzugefügt\",\n    \"entfernt\",\n    \"dem chat beigetreten\",\n    \"den chat verlassen\",\n    \"zum Admin gemacht\",\n    \"nicht mehr Admin\"\n];\n\nexport function getStatusMessageString(msg,useReact){\n\n    return getStatusMessageStringD();\n\n    function getStatusMessageStringD() {\n\n        const userTop = msg.userTop;\n        const passiveUsers = msg.content.passiveUsers;\n\n        switch (msg.content.type) {\n\n            case globalData.statusMessageTypes.chatCreated:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.chatCreated\n                );\n\n            case globalData.statusMessageTypes.usersAdded:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersAdded\n                );\n\n            case globalData.statusMessageTypes.usersRemoved:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersRemoved\n                );\n\n            case globalData.statusMessageTypes.usersJoined:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersJoined\n                );\n\n            case globalData.statusMessageTypes.usersLeft:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    [],\n                    globalData.statusMessageTypes.usersLeft\n                );\n\n            case globalData.statusMessageTypes.usersMadeAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.hatHast,\n                    passiveUsers,\n                    globalData.statusMessageTypes.usersMadeAdmin\n                );\n\n            case globalData.statusMessageTypes.usersRemovedAdmin:\n                return renderStringD(\n                    userTop,\n                    middleStringD.ist,\n                    [],\n                    globalData.statusMessageTypes.usersRemovedAdmin\n                );\n\n            default:\n                break;\n        }\n    }\n\n    function renderStringD(userTop,middle,passiveUsers,statusMessage){\n\n        function getMiddleString(){\n\n            // eslint-disable-next-line default-case\n            switch (middle) {\n\n                case middleStringD.hatHast:\n                    return msg.bySelf ? \" hast \" : \" hat \";\n\n                case middleStringD.ist:\n                    return ' ist';\n            }\n        }\n\n        function getPassiveUsers(){\n\n            if(passiveUsers.length < 1 ){\n                return \"\";\n            }else if(passiveUsers.length === 1){\n\n                const user = chatSocket.users.get(passiveUsers[0]);\n\n                if(user)\n                    if(useReact)\n                        return(\n                            <UsernameSpan user={user}/>\n                        );\n                    else\n                        return user.username;\n                else\n                    return \"1 Benutzer\";\n\n            }else{\n                return passiveUsers.length + \" Benutzer\";\n            }\n        }\n\n        function getTString(){\n            return \" \" + statusMessagesD[statusMessage];\n        }\n\n        if(useReact)\n            return(\n                <span>\n                    <UsernameSpan user={msg.userTop}/>\n                    {getMiddleString()}\n                    {getPassiveUsers()}\n                    {getTString()}\n                </span>\n            );\n        else\n            return msg.userTop.username + getMiddleString() + getPassiveUsers() + getTString();\n    }\n\n}","import chatSocket from \"../chatSocket\";\nimport {globalData} from \"../../global/globalData\";\nimport {getStatusMessageString} from \"./statusMessage\";\n\nexport function isDifferentDay(date1,date2){\n    return date1.getDay() !== date2.getDay()\n        || date1.getMonth() !== date2.getMonth()\n        || date1.getFullYear() !== date2.getFullYear();\n}\n\nexport default class Message {\n\n    _mid;\n    _uid;\n    _date;\n    _chat;\n    _type;\n    _content;\n\n    constructor(\n        mid,\n        uid,\n        chat,\n        date = new Date(Date.now()),\n        type,\n        content\n    ) {\n        this.mid = mid;\n        this.uid = uid;\n        this.date = date;\n        //type: object of Chat\n        this.chat = chat;\n        this.type = type;\n        this.content = content;\n    }\n    /*\n        a object representing the message is returned\n     */\n    getMessageObject(userTopShown){\n\n        const message = {\n            mDateString: this.getMessageViewDateString(),\n            dateString: this.getDateString(),\n            date: this.date,\n            bySelf: this.uid === chatSocket.userSelf.uid,\n            type: this.type,\n            content: this.content\n        };\n        /*\n            if the user top should be shown, the property is added\n         */\n        if(userTopShown)\n            message.userTop = this.getUserTop();\n\n        return message;\n    }\n    /*\n        a object for the userinfo at the top of the message is returned\n     */\n    getUserTop(){\n        /*\n            is the message written by the user self?\n         */\n        if(this.isBySelf())\n            return {\n                uid: this.uid,\n                username: 'Du',\n                color: chatSocket.userSelf.color\n            };\n        /*\n            if the user is not self\n         */\n        const user = chatSocket.users.get(this.uid);\n        return {\n            uid: this.uid,\n            username: user.username,\n            color: user.color\n        };\n    }\n    /*\n        is the message by the client self?\n     */\n    isBySelf(){\n        return this.uid === chatSocket.userSelf.uid;\n    }\n\n    getChatViewDateString(){\n        /*\n            Wenn weniger als 1 Tag her: Uhrzeit\n         */\n        if(this.isDateToday()){\n\n            return 'heute ' + this.getTimeString();\n        }\n        /*\n            Wenn gestern: gestern\n         */\n        else if(this.isDateYesterday()){\n\n            return 'gestern';\n        }\n        /*\n            sonst: Datum\n         */\n        else{\n            return this.getDateString();\n        }\n    }\n\n    getChatViewMsgString(){\n\n        // eslint-disable-next-line default-case\n        switch(this.type) {\n\n            case globalData.messageTypes.normalMessage: {\n\n                let msgString = this.content.text;\n                /*\n                    Wenn string länger als 18 Zeichen, wird verkürzt\n                 */\n                if(msgString.length > 18)\n                msgString = msgString.substr(0, 18) + '...';\n                /*\n                    wenn selbst geschrieben, steht Du: davor\n                 */\n                if(this.uid === chatSocket.userSelf.uid)\n                    return`Du: ${msgString}`;\n\n                else if (this.chat.type === 'normalchat')\n                    return this.content.text;\n\n                else\n                    return `${chatSocket.users.get(this.uid).username}: ${msgString}`;\n            }\n            case globalData.messageTypes.statusMessage: {\n\n                return getStatusMessageString(\n                    this.getMessageObject(true),\n                    false\n                );\n            }\n        }\n    }\n\n    getMessageViewDateString(){\n        if(this.isDateToday()){\n\n            return this.getTimeString();\n        }\n        else if(this.isDateYesterday()){\n\n            return 'gestern ' + this.getTimeString();\n        }else{\n\n            return this.getDateString() + ' ' + this.getTimeString();\n        }\n    }\n\n    isDateToday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    isDateYesterday(){\n        const dateNow = new Date(Date.now());\n        return this.date.getDate() === dateNow.getDate() - 1 &&\n            this.date.getMonth() === dateNow.getMonth() &&\n            this.date.getFullYear() === dateNow.getFullYear();\n    }\n\n    getDateString(){\n        const d = this.date.getDate();\n        let ds;\n        if(d<10)\n            ds = '0'+d;\n        else\n            ds = d;\n        const m = this.date.getMonth();\n        let ms;\n        if(m+1<10)\n            ms = '0'+(m+1);\n        else\n            ms = m+1;\n        const y = this.date.getFullYear();\n\n        return `${ds}.${ms}.${y}`;\n    }\n\n    getTimeString(){\n        const h = this.date.getHours();\n        let hs;\n        if(h<10)\n            hs = '0'+h;\n        else\n            hs = h;\n        const m = this.date.getMinutes();\n        let ms;\n        if(m<10)\n            ms = '0'+m;\n        else\n            ms = m;\n\n        return `${hs}:${ms}`;\n    }\n    /*\n        es wird überprüft, ob date2 an einem anderen Tag war\n     */\n    isDifferentDay(date2){\n        return this.date.getDay() !== date2.getDay()\n            || this.date.getMonth() !== date2.getMonth()\n            || this.date.getFullYear() !== date2.getFullYear();\n    }\n\n    get mid() {\n        return this._mid;\n    }\n\n    set mid(value) {\n        this._mid = value;\n    }\n\n    get uid() {\n        return this._uid;\n    }\n\n    set uid(value) {\n        this._uid = value;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(value) {\n        this._date = value;\n    }\n\n    get chat() {\n        return this._chat;\n    }\n\n    set chat(value) {\n        this._chat = value;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get content() {\n        return this._content;\n    }\n\n    set content(value) {\n        this._content = value;\n    }\n}","export default class EventHandler{\n\n    _events;\n\n    constructor() {\n        this.events = new Map();\n    }\n\n    /*\n        event-handler wird hinzugefügt\n     */\n    on(event,fn){\n        /*\n            wenn event in Map vorhanden, wird event hinzugefügt\n         */\n        if(this.events.has(event))\n            this.events.get(event).push(fn);\n        /*\n            wenn event in map noch nicht vorhanden,\n            wird entry in map hinzugefügt\n         */\n        else\n            this.events.set(event,[fn]);\n    }\n    /*\n        event-handler wird entfernt\n     */\n    rm(event,fn){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            const e = this.events.get(event);\n            for(let i=0;i<e.length;i++)\n                //wenn element die gesuchte function, wird sie gelöscht\n                if(e[i] === fn)\n                    e.splice(i,1);\n        }\n    }\n    /*\n        alle registrierten functions eines events werden ausgelöst\n     */\n    trigger(event,...rest){\n        /*\n            wenn event existiert\n         */\n        if(this.events.has(event)){\n            /*\n                es werden alle functions aufgerufen\n             */\n            for(let i=0;i<this.events.get(event).length;i++)\n                this.events.get(event)[i](...rest);\n        }\n    }\n\n    get events() {\n        return this._events;\n    }\n\n    set events(value) {\n        this._events = value;\n    }\n}","import BinSearchArray from \"../../util/BinSearch\";\nimport Message from \"../message/message\";\nimport EventHandler from \"../../util/Event\";\nimport {getDispatch} from 'reactn';\nimport {makeRequest} from \"../../global/requests\";\n\nexport class Chat {\n\n    _type;\n    _id;\n    _chatName;\n    _messages = new BinSearchArray();\n    _event = new EventHandler();\n    _unreadMessages = 0;\n    /*\n        are all messages already loaded?\n     */\n    _reachedTopMessages = false;\n\n    constructor(type, id,chatName) {\n        this.type = type;\n        this.id = id;\n        this.chatName = chatName;\n    }\n    /*\n        the first message of the object is initialized\n     */\n    initFirstMessage(messageData){\n\n        if(!messageData.empty)\n            this.messages.add(\n                messageData.mid,\n                new Message(\n                    messageData.mid,\n                    messageData.uid,\n                    this,\n                    new Date(messageData.date),\n                    messageData.type,\n                    messageData.content\n                )\n            );\n    }\n    /*\n        messages are loaded\n     */\n    async loadMessages(num){\n        /*\n            messages are only loaded, if top not already reached\n         */\n        if(!this.reachedTopMessages) {\n\n            const getLastMsgId = () => {\n                const msg = this.getLastMessage();\n                if (msg !== null)\n                    return msg.mid;\n                return -1;\n            };\n            /*\n                messages are loaded from server\n             */\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    chatType: this.type,\n                    chatId: this.id,\n                    lastMsgId: getLastMsgId(),\n                    num: num\n                })\n            };\n            const response = await makeRequest('/message/load', config);\n\n            if (response.ok) {\n\n                const data = await response.json();\n                /*\n                    is top already reached?\n                 */\n                this.reachedTopMessages = data.status === 'reached top';\n\n                const lMessages = data.messages;\n                /*\n                    the array that will be returned\n                 */\n                const messages = new Array(lMessages.length);\n                const userTopShown = this.showUserInfoMessage();\n\n                for (let i = lMessages.length - 1; i >= 0; i--) {\n\n                    const messageData = lMessages[i];\n                    /*\n                        message is created\n                     */\n                    const message =\n                        new Message(\n                            messageData.mid,\n                            messageData.uid,\n                            this,\n                            new Date(messageData.date),\n                            messageData.type,\n                            messageData.content\n                        );\n                    /*\n                        message is added to chat\n                     */\n                    this.messages.add(\n                        messageData.mid,\n                        message\n                    );\n                    messages[i] = message.getMessageObject(userTopShown);\n                }\n                return messages;\n            }\n            throw new Error();\n        }\n    }\n    /*\n        gibt die Nachricht, die am längsten zurück liegt, zurück\n     */\n    getLastMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[0].value;\n        return null;\n    }\n    /*\n        gibt die neueste Nachricht im chat zurück\n     */\n    getFirstMessage(){\n        if (this.messages.length !== 0)\n            return this.messages[this.messages.length - 1].value;\n        return null;\n    }\n    /*\n        returns all messages in an array\n            userTopShown    should the user at the top be shown?\n     */\n    getMessages(){\n\n        const userTopShown = this.showUserInfoMessage();\n        const rMessages = new Array(this.messages.length);\n\n        for(let i=0;i<this.messages.length;i++){\n\n            const message = this.messages[i].value;\n            rMessages[i] = message.getMessageObject(userTopShown);\n        }\n\n        return rMessages;\n    }\n    /*\n        neue Nachricht wird hinzugefügt\n     */\n    addMessage(uid,mid,type,content){\n        const message =\n            new Message(\n                mid,\n                uid,\n                this,\n                new Date(Date.now()),\n                type,\n                content\n            );\n        this.messages.add(mid,message);\n        getDispatch().newMsg(\n            this,\n            this.unreadMessages,\n            message.getMessageObject(\n                this.showUserInfoMessage()\n            ));\n    }\n    /*\n        should the userInfo at the messages be shown (--> only in groupChats)\n     */\n    showUserInfoMessage(){\n        return(this.type === 'groupChat')\n    }\n    /*\n        an object of this chat is returned\n     */\n    getChatObject(){\n        return {\n            type: this.type,\n            id: this.id,\n            chatName: this.chatName,\n            latestMessage: this.getLatestMessageObject(),\n            unreadMessages: this.unreadMessages\n        };\n    }\n    /*\n        an object with the latest message is returned\n     */\n    getLatestMessageObject(){\n        /*\n            are there messages?\n        */\n        if(this.messages.length === 0){\n            return null;\n        }else{\n            const lm = this.getFirstMessage();\n            return {\n                msgString: lm.getChatViewMsgString(),\n                dateString: lm.getChatViewDateString(),\n                date: lm.date\n            };\n        }\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    set type(value) {\n        this._type = value;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get chatName() {\n        return this._chatName;\n    }\n\n    set chatName(value) {\n        this._chatName = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get unreadMessages() {\n        return this._unreadMessages;\n    }\n\n    set unreadMessages(value) {\n        this._unreadMessages = value;\n    }\n\n    get reachedTopMessages() {\n        return this._reachedTopMessages;\n    }\n\n    set reachedTopMessages(value) {\n        this._reachedTopMessages = value;\n    }\n}\n","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class NormalChat extends Chat{\n\n    _otherUser;\n    _isTyping = false;\n\n    constructor(id,chatName,uid,unreadMessages = 0) {\n        super('normalChat',id,chatName);\n        this.otherUser = uid;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return [\n                {\n                    uid: user.uid,\n                    username: user.username\n                }\n            ];\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der erst die kürzeste Zeit schreibt\n     */\n    getLatestUserTyping(){\n        if(this.isTyping) {\n            const user = chatSocket.users.get(this.otherUser);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = true;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(uid === this.otherUser){\n            this.isTyping = false;\n            this.event.trigger(\"typeState changed\");\n        }\n    }\n\n    get otherUser() {\n        return this._otherUser;\n    }\n\n    set otherUser(value) {\n        this._otherUser = value;\n    }\n\n    get isTyping() {\n        return this._isTyping;\n    }\n\n    set isTyping(value) {\n        this._isTyping = value;\n    }\n}","import chatSocket from \"../chatSocket\";\nimport {Chat} from \"./chat\";\n\nexport class GroupChat extends Chat{\n    //array with uids\n    _users = [];\n    //Array mit uids von den usern, die gerade schreibem\n    _usersTyping = [];\n\n    constructor(id,chatName,uids,unreadMessages = 0) {\n        super('groupChat',id,chatName);\n        this.users = uids;\n        this.unreadMessages = unreadMessages;\n    }\n\n    getUsersTyping(){\n        if(this.usersTyping.length > 0) {\n\n            let rc = [];\n            for(let i=0;i<this.usersTyping.length;i++){\n                const user = chatSocket.users.get(this.usersTyping[i]);\n                rc.push({\n                    uid: user.uid,\n                    username: user.username\n                });\n            }\n            return rc;\n        }\n        return [];\n    }\n    /*\n        gibt den user zurück, der am neuestem schriebt\n     */\n    getLatestUserTyping(){\n        if(this.usersTyping.length > 0) {\n            const user = chatSocket.users.get(this.usersTyping[this.usersTyping.length - 1]);\n            return {\n                uid: user.uid,\n                username: user.username\n            };\n        }\n        return null;\n    }\n    /*\n        is called when a user started typing\n     */\n    startedTyping(uid){\n        if(this.isMember(uid)){\n            if(!this.isTyping(uid)){\n                /*\n                    the user is added to the currently typing users\n                 */\n                this.usersTyping.push(uid);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        is called when a user stopped typing\n     */\n    stoppedTyping(uid){\n        if(this.isMember(uid)){\n            if(this.isTyping(uid)){\n                /*\n                    user is removed from the array of currently typing users\n                 */\n                this.usersTyping.splice(this.getIndexOfTyping(uid),1);\n                this.event.trigger(\"typeState changed\");\n            }\n        }\n    }\n    /*\n        returns true if the uid is member of the chat and not self\n     */\n    isMember(uid){\n        if(uid === chatSocket.userSelf.uid)\n            return false;\n        return this.users.find(e => e === uid);\n    }\n    /*\n        returns true if the user is currently typing\n     */\n    isTyping(uid){\n        return this.usersTyping.find(e => e === uid);\n    }\n    /*\n        returns the index of a currently typing user\n     */\n    getIndexOfTyping(uid){\n        return this.usersTyping.findIndex(e => e === uid);\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get usersTyping() {\n        return this._usersTyping;\n    }\n\n    set usersTyping(value) {\n        this._usersTyping = value;\n    }\n}","import {NormalChat} from \"./chat/normalChat\";\nimport chatSocket from \"./chatSocket\";\nimport User from \"./User\";\nimport Message from \"./message/message\";\nimport {getDispatch} from 'reactn';\nimport {globalData} from \"../global/globalData\";\nimport {makeRequest} from \"../global/requests\";\n\nexport default class TempChatLoader{\n\n    _isShown = false;\n    _chatNow;\n    /*\n        a new temporary chat gets created.\n        parameters uid and username required\n     */\n    createNew(uid,username){\n        this.chatNow = new NormalChat(0, username, uid);\n    }\n    /*\n        is the current tempChat already the one with this uid?\n     */\n    doesExist(uid){\n        if(this.chatNow === undefined)\n            return false;\n        return this.chatNow.otherUser === uid;\n    }\n    /*\n        tempChat gets shown\n     */\n    show(){\n        this.isShown = true;\n        getDispatch().showTempChat(this.chatNow);\n    }\n\n    update(){\n        getDispatch().updateTempChat(this.chatNow);\n    }\n\n    hide(){\n        this.isShown = false;\n        getDispatch().hideTempChat();\n    }\n    /*\n        a new normalChat is created out of the current tempChat\n     */\n    async createNewNormalChat(msg){\n\n        /*\n            the request gets sent to the server\n         */\n        const otherUid = this.chatNow.otherUser;\n        const otherUsername = this.chatNow.chatName;\n\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                uid: otherUid,\n                username: otherUsername,\n                message: {\n                    type: globalData.messageTypes.normalMessage,\n                    content: {\n                        text: msg,\n                        mentions: [],\n                        media: []\n                    }\n                }\n            })\n        };\n\n        const response = await makeRequest('/user/chat', config);\n\n        if(response.ok){\n\n            const data = await response.json();\n\n            if(chatSocket.users.getIndex(otherUid) === -1){\n                chatSocket.users.add(otherUid,new User(otherUid,otherUsername));\n            }\n            const otherUser = chatSocket.users.get(otherUid);\n\n            const newChat = new NormalChat(data.ncid,otherUsername,otherUid);\n            /*\n                chat gets added to user\n             */\n            otherUser.normalChat = newChat.id;\n            /*\n                chat is added in binsearchArray\n             */\n            chatSocket.chats.normal.add(data.ncid,newChat);\n            /*\n                message is added to chat\n             */\n            const message = new Message(\n                data.mid,\n                chatSocket.userSelf.uid,\n                newChat,\n                new Date(Date.now()),\n                globalData.messageTypes.normalMessage,\n                {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            );\n            newChat.messages.add(message.mid,message);\n\n            //args: chat\n            getDispatch().addChat(newChat);\n            /*\n                currentChat gets changed\n             */\n            getDispatch().selectChat(newChat);\n            /*\n                tempChat is hidden\n             */\n            this.hide();\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    get isShown() {\n        return this._isShown;\n    }\n\n    set isShown(value) {\n        this._isShown = value;\n    }\n\n    get chatNow() {\n        return this._chatNow;\n    }\n\n    set chatNow(value) {\n        this._chatNow = value;\n    }\n}\n\n","import io from 'socket.io-client';\nimport User from \"./User\";\nimport BinSearchArray from \"../util/BinSearch\";\nimport {NormalChat} from './chat/normalChat';\nimport {GroupChat} from \"./chat/groupChat\";\nimport EventHandler from \"../util/Event\";\nimport TempChatLoader from \"./tempChatLoader\";\nimport {getGlobal,getDispatch} from 'reactn';\nimport {makeRequest} from \"../global/requests\";\n\nclass ChatSocket{\n\n    _socket;\n    _userSelf = {\n        uid: 0,\n        username: \"\"\n    };\n    _users = new BinSearchArray();\n    _chats = {\n        normal: new BinSearchArray(),\n        group: new BinSearchArray()\n    };\n    _event = new EventHandler();\n    _finishedLoading = false;\n    /*\n        normalchat not saved in the database\n     */\n    _temporaryChat = new TempChatLoader();\n    _initCalled = false;\n\n    destruct(){\n\n        if(this.socket) {\n            this.socket.removeAllListeners();\n            this.socket.disconnect();\n        }\n        this.initCalled = false;\n    }\n\n    async init(){\n\n        const {uid,username} = getGlobal().userSelf;\n        /*\n            user-Object is created\n         */\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.initCalled = true;\n\n        this.userSelf = new User(uid,username);\n\n        this.userInfo = {\n            uid: uid,\n            username: username\n        };\n\n        this.socket = io.connect('/', {secure: true});\n        /*\n            userInfo wird an client gesendet\n         */\n        this.socket.emit('auth', getGlobal().authTokens);\n        /*\n            is called when user is initialized\n         */\n        this.socket.on('initialized',() => {\n\n            this.initChats();\n        });\n        /*\n            msg-handler\n         */\n        this.socket.on('chat message',data => {\n            /*\n                gets chat of msg\n                adds this message to chat\n            */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            if(chat !== null) {\n                const isCurrentChat = this.isCurrentChat(\n                    chat.type,\n                    chat.id\n                );\n                chat.addMessage(\n                    data.uid,\n                    data.mid,\n                    data.type,\n                    data.content\n                );\n                /*\n                    hasNewMsg gets updated\n                    if current chat --> false\n                 */\n                chat.hasNewMsg = !isCurrentChat;\n                /*\n                    if chat is not currentChat, unreadMessages gets incremented\n                 */\n                chat.unreadMessages ++;\n                /*\n                    new message event is triggered\n                 */\n                this.event.trigger(\n                    'new message',\n                    data.chat.type,\n                    data.chat.id\n                );\n            }\n        });\n        /*\n            started typing\n         */\n        this.socket.on('started typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.startedTyping(data.uid);\n        });\n        /*\n            stopped typing\n         */\n        this.socket.on('stopped typing',data => {\n            /*\n                chat is searched\n             */\n            const chat = this.getChat(\n                data.chat.type,\n                data.chat.id\n            );\n            chat.stoppedTyping(data.uid);\n        });\n        /*\n            the result of the search in new chat\n         */\n        this.socket.on('users-noChat',data => {\n            chatSocket.event.trigger('users-noChat',data);\n        });\n        /*\n            the user has been added to a new chat\n         */\n        this.socket.on(\"new chat\",data => {\n            this.addNewChat(data);\n        });\n        /*\n            Bei disconnect wird Seite neu geladen\n         */\n        this.socket.on('disconnect',() => {\n            setTimeout(function() {\n\n                alert('Verbindung verloren! Seite wird neu geladen');\n                // eslint-disable-next-line no-restricted-globals\n                location.reload();\n            },1000);\n        });\n    }\n\n    async initChats(){\n\n        const config = {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        };\n        /*\n            chats are requested\n         */\n        const response = await makeRequest('/chats', config);\n\n        if(response.status === 200) {\n\n            const data = await response.json();\n            for (let i = 0; i < data.length; i++) {\n                if (data[i].type === 'normalChat') {\n                    /*\n                        normalChat is added\n                     */\n                    this.addNewNormalChat(data[i]);\n                } else if (data[i].type === 'groupChat') {\n                    /*\n                        groupChat is added\n                     */\n                    this.addNewGroupChat(data[i]);\n                }\n            }\n        }\n        this.finishedLoading = true;\n        this.event.trigger('chats loaded',this.getChatArraySortedByDate());\n    }\n\n    getChatArraySortedByDate(){\n\n        function getMessageTime (chat) {\n            const c = chat.latestMessage;\n            if(c !== null)\n                return c.date.getTime();\n            return new Date(0).getTime();\n        }\n\n        function getMaxDate (chats,iFrom) {\n            let max = iFrom;\n            for(let i = iFrom+1;i<chats.length;i++){\n                if(getMessageTime(chats[max]) < getMessageTime(chats[i]))\n                    max = i;\n            }\n            return max;\n        }\n        function swap (items, firstIndex, secondIndex) {\n            let temp = items[firstIndex];\n            items[firstIndex] = items[secondIndex];\n            items[secondIndex] = temp;\n        }\n        /*\n            Array is cloned\n         */\n        function cloneArr (arr) {\n            const clone = new Array(arr.length);\n            for(let i=0;i<arr.length;i++){\n                const chat = arr[i].value;\n                clone[i] = chat.getChatObject();\n            }\n            return clone;\n        }\n        /*\n            es wird ein sortiertes Array zurückgegeben\n         */\n        function getSorted (chats) {\n            //Array wird erzeugt\n            const sorted = cloneArr(chats);\n            /*\n                es wird immer das höchste eingefügt, um Array zu sortieren\n             */\n            for(let i=0;i<sorted.length-1;i++){\n                let max = getMaxDate(sorted,i);\n                swap(sorted,i,max);\n            }\n            return sorted;\n        }\n        /*\n            Arrays werden gemerged\n         */\n        function mergeArr (arr1,arr2) {\n\n            const merged = new Array(arr1.length + arr2.length);\n            let p1 = 0;\n            let p2 = 0;\n            for(let i=0;i<merged.length;i++){\n                if(! (p2 < arr2.length)){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else if (! (p1 < arr1.length)){\n                    merged[i] = arr2[p2];\n                    p2++;\n                }else if(getMessageTime(arr1[p1]) > getMessageTime(arr2[p2])){\n                    merged[i] = arr1[p1];\n                    p1++;\n                }else{\n                    merged[i] = arr2[p2];\n                    p2++;\n                }\n            }\n            return merged;\n        }\n        const ncSorted = getSorted(this.chats.normal);\n        const gcSorted = getSorted(this.chats.group);\n\n        return mergeArr(ncSorted, gcSorted);\n    }\n\n    isCurrentChat(type,id){\n        const currentChat = getGlobal().currentChat;\n        return currentChat.type === type && currentChat.id === id;\n    };\n\n    getChat(type,id){\n        /*\n            type can be:\n                normalChat\n                tempChat\n                groupChat\n         */\n        if(type === 'normalChat')\n            return this.chats.normal.get(id);\n        else if(type === 'tempChat') {\n            return this.temporaryChat.chatNow;\n        }\n        else if(type === 'groupChat')\n            return this.chats.group.get(id);\n    }\n    /*\n        a new chat gets added\n     */\n    addNewChat(data){\n\n        let newChat;\n\n        if(data.type === 'normalChat'){\n            /*\n                new normalChat gets created\n             */\n            newChat = this.addNewNormalChat(data);\n\n        }else if(data.type === 'groupChat'){\n\n            newChat = this.addNewGroupChat((data));\n        }\n        newChat.unreadMessages = 1;\n        /*\n            event gets triggered\n         */\n        getDispatch().addChat(newChat);\n    }\n    /*\n        a new normalChat gets added\n     */\n    addNewNormalChat(data){\n        /*\n            check if the other user does already exist\n                if not --> gets created\n         */\n        let otherUser;\n        if(this.users.getIndex(data.members[0].uid) === -1){\n            otherUser = new User(\n                data.members[0].uid,\n                data.members[0].username\n            );\n            this.users.add(otherUser.uid,otherUser);\n        }else{\n            otherUser = this.users.get(data.members[0].uid);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat = new NormalChat(\n            data.id,\n            data.chatName,\n            otherUser.uid,\n            data.unreadMessages\n        );\n        /*\n            normalChat is set at other user\n         */\n        otherUser.normalChat = newChat.id;\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.normal.add(data.id,newChat);\n\n        return newChat;\n    }\n    /*\n        a new groupChat gets added\n     */\n    addNewGroupChat(data){\n        /*\n            check which do not exist already --> get added\n         */\n        const members = [];\n\n        for(let i=0;i<data.members.length;i++) {\n\n            const member = data.members[i];\n            /*\n                does the user already exist?\n             */\n            let user;\n            if (this.users.getIndex(member.uid) === -1) {\n                user = new User(\n                    member.uid,\n                    member.username\n                );\n                this.users.add(user.uid, user);\n            } else {\n                user = this.users.get(member.uid);\n            }\n            /*\n                member gets added\n             */\n            members.push(user.uid);\n            /*\n                chat is added at user\n             */\n            user.addGroupChat(data.id);\n        }\n        /*\n            new chat gets created\n         */\n        const newChat =\n            new GroupChat(\n                data.id,\n                data.chatName,\n                members,\n                data.unreadMessages\n            );\n        /*\n            first message is initialized\n         */\n        newChat.initFirstMessage(data.firstMessage);\n        /*\n            new chat gets added to binSearchArray\n         */\n        this.chats.group.add(data.id,newChat);\n\n        return newChat;\n    }\n\n    get socket() {\n        return this._socket;\n    }\n\n    set socket(value) {\n        this._socket = value;\n    }\n\n    get userSelf() {\n        return this._userSelf;\n    }\n\n    set userSelf(value) {\n        this._userSelf = value;\n    }\n\n    get users() {\n        return this._users;\n    }\n\n    set users(value) {\n        this._users = value;\n    }\n\n    get chats() {\n        return this._chats;\n    }\n\n    set chats(value) {\n        this._chats = value;\n    }\n\n    get event() {\n        return this._event;\n    }\n\n    set event(value) {\n        this._event = value;\n    }\n\n    get finishedLoading() {\n        return this._finishedLoading;\n    }\n\n    set finishedLoading(value) {\n        this._finishedLoading = value;\n    }\n\n    get temporaryChat() {\n        return this._temporaryChat;\n    }\n\n    set temporaryChat(value) {\n        this._temporaryChat = value;\n    }\n\n    get initCalled() {\n        return this._initCalled;\n    }\n\n    set initCalled(value) {\n        this._initCalled = value;\n    }\n}\n\nlet chatSocket = new ChatSocket();\n\nexport function resetChatSocket(){\n    chatSocket.destruct();\n    chatSocket = new ChatSocket();\n}\n\nexport default chatSocket;\n","import React,{Component} from \"reactn\";\nimport {Link} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class ChatItem extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastMsg: undefined,\n            typeMsg: ''\n        }\n    }\n    /*\n        is this chat selected?\n     */\n    isSelected = () => {\n        return this.props.id === this.global.currentChat.id && this.props.type === this.global.currentChat.type;\n    };\n    /*\n        wenn ein user anfängt, oder aufhört zu schreiben, wird diese Methode aufgerufen,\n        um die typeMsg zu aktualisieren\n     */\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        let typeMsg = '';\n        /*\n            wenn latestuserTyping = null, schreibt gerade keiner\n         */\n        const userTyping = chat.getLatestUserTyping();\n        if(userTyping !== null){\n            typeMsg = userTyping.username + \" schreibt...\";\n        }\n        //state wird aktualisiert\n        this.setState({\n            typeMsg: typeMsg\n        });\n    };\n\n    render() {\n\n        const renderUnreadMsg = () => {\n            if(this.props.unreadMessages === 0)\n                return null;\n            else\n                return(\n                    <div className=\"newMsg-number\">\n                        {this.props.unreadMessages}\n                    </div>\n                );\n        };\n        /*\n            in der unteren Hälfte wird angezeigt wer schreibt\n            schreibt keiner, wird letzte Nachricht angezeigt\n         */\n        const renderLowerHalf = () => {\n            if(this.state.typeMsg === '')\n                return (\n                    <div className=\"w-100 lastMsg\">\n                        {renderMsg()}\n                        {renderDate()}\n                    </div>\n                );\n            else{\n                return (\n                    <div className=\"w-100 typeMsg\">\n                        {this.state.typeMsg}\n                    </div>\n                );\n            }\n        };\n\n        const renderMsg = () => {\n            if(this.props.latestMessage)\n                return(\n                    <span>\n                        {this.props.latestMessage.msgString}\n                    </span>\n                );\n            else\n                return(\n                    <span>\n                        Noch keine Nachrichten vorhanden\n                    </span>\n                );\n        };\n\n        const renderDate = () => {\n            if(this.props.latestMessage)\n                return(\n                    <div className=\"lastMsg-date\">\n                        {this.props.latestMessage.dateString}\n                    </div>\n                );\n            else\n                return null;\n        };\n\n        const getLink = () => {\n            if(this.props.type === 'normalChat'){\n                return '/chat/user/' + chatSocket.getChat('normalChat',this.props.id).otherUser;\n            }else if(this.props.type === 'groupChat'){\n                return '/chat/group/' + this.props.id;\n            }else if(this.props.type === 'tempChat'){\n                return '/chat/user/' + chatSocket.temporaryChat.chatNow.otherUser;\n            }\n        };\n\n        return(\n            <li className={(this.isSelected() ? \"selected \" : \"\")}>\n                <Link to={getLink()}>\n                    <div className=\"w-100\">\n                        <strong>\n                            {this.props.name}\n                        </strong>\n                        {renderUnreadMsg()}\n                    </div>\n                    {renderLowerHalf()}\n                </Link>\n            </li>\n        )\n    }\n\n    componentDidMount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden angelegt\n         */\n        //if(chat)\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n        /*else{\n            console.log('error',chatSocket.chats.group,this.props.type,this.props.id)\n        }*/\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did component update?\n         */\n        if(prevProps.type !== this.props.type || prevProps.id !== this.props.id) {\n            //Listeners get replaced\n            const prevChat = chatSocket.getChat(prevProps.type,prevProps.id);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.type,this.props.id);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n\n            //typeMsg gets deleted\n            this.setState({\n                typeMsg: ''\n            });\n        }\n\n    }\n    componentWillUnmount() {\n        const chat = chatSocket.getChat(this.props.type,this.props.id);\n        /*\n            event listener werden entfernt\n         */\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React,{Component} from \"reactn\";\nimport ChatSearchBox from \"./ChatSearchBox\";\nimport ChatItem from \"./ChatItem\";\n\nimport './chatList.scss';\n\nexport default class ChatList extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            //the current searchValue at the chatlist\n            searchValue: ''\n        };\n    }\n\n    render() {\n\n        const paddingTop = this.props.paddingTop || '1rem';\n        let found = 0;\n\n        const showNothingFoundMsg = () => {\n            if(found === 0)\n                return(\n                    <span>\n                        Nichts gefunden\n                    </span>\n                );\n            return null;\n        };\n\n        const renderTempChat = () => {\n            /*\n                is tempChat not null?\n             */\n            if(this.global.tempChat){\n                return(\n                    <ChatItem\n                        key={-1}\n                        id={0}\n                        type={'tempChat'}\n                        name={this.global.tempChat.chatName}\n                        unreadMessages={0}\n                        latestMessage={null}\n                    />\n                );\n            }\n            return null;\n        };\n\n        return(\n            <div style={{\n                paddingTop: paddingTop,\n                height: '100%'\n            }}>\n                <div className=\"chat-c-list\">\n                    <ChatSearchBox\n                        onSearch={searchValue => {\n                            this.setState({\n                                searchValue: searchValue\n                            })\n                        }}\n                    />\n\n                    <ul className=\"chat-list\">\n                        {renderTempChat()}\n                        {this.global.chats.map((chat,i) => {\n                            if(chat.chatName.includes(this.state.searchValue)) {\n                                found++;\n                                return (\n                                    <ChatItem\n                                        key={i}\n                                        id={chat.id}\n                                        type={chat.type}\n                                        name={chat.chatName}\n                                        unreadMessages={chat.unreadMessages}\n                                        latestMessage={chat.latestMessage}\n                                    />\n                                );\n                            }\n                            return null;\n                        })}\n                    </ul>\n                    {showNothingFoundMsg()}\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\nimport './chatViewLoader.scss';\n\nexport default function ChatViewLoader (props){\n    return(\n        <div className=\"loader-init\">\n            <div className=\"col-sm-12 my-auto\">\n                <div className=\"init-container border rounded\">\n                    <div className=\"spinner-border text-secondary\"\n                         style={{\n                             width: '15rem',\n                             height: '15rem',\n                             borderWidth: '0.5rem'\n                         }}\n                         role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                    <div className=\"loader-text\">{props.msg}</div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React,{Component} from \"react\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\nimport {withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {globalData} from \"../../../global/globalData\";\nimport {makeRequest} from \"../../../global/requests\";\n\nimport './messageForm.scss';\n\nclass MessageForm extends Component{\n\n    _userTyping = false;\n    _typeEventEmitted = false;\n    _typeTimeout;\n    /*\n        if the MessageFrom belongs to a tempChat, it has some other actions to do\n     */\n    _isTempChat;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            showEmoji: false\n        }\n    }\n\n    onTyping = event => {\n\n        this.setState({\n           message: event.target.value\n        });\n\n        this.handleTypeMessage();\n    };\n\n    handleTypeMessage = () => {\n        /*\n            type message get only handled if the chat is not temporary\n         */\n        if(!this.isTempChat) {\n\n            if (this.userTyping) {\n                clearTimeout(this.typeTimeout);\n            }\n            this.userTyping = true;\n            if (!this.typeEventEmitted) {\n                this.typeEventEmitted = true;\n                chatSocket.socket.emit('started typing');\n            }\n            this.typeTimeout = setTimeout(() => {\n                this.userTyping = false;\n                if (this.typeEventEmitted) {\n                    this.typeEventEmitted = false;\n                    chatSocket.socket.emit('stopped typing');\n                }\n            }, 1000);\n        }\n    };\n\n    onSubmit = event => {\n        event.preventDefault();\n        /*\n            es kann keine leere Nachricht geschickt werden\n         */\n        if(this.state.message !== ''){\n            const message = this.state.message;\n            /*\n                input wird geleert\n             */\n            this.setState({\n                message: ''\n            });\n            if(this.isTempChat) {\n\n                const {pathname} = this.props.location;\n                /*\n                    the chat is created\n                 */\n                chatSocket.temporaryChat.createNewNormalChat(message)\n                    .then(redirect => {\n                        if(redirect) {\n                            this.props.history.replace(\"/chat\");\n                            this.props.history.replace(pathname);\n                        }\n                    });\n            }else{\n\n                this.sendMessage(message)\n                    .then(mid => {\n                        /*\n                            message is added to chat\n                         */\n                        const chat = chatSocket.getChat(this.props.chatType, this.props.chatId);\n                        chat.addMessage(\n                            chatSocket.userSelf.uid,\n                            mid,\n                            globalData.messageTypes.normalMessage,\n                            {\n                                text: message,\n                                mentions: [],\n                                media: []\n                            }\n                        );\n                    })\n                    .catch(err => {});\n            }\n        }\n    };\n\n    sendMessage = async msg => {\n        /*\n            message is sent to server\n         */\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                type: globalData.messageTypes.normalMessage,\n                content: {\n                    text: msg,\n                    mentions: [],\n                    media: []\n                }\n            })\n        };\n        const response = await makeRequest('/message', config);\n\n        if (response.ok) {\n\n            const data = await response.json();\n            /*\n                mid is returned\n             */\n            return data.mid;\n        }\n        return new Error();\n    };\n\n    onEmojiInput = emoji => {\n\n        this.setState({\n            message: this.state.message + emoji.native\n        });\n        this.handleTypeMessage();\n    };\n\n    toggleEmoji = event => {\n        this.setState(state => ({\n            showEmoji: !state.showEmoji\n        }))\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form onSubmit={this.onSubmit}\n                      className=\"msg-form\">\n                    <div className=\"message-input\">\n                        <input autoComplete=\"off\"\n                               placeholder=\"Nachricht:\"\n                               value={this.state.message}\n                               onChange={this.onTyping}\n                        />\n                        <i className=\"far fa-smile fa-2x emoji-toggle\"\n                           onClick={this.toggleEmoji}\n                        />\n                    </div>\n                    <button className=\"btn-submit\" type=\"submit\">\n                        <i className=\"far fa-paper-plane fa-2x\"\n                           data-toggle=\"tooltip\"\n                           title=\"send message\" />\n                    </button>\n                </form>\n                {this.state.showEmoji ?\n                    <div style={{\n                        position: 'absolute',\n                        bottom: '60px',\n                        right: '50px',\n                        width: '350px',\n                        height: '425px'\n                    }}>\n                        <Picker onSelect={this.onEmojiInput}/>\n                    </div>\n                : null}\n            </Dummy>\n        )\n    }\n\n    componentDidMount() {\n        /*\n            isTempChat gets set\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            isTempChat gets updated\n         */\n        this.isTempChat = this.props.chatType === 'tempChat';\n    }\n\n    get userTyping() {\n        return this._userTyping;\n    }\n\n    set userTyping(value) {\n        this._userTyping = value;\n    }\n\n    get typeEventEmitted() {\n        return this._typeEventEmitted;\n    }\n\n    set typeEventEmitted(value) {\n        this._typeEventEmitted = value;\n    }\n\n    get typeTimeout() {\n        return this._typeTimeout;\n    }\n\n    set typeTimeout(value) {\n        this._typeTimeout = value;\n    }\n\n    get isTempChat() {\n        return this._isTempChat;\n    }\n\n    set isTempChat(value) {\n        this._isTempChat = value;\n    }\n}\n\nexport default withRouter(MessageForm);","import React,{Component} from \"reactn\";\nimport ReactDOM from 'react-dom';\nimport MessageForm from \"./MessageForm\";\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Message from \"./message/Message\";\nimport {isDifferentDay} from '../../../chatData/message/message'\n\nimport './chatContainer.scss';\n\nexport default class ChatContainer extends Component{\n\n    _isMounted = false;\n    _messages;\n    _messagesNode;\n\n    constructor(props) {\n        super(props);\n        this.assignMessagesRef = this.assignMessagesRef.bind(this);\n        this.state = {\n            msgLoading: false,\n            scrollToBottom: 0,\n            messages: [],\n            typeMessages: []\n        };\n    }\n    //scroll: https://jsfiddle.net/jwm6k66c/2480/\n    scrollHandler = event => {\n        this.setState({\n            scrollToBottom: this.getScrollToBottom()\n        });\n        /*\n            wenn oben angelangt, werden Nachrichten geladen\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    setScrollToBottom = val => {\n        this.messagesNode.scrollTop = this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - val;\n    };\n\n    getScrollToBottom  = () => {\n        return this.messagesNode.scrollHeight - this.messagesNode.offsetHeight - this.messagesNode.scrollTop;\n    };\n\n    assignMessagesRef = target => {\n        this.messages = target;\n    };\n\n    loadMessages = () => {\n\n        const chat = chatSocket.getChat(this.global.currentChat.type,this.global.currentChat.id);\n        /*\n            loader is only shown, if top not reached\n         */\n        if(!chat.reachedTopMessages)\n            this.setState({\n                msgLoading: true\n            });\n        /*\n            messages are loaded\n         */\n        chat.loadMessages(10)\n            .then(messages => {\n                /*\n                    loader is hidden\n                    messages are added\n                 */\n                this.dispatch.addLoadedMessages(messages);\n                this.setState(state => ({\n                    msgLoading: false\n                }));\n                this.setScrollToBottom(this.state.scrollToBottom);\n            })\n            .catch(err => this.setState({\n                msgLoading: false\n            }));\n    };\n    /*\n        is called when the selected chat changed\n     */\n    chatChanged = () => {\n        /*\n            if scrollToBottom is 0, the messages are loaded\n         */\n        if (this.messagesNode.scrollTop === 0)\n            this.loadMessages();\n    };\n\n    componentDidMount() {\n        this.messagesNode = ReactDOM.findDOMNode(this.messages);\n\n        this.chatChanged();\n\n        this.isMounted = true;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn das der Fall ist:\n                wird messages loaded listener auf neuen chat angewandt\n                scrollToBottom wird auf 0 gesetzt\n                scrolltop wird überprüft\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            //scrollToBottom wird auf 0 gesetzt\n            this.setScrollToBottom(0);\n\n            this.chatChanged();\n        }\n        /*\n            wenn scrollToBottom 0 wird zu bottom gescrollt\n         */\n        if(this.state.scrollToBottom === 0) {\n            this.setScrollToBottom(0);\n            /*\n                newMessages is set to 0\n             */\n            if(this.global.currentChat.newMessages > 0)\n                this.setGlobal(global => ({\n                   currentChat: {\n                       ...global.currentChat,\n                       newMessages: 0\n                   }\n                }));\n        }\n\n    }\n\n    render() {\n\n        const showLoaderTop = () => {\n            if(this.state.msgLoading)\n                return(\n                    <div className=\"messageLoader-top\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                );\n            return null;\n        };\n\n        const renderNewMessages = () => {\n\n            if(this.global.currentChat.newMessages > 0)\n                return(\n                    <div id=\"scroll-down-number\" className=\"number\">\n                        {this.global.currentChat.newMessages}\n                    </div>\n                );\n            return null;\n        };\n\n        const renderBtnToBottom = () => {\n            if(this.isMounted) {\n                if (this.getScrollToBottom() > 10) {\n                    return (\n                        <div id=\"messages-bottom\"\n                             className=\"messages-bottom\"\n                             onClick={() => {\n                                 this.setState({\n                                     scrollToBottom: 0\n                                 })\n                             }}\n                        >\n                            <div id=\"btnToBottom\" className=\"chevron-down\">\n                                <i className=\"fas fa-chevron-down fa-2x\"/>\n                            </div>\n                            {renderNewMessages()}\n                        </div>\n                    )\n                }\n            }\n            return null;\n        };\n\n        let lastDate = new Date(0);\n        /*\n            wenn der Tag der letzten Nachrichten ein anderer wie der von dieser ist,\n            wird ein Container mit Datum gerendert\n         */\n        const renderDateContainer = msg => {\n            if(isDifferentDay(msg.date,lastDate)){\n                lastDate = msg.date;\n                return(\n                    <div className = \"date-container\">\n                        <div>\n                            {msg.dateString}\n                        </div>\n                    </div>\n                )\n            }\n            lastDate = msg.date;\n            return null;\n        };\n\n        const renderAlertNoMessages = () => {\n            if(this.global.currentChat.messages.length === 0)\n                return(\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                );\n            return null;\n        };\n\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\"\n                     onScroll={this.scrollHandler}\n                     ref={this.assignMessagesRef}\n                >\n                    {showLoaderTop()}\n                    {this.global.currentChat.messages.map((msg,i) => {\n                        return (\n                            <div key={i}>\n                                {renderDateContainer(msg)}\n                                <Message\n                                    msg={msg}\n                                />\n                            </div>\n                        );\n                    })}\n                    {renderAlertNoMessages()}\n                    {renderBtnToBottom()}\n                </div>\n                <MessageForm\n                    chatType={this.props.chatType}\n                    chatId={this.props.chatId}\n                />\n            </div>\n        )\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    get isMounted() {\n        return this._isMounted;\n    }\n\n    set isMounted(value) {\n        this._isMounted = value;\n    }\n\n    get messages() {\n        return this._messages;\n    }\n\n    set messages(value) {\n        this._messages = value;\n    }\n\n    get messagesNode() {\n        return this._messagesNode;\n    }\n\n    set messagesNode(value) {\n        this._messagesNode = value;\n    }\n}","import React,{Component} from \"react\";\nimport MessageForm from \"./chatContainer/MessageForm\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nexport default class TempChatContainer extends Component{\n\n    render() {\n        return(\n            <div className=\"chat-container\">\n                <div className=\"messages\">\n                    <div className=\"alert alert-primary\" role=\"alert\">\n                        Noch keine Nachrichten vorhanden\n                    </div>\n                </div>\n                <MessageForm\n                    chatType={'tempChat'}\n                    chatId={0}\n                />\n            </div>\n        );\n    }\n    componentDidMount() {\n        chatSocket.temporaryChat.show();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.uid !== this.props.uid)\n            chatSocket.temporaryChat.update();\n    }\n    componentWillUnmount() {\n        chatSocket.temporaryChat.hide();\n    }\n}","import React from \"react\";\n\nexport function AddressNotValid() {\n    return(\n        <div>\n            <h2>ungültige Addresse</h2>\n        </div>\n    );\n}\nexport function CannotWriteYourself(){\n    return(\n        <div>\n            <h2>Du kannst dir selbst nicht schreiben</h2>\n        </div>\n    );\n}\nexport function BlockedByThisUser(){\n    return(\n        <div>\n            <h2>Dieser User hat dich blockiert</h2>\n        </div>\n    );\n}\nexport function UserNotExisting(){\n    return(\n        <div>\n            <h2>Dieser User existiert nicht</h2>\n        </div>\n    );\n}\nexport function NoMemberInPublicChat(){\n    return (\n        <div>\n            <h2>Du bist nicht Mitglied in diesem chat jetzt beitreten</h2>\n        </div>\n    );\n}\nexport function NoAuthorization(){\n    return (\n        <div>\n            <h2>Du bist nicht dazu berechtigt diesen chat anzusehen</h2>\n        </div>\n    );\n}\nexport function ChatNotExisting(){\n    return (\n        <div>\n            <h2>Dieser Chat existiert nicht</h2>\n        </div>\n    );\n}\nexport function GeneralError(){\n    return (\n        <div>\n            <h2>Fehler</h2>\n        </div>\n    );\n}","import React, {Component} from \"reactn\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport TempChatContainer from \"./TempChatContainer\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport {UserErrorCode,getUserNormalChat} from \"../../chatData/User\";\nimport {\n    AddressNotValid,\n    BlockedByThisUser,\n    CannotWriteYourself,\n    UserNotExisting\n} from \"./chatViewErrorMessages\";\n\nexport default class NormalChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: UserErrorCode.none\n        }\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if(this.state.error === UserErrorCode.nan){\n                return(\n                    <AddressNotValid/>\n                );\n            }\n            else if(this.state.error === UserErrorCode.isSelf){\n                return(\n                    <CannotWriteYourself/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if(this.state.loaded){\n\n                if(this.state.error === UserErrorCode.none){\n\n                    return(\n                        <ChatContainer\n                            chatType={this.global.currentChat.type}\n                            chatId={this.global.currentChat.id}\n                        />\n                    )\n                }else if(this.state.error === UserErrorCode.tempChat){\n                    return(\n                        <TempChatContainer uid={this.state.uid}/>\n                    )\n                }else if(this.state.error === UserErrorCode.blocked){\n                    return(\n                        <BlockedByThisUser/>\n                    )\n                }else{\n                    return(\n                        <UserNotExisting/>\n                    )\n                }\n            }\n        };\n\n        return <div className=\"h-100\">\n            {renderLoader()}\n            {renderChat()}\n        </div>;\n    }\n\n    componentDidMount() {\n        this.userChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did uid change?\n         */\n        if(prevProps.uid !== this.props.uid){\n            /*\n                is props.uid a number?\n             */\n            if(isNaN(this.props.uid)){\n                this.setState({\n                    error: UserErrorCode.nan\n                });\n            }\n            else{\n                this.userChanged();\n            }\n\n        }\n    }\n    /*\n        is called when the user changed and when the component mounted\n            this is checked after each update\n     */\n    userChanged = () => {\n\n        const uid = parseInt(this.props.uid);\n\n        /*\n            is the user self?\n         */\n        if(this.global.userSelf.uid === uid){\n            this.setState({\n                error: UserErrorCode.isSelf,\n                loaded: true\n            });\n        }else {\n\n            const userExists = () => {\n\n                getUserNormalChat(uid)\n                    .then(res => {\n                        /*\n                            no error\n                                checks if existing or tempChat\n                         */\n                        if (res === UserErrorCode.none) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.users.get(uid).username,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                normalChat is selected\n                             */\n                            this.selectNormalChat(uid);\n                            /*\n                                tempChat\n                             */\n                        } else if (res === UserErrorCode.tempChat) {\n                            this.setState({\n                                error: res\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.normalChat,\n                                ihcData: {\n                                    name: chatSocket.temporaryChat.chatNow.chatName,\n                                    uid: uid\n                                }\n                            }).then();\n                            /*\n                                the temporary chat is selected\n                             */\n                            this.selectTempChat();\n                        }\n                        /*\n                            some error has occured, state is set\n                         */\n                        else{\n                           this.setState({\n                               error: UserErrorCode.error\n                           })\n                        }\n                        this.setState({\n                            loaded: true\n                        });\n\n                    })\n                    .catch(err => this.setState({\n                        error: UserErrorCode.error\n                    }));\n            };\n\n            if (chatSocket.finishedLoading) {\n                userExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    userExists();\n                });\n            }\n\n            this.setState({\n                uid: parseInt(this.props.uid)\n            });\n        }\n    };\n    /*\n        the tempChat is selected\n     */\n    selectTempChat(){\n        this.dispatch.showTempChat();\n    }\n    /*\n        a normalCHat is selected\n     */\n    selectNormalChat(uid){\n        /*\n            does the user exist?\n         */\n        if (chatSocket.users.getIndex(uid) === -1) {\n\n            this.setState({\n                error: UserErrorCode.userNotExisting\n            });\n        }else {\n            /*\n                chat is pulled from chatSocket\n             */\n            const id = chatSocket.users.get(uid).normalChat;\n            const chat = chatSocket.getChat('normalChat', id);\n\n            this.dispatch.selectChat(chat);\n        }\n    }\n    /*\n        property- display normalChat is removed from global\n     */\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\n\nimport './modal.scss';\n\nclass Modal extends Component{\n\n    render() {\n        const clickedOutside = () => {\n            this.props.history.goBack();\n        };\n        return(\n            <div\n                className=\"modal-outer\"\n                onClick={clickedOutside}>\n                <div className=\"h-100\" style={{display: \"flex\"}}>\n\n                        <div\n                            className=\"modal-inner\"\n                            onClick={event => {event.stopPropagation()}}>\n                            <div\n                                className=\"btn-close\"\n                                onClick={() => {this.props.history.goBack()}}>\n                                &times;\n                            </div>\n                            {this.props.children}\n                        </div>\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default withRouter(Modal);\n\nexport function ModalHeader(props){\n    return(\n        <div className=\"m-header\">\n            {props.children}\n        </div>\n    )\n}\n\nexport function ModalMain(props){\n    return(\n        <div className=\"m-main\">\n            {props.children}\n        </div>\n    )\n}","import React,{Component} from \"react\";\n\nexport default class UserItem extends Component{\n\n    clicked = event => {\n        if(this.props.isSelected){\n            this.props.deselectUser(this.props.index);\n        }else\n            this.props.selectUser(this.props.index);\n    };\n\n    render() {\n        return(\n            <li key={this.props.index}\n                onClick={this.clicked}\n            >\n                <div className=\"username\">\n                    {this.props.username}\n                </div>\n                <div className={\"user-select fa-lg\" + (this.props.isSelected ? \" selected\" : \"\")}>\n                    <i className=\"fas fa-check\" />\n                </div>\n            </li>\n        );\n    }\n}","import React,{Component} from \"react\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class extends Component {\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            error: errorCode.none,\n            /*\n                are there items left?\n             */\n            hasMore: true\n        }\n    }\n\n    searchChanged = event => {\n        this.setState({\n            searchValue: event.target.value,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more users are loaded\n     */\n    loadUsers = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const response = await this.props.loadUsers(\n                    searchValue,\n                    length\n                );\n\n                if (response.ok) {\n                    //return json\n                    let data = await response.json();\n\n                    if (data.length === 0) {\n                        this.setState({\n                            hasMore: false\n                        })\n                    } else {\n                        this.setState(state => ({\n                            searchResult: state.searchResult.concat(data)\n                        }));\n                    }\n                    this.setState({\n                        error: errorCode.none\n                    });\n                } else {\n                    this.setState({\n                        error: errorCode.error\n                    });\n                }\n\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n    /*\n        is called when an user is selected\n     */\n    selectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.selectUser(user.uid,user.username);\n    };\n\n    deselectUser = index => {\n        const user = this.state.searchResult[index];\n        this.props.deselectUser(user.uid);\n    };\n\n    render() {\n        return(\n            <Dummy>\n                <form className=\"form-group\" style={{width: '90%',maxWidth: '650px'}}>\n                    <input type=\"text\"\n                           className=\"form-control p-2 m-2\"\n                           placeholder=\"Benutzer suchen\"\n                           value={this.state.searchValue}\n                           onChange={this.searchChanged}\n                    />\n                </form>\n                <div\n                    className=\"selectUsers\"\n                    ref={ref => this.scrollParentRef = ref}\n                >\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={this.loadUsers}\n                        hasMore={this.state.hasMore}\n                        loader={\n                            <div className=\"loader\" key={-1}>\n                                <div\n                                    className=\"spinner-border text-secondary\"\n                                    role=\"status\"\n                                >\n                                    <span className=\"sr-only\">\n                                        Loading...\n                                    </span>\n                                </div>\n                            </div>\n                        }\n                        useWindow={false}\n                        getScrollParent={() => this.scrollParentRef}\n                    >\n                        <ul className=\"selectUsers\">\n                            {this.state.searchResult.map((item, index) => (\n                                <UserItem\n                                    key={index}\n                                    index={index}\n                                    uid={item.uid}\n                                    username={item.username}\n                                    selectUser={this.selectUser}\n                                    deselectUser={this.deselectUser}\n                                    isSelected={this.props.isUserSelected(item.uid)}\n                                />\n                            ))}\n                            {this.state.searchResult.length === 0 ?\n                                <div key={-1} className=\"nothingFound\">\n                                    Nichts gefunden!\n                                </div>\n                                :\n                                null\n                            }\n                        </ul>\n                    </InfiniteScroll>\n                </div>\n            </Dummy>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport UserList from \"./UserList\";\nimport UserItem from \"./UserItem\";\nimport Dummy from \"../../utilComp/Dummy\";\n\nimport './selectUsers.scss';\n\nexport default class SelectUsers extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                the users already selected\n             */\n            selectedUsers: [],\n            showOnlySelected: false\n        }\n    }\n    /*\n        gets called when a user gets selected\n     */\n    selectUser = (uid,username) => {\n        this.setState(state => ({\n            selectedUsers: state.selectedUsers.concat({uid: uid,username: username})\n        }));\n    };\n\n    deselectUser = (uid) => {\n        this.setState(state => {\n            const arrClone = [...state.selectedUsers];\n            const index = arrClone.findIndex(item => {\n                return item.uid === uid;\n            });\n            arrClone.splice(index,1);\n            return {\n                selectedUsers: arrClone\n            }\n        });\n    };\n\n    deselectIndex = index => {\n        this.deselectUser(this.state.selectedUsers[index].uid);\n    };\n\n    isUserSelected = (uid) => {\n        return this.state.selectedUsers.find(item => {\n            return item.uid === uid;\n        });\n    };\n    /*\n        an Array with the uids of the users gets returned to the parent component\n     */\n    btnNextClicked = event => {\n\n        this.props.onNext(this.state.selectedUsers);\n    };\n\n    render() {\n\n        const renderSelectedUsers = () => {\n            if(this.state.selectedUsers.length === 0){\n                return (\n                    <h4>\n                        Noch niemand ausgewählt\n                    </h4>);\n            }else{\n                return(\n                    <h4 className=\"w-100\">\n                        <span className={\"selected-num\" + (this.state.showOnlySelected ? \" selected\" : \"\")}\n                              onClick={event => {\n                                  this.setState(state => ({\n                                      showOnlySelected: !state.showOnlySelected\n                                  }));\n                              }}\n                        >\n                            {this.state.selectedUsers.length}&nbsp;Benutzer\n                        </span>\n                        &nbsp;ausgewählt\n                        <i className=\"fas fa-arrow-right fa-lg float-right btn-next\"\n                           onClick={this.btnNextClicked}\n                        />\n                    </h4>\n                )\n            }\n        };\n        /*\n            selected users cannot be shown if there is no one selected.\n                --> showOnlySelected = false\n         */\n        if(this.state.selectedUsers.length === 0 && this.state.showOnlySelected)\n            this.setState({\n                showOnlySelected: false\n            });\n\n        return(\n            <Dummy>\n                <div className=\"select-users\">\n                    {renderSelectedUsers()}\n                </div>\n                    {!this.state.showOnlySelected ?\n                        <UserList selectUser={this.selectUser}\n                                  deselectUser={this.deselectUser}\n                                  isUserSelected={this.isUserSelected}\n                                  loadUsers={this.props.loadUsers}\n                        />\n                        :\n                        <div className=\"selectUsers\">\n                            <ul className=\"selectUsers only-selected\">\n                                {this.state.selectedUsers.map((item,index) => (\n                                    <UserItem\n                                        key={index}\n                                        index={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        selectUser={() => {}}\n                                        deselectUser={this.deselectIndex}\n                                        isSelected={true}\n                                    />\n                                ))}\n                            </ul>\n                        </div>\n                    }\n            </Dummy>\n        )\n    }\n}","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {makeRequest} from \"../../../global/requests\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport {ModalHeader, ModalMain} from \"../../../utilComp/Modal\";\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default function AddUsers(props){\n\n    let history = useHistory();\n\n    const submitUsers = async (selectedUsers) => {\n\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                users: selectedUsers\n            })\n        };\n\n        const response =\n            await makeRequest(\n                '/group/' + props.gcid + '/members',\n                config\n            );\n        /*\n            if ok, modal is closed\n         */\n        if(response.ok)\n            history.goBack();\n\n    };\n\n    const loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            })\n        };\n        /*\n            response is returned\n         */\n        return await makeRequest(\n            '/user/notInGroup/' + props.gcid,\n            config\n        );\n    };\n\n    return(\n        <Dummy>\n            <ModalHeader>\n                <h2>\n                    Benutzer hinzufügen\n                </h2>\n            </ModalHeader>\n            <ModalMain>\n                <SelectUsers\n                    onNext={submitUsers}\n                    loadUsers={loadUsers}\n                />\n            </ModalMain>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\n\nclass UserOptions extends Component {\n\n    isSelfAdmin = () => {\n        return this.props.memberSelf.isAdmin;\n    };\n\n    isMemberSelf(){\n        return this.props.member.uid === this.global.userSelf.uid;\n    };\n\n    removeMemberFromChat = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid,\n                    config\n                );\n        }\n    };\n\n    makeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/giveAdmin',\n                    config\n                );\n\n        }\n    };\n\n    removeMemberAdmin = async () => {\n        if(this.isSelfAdmin()) {\n\n            const config = {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n\n            const response =\n                await makeRequest(\n                    '/group/' + this.props.gcid + '/member/' + this.props.member.uid + '/removeAdmin',\n                    config\n                );\n        }\n    };\n\n    render(){\n\n        const {pathname} = this.props.location;\n\n        return (\n            <ul className=\"userOptions\">\n                <li key={0}>\n                    <Link to={pathname + \"/userInfo/\" + this.props.member.uid}>\n                        zeige {this.props.member.username} an\n                    </Link>\n                </li>\n                <li key={1}>\n                    <Link to={\"/chat/user/\" + this.props.member.uid}>\n                        Nachricht an {this.props.member.username}\n                    </Link>\n                </li>\n                {/*\n                    if the member is admin, he has more options\n                    */\n                    this.isSelfAdmin() && ! this.isMemberSelf() ?\n                        <Dummy>\n                            <li\n                                key={2}\n                                className=\"noLink\"\n                                onClick={this.removeMemberFromChat}\n                            >\n                                aus chat entfernen\n                            </li>\n                            {this.props.member.isAdmin ?\n                                <li\n                                    key={3}\n                                    className=\"noLink\"\n                                    onClick={this.removeMemberAdmin}\n                                >\n                                    admin status entfernen\n                                </li>\n                                :\n                                <li\n                                    key={4}\n                                    className=\"noLink\"\n                                    onClick={this.makeMemberAdmin}\n                                >\n                                    zu admin machen\n                                </li>\n                            }\n                        </Dummy>\n                        : null\n                }\n            </ul>\n        )\n    }\n}\n\nexport default withRouter(UserOptions);","import React,{Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\n\nclass ChatOptions extends Component {\n\n    isSelfAdmin = () => {\n        return this.props.memberSelf.isAdmin;\n    };\n\n    leaveChat = async () => {\n\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json'\n            }\n        };\n\n        const response =\n            await makeRequest(\n                '/group/' + this.props.gcid + '/leave',\n                config\n            );\n\n        if(response.ok) {\n\n            const data = await response.json();\n\n            if(data.error){\n                console.log(data.error);\n            }\n        }\n    };\n\n    removeSelfAdmin = async () => {\n\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json'\n            }\n        };\n\n        const response =\n            await makeRequest(\n                '/group/' + this.props.gcid + '/removeAdmin',\n                config\n            );\n\n        if(response.ok) {\n\n            const data = await response.json();\n\n            if(data.error){\n                console.log(data.error);\n            }\n        }\n    };\n\n    render() {\n\n        const {pathname} = this.props.location;\n\n        return(\n            <ul className=\"chatOptions\">\n                {this.isSelfAdmin() ?\n                    <Dummy>\n                        <li key={0}>\n                            <Link to={pathname + \"/addUsers\"}>\n                                Benutzer hinzufügen\n                            </Link>\n                        </li>\n                        <li\n                            key={1}\n                            className=\"noLink\"\n                            onClick={this.removeSelfAdmin}\n                        >\n                            admin status entfernen\n                        </li>\n                    </Dummy>\n                    : null}\n                <li\n                    key={2}\n                    className=\"noLink\"\n                    onClick={this.leaveChat}\n                >\n                    Chat verlassen\n                </li>\n            </ul>\n        )\n    }\n}\n\nexport default withRouter(ChatOptions);","import React,{Component} from \"react\";\nimport InlineEdit from 'react-ions/lib/components/InlineEdit'\n\nexport default class Edit extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            value: this.props.value\n        }\n    }\n\n    handleEdit = async event => {\n\n        const value = event.target.value;\n\n        this.setState({\n            isEditing: false,\n            value: value\n        });\n\n        await this.props.onSubmit(value);\n    };\n\n    editPressed = () => {\n        this.setState({\n            isEditing: true\n        });\n    };\n\n    render () {\n        return (\n            <div className={this.props.class}>\n                <InlineEdit\n                    name={this.props.name}\n                    value={this.state.value}\n                    isEditing={this.state.isEditing}\n                    changeCallback={this.handleEdit}\n                    optClass={\"input\"}\n                />\n                <i\n                    className=\"fas fa-edit edit\"\n                    onClick={this.editPressed}\n                />\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class DescriptionEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                description: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/description\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"description\"}\n                name={\"editDescription\"}\n                value={this.props.description}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport Edit from \"./inlineEdit\";\nimport {makeRequest} from \"../../../../global/requests\";\n\nexport default class ChatNameEdit extends Component{\n\n    onSubmit = async value => {\n        const config = {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                chatName: value\n            })\n        };\n\n        await makeRequest(\n            \"/group/\" + this.props.gcid + \"/chatName\",\n            config\n        );\n    };\n\n    render () {\n        return (\n            <Edit\n                class={\"chatName\"}\n                name={\"editChatName\"}\n                value={this.props.chatName}\n                onSubmit={this.onSubmit}\n            />\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from 'react-router-dom';\nimport chatSocket from \"../../../chatData/chatSocket\";\nimport Dropdown from \"rc-dropdown/es\";\nimport UserOptions from \"./UserOptions\";\nimport ChatOptions from \"./ChatOptions\";\nimport DescriptionEdit from \"./edit/editDescription\";\nimport ChatNameEdit from \"./edit/editChatName\";\n\nimport'./groupChatInfo.scss';\n\n/*\n    TODO groupchatinfo change socket events\n */\nclass GroupChatInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: false,\n            data: null\n        }\n    }\n\n    render() {\n\n        if(this.state.error)\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\">\n                    Ein Fehler ist aufgetreten!\n                </div>\n            );\n        const uidSelf = chatSocket.userSelf.uid;\n\n        return(\n            <div className=\"groupChatInfo\">\n                {this.props.data.memberSelf.isAdmin ?\n                    <h1>\n                        <ChatNameEdit\n                            gcid={this.props.gcid}\n                            chatName={this.props.data.chatName}\n                        />\n                    </h1>\n                    :\n                    <div className=\"chatName\">\n                        <h1>\n                            {this.props.data.chatName}\n                        </h1>\n                    </div>\n                }\n                {this.props.data.memberSelf.isAdmin ?\n                    <DescriptionEdit\n                        gcid={this.props.gcid}\n                        description={this.props.data.description}\n                    />\n                    :\n                    <div className=\"description\">\n                        {this.props.data.description}\n                    </div>\n                }\n                <Dropdown\n                    trigger={['click']}\n                    overlay={\n                        <ChatOptions\n                            gcid={this.props.gcid}\n                            memberSelf={this.props.data.memberSelf}\n                        />\n                    }\n                    >\n                    <i\n                        className=\"fas fa-ellipsis-v fa-lg chat-options-btn fa-2x\"\n                        role=\"button\"\n                    />\n                </Dropdown>\n\n                <h4>\n                    {this.props.data.members.length}\n                    &nbsp;Mitglieder:\n                </h4>\n                <ul className=\"userList\">\n                    {this.props.data.members.map((item,index) => (\n                        <li key={index}>\n                            <div className=\"userItem\">\n                            {uidSelf === item.uid ?\n                                <span>Du</span>\n                            :\n                                item.username\n                            }\n                            <div className=\"right\">\n                                {item.isAdmin ?\n                                    <span className=\"user-admin\">\n                                        Admin&nbsp;&nbsp;\n                                    </span>\n                                : null}\n                                <Dropdown\n                                    trigger={['click']}\n                                    overlay={\n                                        <UserOptions\n                                            gcid={this.props.gcid}\n                                            memberSelf={this.props.data.memberSelf}\n                                            member={item}\n                                        />\n                                    }\n                                    animation=\"slide-up\"\n                                    alignPoint\n                                >\n                                    <i\n                                        className=\"fas fa-ellipsis-v fa-lg\"\n                                        role=\"button\"\n                                    />\n                                </Dropdown>\n                            </div>\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\nexport default withRouter(GroupChatInfo);","import React from \"react\";\nimport {Route, Switch, useRouteMatch} from \"react-router-dom\";\nimport Modal from \"../../../utilComp/Modal\";\nimport AddUsers from \"./AddUsers\";\nimport GroupChatInfo from \"./GroupChatInfo\";\nimport Responsive from \"../../../responsive/Responsive\";\nimport Dummy from \"../../../utilComp/Dummy\";\n\nexport default function ModalRouterGroupChatInfo(props){\n\n    let { path } = useRouteMatch();\n\n    const groupChatInfo = (\n        <GroupChatInfo\n            gcid={props.gcid}\n            data={props.data}\n        />\n    );\n\n    return(\n        <Dummy>\n            <Responsive displayIn={[\"Mobile\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <AddUsers\n                            gcid={props.gcid}\n                        />\n                    </Route>\n                    <Route path={\"*\"}>\n                        {groupChatInfo}\n                    </Route>\n                </Switch>\n            </Responsive>\n            <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n                <Switch>\n                    <Route path={`${path}/addUsers`}>\n                        <Modal>\n                                <AddUsers\n                                    gcid={props.gcid}\n                                />\n                        </Modal>\n                    </Route>\n                </Switch>\n                {groupChatInfo}\n            </Responsive>\n        </Dummy>\n    )\n}","import React,{Component} from \"reactn\";\nimport ChatViewLoader from \"./ChatViewLoader\";\nimport ChatContainer from \"./chatContainer/ChatContainer\";\nimport chatSocket from \"../../chatData/chatSocket\";\nimport {infoHeaderCenter} from \"../Header/HeaderLeft\";\nimport ModalRouterGroupChatInfo from \"./groupChatInfo/ModalRouterGroupChatInfo\";\nimport {\n    AddressNotValid,\n    ChatNotExisting,\n    NoAuthorization,\n    NoMemberInPublicChat,\n    GeneralError\n} from \"./chatViewErrorMessages\";\nimport {makeRequest} from \"../../global/requests\";\n\nexport const groupChatErrorCode = {\n    none: 0,\n    nan: 1,\n    chatNotExisting: 2,\n    notPartOfChat: 3,\n    private: 4,\n    general: 5\n};\n\nexport const groupChatTabs = {\n    chat: 0,\n    info: 1\n};\n\nexport default class GroupChatView extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            gcid: 0,\n            loaded: false,\n            chatData: null,\n            error: groupChatErrorCode.none\n        }\n    }\n\n    loadGroupChatInfo = async(gcid) => {\n\n        try {\n            const config = {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n            const response = await makeRequest('/group/' + this.props.gcid + '/', config);\n\n            if(response.status === 403)\n                return groupChatErrorCode.private;\n\n            else if(response.status === 404)\n                return groupChatErrorCode.chatNotExisting;\n\n            else if (response.ok) {\n\n                let data = await response.json();\n\n                this.setState({\n                    chatData: data\n                });\n\n                if(data.error) {\n\n                    if (data.error === 'not part of chat')\n                        return groupChatErrorCode.notPartOfChat;\n\n                    else\n                        return groupChatErrorCode.general\n\n                }else if(chatSocket.chats.group.getIndex(gcid) !== -1){\n\n                    return groupChatErrorCode.none;\n                }\n            }\n            else {\n                return groupChatErrorCode.general\n            }\n        } catch (err) {\n            return groupChatErrorCode.general\n        }\n    };\n    /*\n        is called after the chatId changed\n     */\n    chatChanged = () => {\n        /*\n            is props.gcid a number?\n         */\n        if(isNaN(this.props.gcid)){\n            this.setState({\n                error: groupChatErrorCode.nan,\n                loaded: true\n            });\n        }else{\n\n            const chatExists = () => {\n\n                const gcid = parseInt(this.props.gcid);\n\n                this.loadGroupChatInfo(gcid)\n                    .then(r => {\n                        if (r === groupChatErrorCode.none) {\n\n                            this.selectGroupChat(gcid);\n                            this.setState({\n                                loaded: true,\n                                error: groupChatErrorCode.none,\n                                gcid: gcid\n                            });\n                            this.setGlobal({\n                                infoHeaderCenter: infoHeaderCenter.groupChat,\n                                ihcData: {\n                                    name: chatSocket.chats.group.get(gcid).chatName,\n                                    gcid: gcid\n                                }\n                            }).then();\n                        } else {\n                            this.setState({\n                                loaded: true,\n                                error: r\n                            });\n                        }\n                    })\n                    .catch();\n            };\n\n            if (chatSocket.finishedLoading) {\n                chatExists();\n            } else {\n                chatSocket.event.on('chats loaded', () => {\n                    chatExists();\n                });\n            }\n        }\n    };\n    /*\n        groupChat is selected\n     */\n    selectGroupChat(gcid){\n        /*\n            does the chat exist?\n         */\n        if (chatSocket.chats.group.getIndex(gcid) === -1) {\n\n            this.setState({\n                error: groupChatErrorCode.chatNotExisting\n            })\n        } else {\n\n            const chat = chatSocket.chats.group.get(gcid)\n            this.dispatch.selectChat(chat);\n        }\n    }\n\n    componentDidMount() {\n        this.chatChanged();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            did gcid change?\n         */\n        if(prevProps.gcid !== this.props.gcid){\n            this.chatChanged();\n\n        }\n    }\n\n    componentWillUnmount() {\n        this.setGlobal({\n            infoHeaderCenter: infoHeaderCenter.none,\n            ihcData: null\n        }).then();\n    }\n\n    render() {\n        const renderLoader = () => {\n            if(!this.state.loaded){\n                return(\n                    <ChatViewLoader\n                        msg=\"Chat wird geladen\"\n                    />\n                )\n            }\n        };\n\n        const renderChat = () => {\n            /*\n                es wird überprüft, ob uid number ist\n                --> wenn nicht, ungültige Addresse\n             */\n            if (this.state.error === groupChatErrorCode.nan) {\n                return (\n                    <AddressNotValid/>\n                );\n            }\n            /*\n                chat wird nur gerendert, wenn geladen\n             */\n            else if (this.state.loaded) {\n\n                switch(this.state.error){\n\n                    case groupChatErrorCode.none:\n\n                        switch(this.props.tab){\n                            case(groupChatTabs.chat):\n                                return (\n                                    <ChatContainer\n                                        chatType={this.global.currentChat.type}\n                                        chatId={this.global.currentChat.id}\n                                    />\n                                );\n\n                            case(groupChatTabs.info):\n                                return(\n                                    <ModalRouterGroupChatInfo\n                                        gcid={this.state.gcid}\n                                        data={this.state.chatData}\n                                    />\n                                );\n\n                            default:\n                                return null;\n                        }\n\n                    case groupChatErrorCode.notPartOfChat:\n                        return (\n                            <NoMemberInPublicChat/>\n                        );\n\n                    case groupChatErrorCode.private:\n                        return (\n                            <NoAuthorization/>\n                        );\n\n                    case groupChatErrorCode.chatNotExisting:\n                        return (\n                            <ChatNotExisting/>\n                        );\n\n                    case groupChatErrorCode.general:\n                        return(\n                            <GeneralError/>\n                        );\n\n                    default:\n                        return null;\n                }\n            }\n        };\n\n        return (\n            <div className=\"h-100\">\n                {renderLoader()}\n                {renderChat()}\n            </div>\n        );\n    }\n}","import React, {Component} from \"react\";\nimport {Link,withRouter} from \"react-router-dom\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nclass UserItem extends Component{\n\n    elementClicked = event => {\n\n        chatSocket.temporaryChat.createNew(this.props.uid,this.props.username);\n    };\n\n    render() {\n        return(\n            <li>\n                <Link to={\"/chat/user/\" + this.props.uid}\n                      onClick={this.elementClicked}\n                      replace={true}\n                >\n                {this.props.username}\n                </Link>\n            </li>\n        )\n    }\n}\nexport default withRouter(UserItem);","import React,{Component} from \"react\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport UserItem from \"./UserItem\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './selectChat.scss';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n/*\n    props:\n        showSearchBar: boolean\n            if false: searchValue comes as prop\n        searchValue\n        loadChats: function(searchValue,numAlreadyLoaded)\n */\nexport default class SelectChat extends Component{\n\n    scrollParentRef;\n    lastRequest = {};\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            showOptions: false,\n            /*\n                the value of the search input\n             */\n            searchValue: '',\n            /*\n                the last search result received from the server\n             */\n            searchResult: [],\n            /*\n                are there items left?\n             */\n            hasMore: true\n        };\n    }\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = (searchValue) => {\n\n        this.setState({\n            searchValue: searchValue,\n            searchResult: [],\n            hasMore: true\n        });\n    };\n    /*\n        more chats are loaded\n     */\n    loadChats = async () => {\n\n        const searchValue = this.state.searchValue;\n        const length = this.state.searchResult.length;\n\n        if(\n            this.lastRequest.searchValue !== searchValue\n            || this.lastRequest.length !== length\n        ) {\n\n            this.lastRequest = {\n                searchValue: searchValue,\n                length: length\n            };\n\n            try {\n\n                const response = await this.props.loadChats(\n                    searchValue,\n                    length\n                );\n\n                if (response.ok) {\n                    //return json\n                    let data = await response.json();\n\n                    if (data.length === 0) {\n                        this.setState({\n                            hasMore: false\n                        })\n                    } else {\n                        this.setState(state => ({\n                            searchResult: state.searchResult.concat(data)\n                        }));\n                    }\n                    this.setState({\n                        error: errorCode.none\n                    });\n                } else {\n                    this.setState({\n                        error: errorCode.error\n                    });\n                }\n            } catch (error) {\n                this.setState({\n                    error: errorCode.error\n                });\n            }\n        }\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            is searchBar is not shown,\n                it is checked if searchValue has changed\n         */\n        if(!this.props.showSearchBar){\n            if(this.props.searchValue !== prevProps.searchValue){\n                this.searchChanged(this.props.searchValue);\n            }\n        }\n    }\n\n    render() {\n\n        if(this.state.error === errorCode.error){\n            return(\n                <div className=\"alert alert-danger\" role=\"alert\" key={0}>\n                    Ein Fehler ist aufgetreten!\n                </div>\n            )\n        }\n            return (\n                <Dummy>\n                    {/*\n                        if showSearchBar is true, it gets shown\n                         */\n                        this.props.showSearchBar ?\n                            <div className=\"user-top\">\n                                <div className=\"searchUser\">\n                                    <input type=\"text\"\n                                           name=\"newChat-searchUser\"\n                                           className=\"form-control\"\n                                           placeholder=\"Benutzer suchen\"\n                                           onChange={(event) => {\n                                               this.searchChanged()\n                                           }}\n                                    />\n                                </div>\n                            </div>\n                            : null\n                    }\n                    <div\n                        className=\"selectChat\"\n                        ref={ref => this.scrollParentRef = ref}\n                    >\n                        <InfiniteScroll\n                            pageStart={0}\n                            loadMore={this.loadChats}\n                            hasMore={this.state.hasMore}\n                            loader={\n                                <div className=\"loader\" key={-1}>\n                                    <div\n                                        className=\"spinner-border text-secondary\"\n                                        role=\"status\"\n                                    >\n                                        <span className=\"sr-only\">\n                                            Loading...\n                                        </span>\n                                    </div>\n                                </div>\n                            }\n                            useWindow={false}\n                            getScrollParent={() => this.scrollParentRef}\n                            >\n                            <ul\n                                className=\"selectChat\">\n                                {this.state.searchResult.map((item, index) => (\n                                    <UserItem\n                                        key={index}\n                                        uid={item.uid}\n                                        username={item.username}\n                                        hide={this.props.hide}\n                                    />\n                                ))}\n                                {this.state.searchResult.length === 0 ?\n                                    <div key={-1} className=\"nothingFound\">\n                                        Nichts gefunden!\n                                    </div>\n                                    :\n                                    null\n                                }\n                            </ul>\n                        </InfiniteScroll>\n                    </div>\n                </Dummy>\n            );\n    }\n}","import React,{Component} from \"react\";\nimport {tabs} from \"../NewChat\";\nimport Dummy from \"../../../utilComp/Dummy\";\nimport {makeRequest} from \"../../../global/requests\";\nimport SelectChat from \"../../selectChat/SelectChat\";\nimport Dropdown from 'rc-dropdown';\n\nimport 'rc-dropdown/assets/index.css';\n\nimport './chooseUser.scss';\n\nconst errorCode={\n    none: 0,\n    error: 1\n};\n\nexport default class ChooseUser extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: errorCode.none,\n            /*\n                the value of the search input\n             */\n            searchValue: ''\n        };\n    }\n    /*\n        when new group gets clicked\n     */\n    newGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.newGroup);\n    };\n    /*\n        when join group is clicked\n     */\n    joinGroupClick = event => {\n        event.stopPropagation();\n        this.props.setCurrentTab(tabs.chooseGroup);\n    };\n    /*\n        gets called when the search of the user changed. the new result gets requested\n     */\n    searchChanged = event => {\n        const searchValue = event.target.value;\n\n        const searchValid = true;\n\n        this.setState({\n            searchValue: searchValue,\n            searchValid: searchValid\n        });\n    };\n\n    loadChats = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            })\n        };\n        /*\n            response is returned\n         */\n        return await makeRequest('/user/noChat', config);\n    };\n\n    render() {\n\n        const options = (\n            <div className=\"options\">\n                <ul>\n                    <li onClick={this.newGroupClick}>\n                        neue Gruppe\n                    </li>\n                    <li onClick={this.joinGroupClick}>\n                        einer Gruppe beitreten\n                    </li>\n                </ul>\n            </div>\n        );\n\n        return(\n            <Dummy>\n                <div className=\"user-top\">\n                    <div className=\"searchUser\">\n                        <input type=\"text\"\n                               name=\"newChat-searchUser\"\n                               className=\"form-control\"\n                               placeholder=\"Benutzer suchen\"\n                               onChange={this.searchChanged}\n                        />\n                    </div>\n                    <div className=\"user-more\">\n                        <Dropdown\n                            trigger={['click']}\n                            overlay={options}\n                            animation=\"slide-up\"\n                            alignPoint\n                        >\n                            <i className=\"fas fa-ellipsis-h fa-2x\"\n                               role=\"button\"\n                            />\n                        </Dropdown>\n                    </div>\n                </div>\n                <SelectChat\n                    showSearchBar={false}\n                    searchValue={this.state.searchValue}\n                    loadChats={this.loadChats}\n                />\n            </Dummy>\n        );\n    }\n}","import React,{Component} from \"react\";\n\nimport './groupInfoForm.scss';\nimport placeholder from '../../../img/placeholder.png';\n\nexport default class GroupInfoForm extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            groupName: '',\n            description: '',\n            isPublic: false\n        }\n    }\n\n    groupNameChanged = event => {\n        this.setState({\n            groupName: event.target.value\n        })\n    };\n\n    descriptionChanged = event => {\n        this.setState({\n            description: event.target.value\n        })\n    };\n\n    isPublicChanged = () => {\n        this.setState(state => ({\n           isPublic: !state.isPublic\n        }));\n    };\n\n    formSubmitted = event => {\n\n        event.preventDefault();\n\n        if(this.state.groupName !== '')\n            this.props.submitGroup({\n                name: this.state.groupName,\n                description: this.state.description,\n                isPublic: this.state.isPublic\n            });\n    };\n\n    render() {\n\n        return(\n            <div className=\"groupInfoForm\">\n                <form onSubmit={this.formSubmitted}>\n                    <img\n                        style={{\n                            display: 'none'\n                        }}\n                        id=\"groupImgInput1\"\n                        src={placeholder}\n                        alt=\"Placeholder\"\n                    />\n                    <div className=\"form-group\">\n                        <label htmlFor=\"exampleFormControlInput1\">\n                            Gruppenname\n                        </label>\n                        <input type=\"text\"\n                               name=\"groupName\"\n                               className=\"form-control\"\n                               id=\"input-groupName\"\n                               placeholder=\"Gruppenname\"\n                               value={this.state.name}\n                               onChange={this.groupNameChanged}\n                               minLength={1}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label\n                            htmlFor=\"description1\"\n                        >\n                            Beschreibung\n                        </label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"description1\"\n                            rows=\"3\"\n                            value={this.state.description}\n                            onChange={this.descriptionChanged}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label className=\"check-container\">\n                            öffentlicher chat\n                            <input\n                                type=\"checkbox\"\n                                checked={this.state.isPublic}\n                                onChange={this.isPublicChanged}\n                            />\n                            <span className=\"checkmark\">\n                                <i className=\"fas fa-check\" />\n                            </span>\n                        </label>\n                    </div>\n                    <div className=\"form-group\">\n                        <button\n                            type=\"submit\"\n                            className=\"float-right btn btn-primary m-3\"\n                        >\n                            Gruppe erstellen\n                        </button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {withRouter} from \"react-router-dom\";\nimport SelectUsers from \"../../selectUsers/SelectUsers\";\nimport GroupInfoForm from \"./GroupInfoForm\";\nimport {makeRequest} from \"../../../global/requests\";\n\nconst tabs = {\n    selectUsers: 0,\n    enterChatInfo: 1\n};\n\nclass NewGroup extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.selectUsers,\n            selectedUsers: []\n        }\n    }\n\n    showEnterChatInfo = selectedUsers => {\n\n        this.setState({\n            currentTab: tabs.enterChatInfo,\n            selectedUsers: selectedUsers\n        });\n    };\n\n    submitGroup = data => {\n\n        const users = new Array(this.state.selectedUsers.length);\n        for(let i=0;i<this.state.selectedUsers.length;i++){\n            users[i] = {\n                uid: this.state.selectedUsers[i].uid,\n                username: this.state.selectedUsers[i].username,\n                isAdmin: false\n            };\n        }\n\n        this.createGroupChat(data,users).then(r => {});\n    };\n\n    createGroupChat = async (data,users) => {\n        try {\n            const config = {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    data: data,\n                    users: users\n                })\n            };\n            const response = await makeRequest('/group/', config);\n            /*\n                if ok, modal is closed\n             */\n            if(response.ok)\n                this.props.history.goBack();\n\n        }catch(error){\n\n        }\n    };\n\n    loadUsers = async (\n        searchValue,\n        numAlreadyLoaded\n    ) => {\n\n        const config = {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                search: searchValue,\n                limit: 10,\n                start: numAlreadyLoaded\n            })\n        };\n        /*\n            response is returned\n         */\n        return await makeRequest('/user/', config);\n    };\n\n    render() {\n\n        switch(this.state.currentTab){\n\n            case tabs.selectUsers:\n                return (\n                    <SelectUsers\n                        onNext={this.showEnterChatInfo}\n                        loadUsers={this.loadUsers}\n                    />\n                );\n\n            case tabs.enterChatInfo:\n                return(\n                    <GroupInfoForm\n                        submitGroup={this.submitGroup}\n                    />\n                );\n\n            default:\n                return null;\n        }\n    }\n}\nexport default withRouter(NewGroup);","import React,{Component} from \"react\";\nimport ChooseUser from \"./chooseUser/ChooseUser\";\nimport NewGroup from \"./newGroup/NewGroup\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\n\nimport './newChat.scss';\n\nexport const tabs = {\n    chooseUser: 0,\n    newGroup: 1,\n    chooseGroup: 2\n};\n\nexport default class NewChat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentTab: tabs.chooseUser\n        }\n    }\n\n    setCurrentTab = newTab => {\n        this.setState({\n            currentTab: newTab\n        });\n    };\n\n    render() {\n\n        const router = () => {\n\n            switch (this.state.currentTab) {\n\n                case tabs.chooseUser:{\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n\n                }\n\n                case tabs.newGroup:{\n                    return(\n                        <NewGroup />\n                    );\n                }\n\n                case tabs.chooseGroup:{\n                    return(\n                        <div>\n                            <h4>chooseGroup</h4>\n                        </div>\n                    );\n                }\n\n\n                default: {\n                    return(\n                        <ChooseUser\n                            setCurrentTab={this.setCurrentTab}\n                            hide={this.props.hide}\n                        />\n                    );\n                }\n            }\n        };\n\n        const getHeader = () => {\n\n            switch(this.state.currentTab){\n\n                case tabs.chooseUser:\n                    return 'Neuer Chat';\n\n                case tabs.newGroup:\n                    return 'Neue Gruppe';\n\n                case tabs.chooseGroup:\n                    return 'Gruppe auswählen';\n\n                default:\n                    return 'Neuer Chat';\n\n            }\n        };\n\n        return(\n            <Dummy>\n                <ModalHeader>\n                    <h1>{getHeader()}</h1>\n                </ModalHeader>\n                <ModalMain>\n                    <div className=\"newChat\">\n                        {router()}\n                    </div>\n                </ModalMain>\n            </Dummy>\n        )\n    }\n}","import React,{Component} from \"react\";\nimport {Link} from 'react-router-dom';\nimport chatSocket from \"../../chatData/chatSocket\";\nimport {ModalHeader,ModalMain} from \"../../utilComp/Modal\";\nimport Dummy from \"../../utilComp/Dummy\";\nimport {makeRequest} from \"../../global/requests\";\n\nconst errorCode = {\n    none: 0,\n    isSelf: 1,\n    //not a number\n    nan: 2\n};\n\nexport default class UserInfo extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            uid: 0,\n            loaded: false,\n            error: errorCode.none,\n            userInfo: null\n        }\n    }\n\n    render() {\n        if(!this.state.loaded){\n            return null;\n\n        }else if(this.state.error === errorCode.isSelf){\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            Du\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        xx\n                    </ModalMain>\n                </Dummy>\n            )\n        }else{\n            return(\n                <Dummy>\n                    <ModalHeader>\n                        <h1>\n                            {this.state.userInfo.username}\n                            &nbsp;\n                            <Link to={\"/chat/user/\" + this.state.uid}>\n                                <i className=\"far fa-comment-alt\" />\n                            </Link>\n                        </h1>\n                    </ModalHeader>\n                    <ModalMain>\n                        <h2>Gruppen</h2>\n                    </ModalMain>\n                </Dummy>\n            )\n        }\n    }\n\n    setUser = () => {\n\n        if(isNaN(this.props.uid)){\n            this.setState({\n                error: errorCode.nan\n            });\n        }else if(chatSocket.userSelf.uid === parseInt(this.props.uid)){\n            this.setState({\n                error: errorCode.isSelf,\n                loaded: true\n            });\n        }else{\n            const uid = parseInt(this.props.uid);\n            this.setState({\n                uid: uid,\n                error: errorCode.none,\n                loaded: false\n            });\n            this.fetchUser(uid)\n                .then()\n                .catch();\n        }\n    };\n    /*\n        userInfo gets fetched from server\n     */\n    async fetchUser (uid) {\n\n        const config = {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json'\n            }\n        };\n        const response = await makeRequest('/user/' + uid, config);\n        //const json = await response.json()\n        if (response.ok) {\n            //return json\n            let data = await response.json();\n\n            this.setState({\n                userInfo: data,\n                loaded: true\n            });\n\n            return data;\n        } else {\n            return null;\n        }\n    }\n\n    componentDidMount() {\n        this.setUser();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            check if uid changed\n         */\n        if(prevProps.uid !== this.props.uid){\n            this.setUser();\n        }\n    }\n\n    componentWillUnmount() {\n\n    }\n\n\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport Modal from \"../utilComp/Modal\";\nimport NewChat from \"./newChat/NewChat\";\nimport Dummy from \"../utilComp/Dummy\";\nimport UserInfo from \"./userInfo/UserInfo\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterBigScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                {props.children}\n                <Modal>\n                    <NewChat />\n                </Modal>\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <Dummy>\n                        {props.children}\n                        <Modal>\n                            <UserInfo uid={routeProps.match.params.uidInfo} />\n                        </Modal>\n                    </Dummy>\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                {props.children}\n                <Modal>\n                    <h3>settings</h3>\n                </Modal>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport ModalRouterBigScreens from \"./ModalRouterBigScreens\";\n\nexport default function GridBigScreens(props){\n\n    const { path } = useRouteMatch();\n\n    return(\n        <div className=\"row justify-content-end main-container\">\n            <div className=\"col-md-5 col-lg-4 col-xl-3 d-none d-md-block pr-3 pl-0 h-100\">\n\n                <ChatList />\n            </div>\n            <div className=\"col-md-7 col-lg-8 col-xl-9 col-overflow\"\n                 style={{padding:'0'}}\n            >\n\n                <Switch>\n                    <Route path={`${path}/user/:uid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <NormalChatView\n                                    uid={routeProps.match.params.uid}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/group/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.chat}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={`${path}/groupInfo/:gcid`} render={\n                        routeProps => (\n                            <ModalRouterBigScreens>\n                                <GroupChatView\n                                    gcid={routeProps.match.params.gcid}\n                                    tab={groupChatTabs.info}\n                                />\n                            </ModalRouterBigScreens>\n                        )\n                    } />\n                    <Route path={path}>\n                        <ModalRouterBigScreens>\n                            <h1>noch kein chat ausgewählt</h1>\n                        </ModalRouterBigScreens>\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    )\n}\n","import React,{Component} from \"react\";\nimport chatSocket from \"../../chatData/chatSocket\";\n\nimport './typeMessageContainer.scss';\n\nexport default class TypeMsgContainer extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            usersTyping: []\n        };\n    }\n    typeStateChanged = () => {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        this.setState({\n            usersTyping: chat.getUsersTyping()\n        });\n    };\n\n    render() {\n\n        return(\n            <div className=\"typeMsg-container\">\n                {this.state.usersTyping.map((user,index) => (\n                    <div key={index} className=\"typeMsg\">\n                        {user.username + \" schreibt...\"}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.on(\"typeState changed\",this.typeStateChanged);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        /*\n            es wird überprüft, ob sich der chat geändert hat\n            wenn ja, werden events neu initialisiert\n         */\n        if(prevProps.chatType !== this.props.chatType || prevProps.chatId !== this.props.chatId) {\n\n            const prevChat = chatSocket.getChat(prevProps.chatType,prevProps.chatId);\n            prevChat.event.rm(\"typeState changed\",this.typeStateChanged);\n\n            const newChat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n            newChat.event.on(\"typeState changed\",this.typeStateChanged);\n        }\n    }\n\n    componentWillUnmount() {\n\n        const chat = chatSocket.getChat(this.props.chatType,this.props.chatId);\n        chat.event.rm(\"typeState changed\",this.typeStateChanged);\n    }\n}","import React from \"react\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport NewChat from \"./newChat/NewChat\";\nimport UserInfo from \"./userInfo/UserInfo\";\n/*\n    modals are always at the end of the url\n */\nexport default function ModalRouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n\n    return(\n        <Switch>\n            <Route path={`${path}/newChat`}>\n                <NewChat />\n            </Route>\n            <Route path={`${path}/userInfo/:uidInfo`} render={\n                routeProps => (\n                    <UserInfo uid={routeProps.match.params.uidInfo} />\n                )\n            } />\n            <Route path={`${path}/settings`}>\n                <h3>settings</h3>\n            </Route>\n            <Route path=\"*\">\n                {props.children}\n            </Route>\n        </Switch>\n    )\n}","import React,{useGlobal} from \"reactn\";\nimport {\n    Switch,\n    Route,\n    useRouteMatch\n} from \"react-router-dom\";\nimport ChatList from \"./allChats/ChatList\";\nimport NormalChatView from \"./chatView/NormalChatView\";\nimport GroupChatView,{groupChatTabs} from \"./chatView/GroupChatView\";\nimport TypeMsgContainer from \"./chatView/TypeMsgContainer\";\nimport ModalRouterSmallScreens from \"./ModalRouterSmallScreens\";\n\nexport default function RouterSmallScreens(props){\n\n    let { path } = useRouteMatch();\n    const [global,setGlobal] = useGlobal();\n\n    const renderTypeMsgContainer = () => {\n        if(global.currentChat.type !== '' && global.currentChat.id !== 0){\n            return(\n                <TypeMsgContainer\n                    chatType={global.currentChat.type}\n                    chatId={global.currentChat.id}\n                />\n            )\n        }\n        return null;\n    };\n\n    return(\n        <div className=\"main-container\">\n            <Switch>\n                <Route path={`${path}/user/:uid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <NormalChatView\n                                uid={routeProps.match.params.uid}\n                            />\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                }>\n                </Route>\n                <Route path={`${path}/group/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.chat}\n                            />\n                            {renderTypeMsgContainer()}\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={`${path}/groupInfo/:gcid`} render={\n                    routeProps => (\n                        <ModalRouterSmallScreens>\n                            <GroupChatView\n                                gcid={routeProps.match.params.gcid}\n                                tab={groupChatTabs.info}\n                            />\n                        </ModalRouterSmallScreens>\n                    )\n                } />\n                <Route path={path}>\n                    <ModalRouterSmallScreens>\n                        <ChatList\n                            paddingTop=\"20px\"\n                        />\n                    </ModalRouterSmallScreens>\n                </Route>\n                <Route path = \"*\">\n                    <h3>Not found!</h3>\n                </Route>\n            </Switch>\n        </div>\n    )\n\n}","import React,{Component} from \"react\";\nimport Header from \"./Header/Header\";\nimport Responsive from \"../responsive/Responsive\";\nimport GridBigScreens from \"./GridBigScreens\";\nimport RouterSmallScreens from \"./RouterSmallScreens\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nexport default class Chat extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /*\n                which modal is currently open\n                    0: none\n             */\n            modal: 0,\n            /*\n                info about the currently open modal\n             */\n            modalInfo: null,\n            /*\n                is shown at the user-icon\n             */\n            notifications: 0\n        };\n    }\n\n    componentDidMount() {\n        /*\n            if chatsocket is undefined, it gets initialized\n         */\n        if (!chatSocket.initCalled) {\n            chatSocket.init().then(r => {});\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"h-100\">\n\n                <Header/>\n\n                <Responsive displayIn={[\"Mobile\"]}>\n\n                    <RouterSmallScreens />\n                </Responsive>\n\n                <Responsive displayIn={[\"Laptop\",\"Tablet\"]}>\n\n                    <GridBigScreens/>\n                </Responsive>\n\n            </div>\n        );\n    }\n}","import {addReducer} from 'reactn';\nimport {fetchData} from \"./globalData\";\nimport {makeRequest} from \"./requests\";\nimport {resetChatSocket} from \"../chatData/chatSocket\";\n\nexport function authTokens(){\n\n    addReducer('deleteAuthTokens',(global,dispatch) => {\n\n        localStorage.removeItem(\"authTokens\");\n        /*\n            TODO: without reload\n         */\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        dispatch.deleteUserSelf();\n        dispatch.resetGlobal();\n        resetChatSocket();\n\n        return {\n            loaded: true,\n            authTokens: undefined\n        };\n    });\n\n    addReducer('initAuthTokens',async(global,dispatch,existingTokens) => {\n\n        try {\n            /*\n                util data is fetched from the server\n             */\n            await fetchData();\n\n            const config = {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json'\n                }\n            };\n            const response = await makeRequest(\n                '/user/self',\n                config,\n                existingTokens\n            );\n            /*\n                not authenticated\n                    --> token is deleted\n                    --> login page\n             */\n            if (response.status === 403) {\n                localStorage.removeItem(\"authTokens\");\n                return {\n                    loaded: true,\n                    authTokens: undefined\n                };\n            }\n            /*\n                userSelf is updated\n             */\n            else {\n                const data = await response.json();\n\n                const {uid, username} = data;\n                dispatch.setUserSelf(uid, username);\n\n                return ({\n                    loaded: true,\n                    authTokens: existingTokens\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            return({\n                loaded: false\n            })\n        }\n    });\n\n    addReducer('setAuthTokens',(global,dispatch,tokens) => {\n\n        localStorage.setItem(\"authTokens\", JSON.stringify(tokens));\n\n        return({\n            loaded: true,\n            authTokens: tokens\n        });\n    });\n}","import React, {useDispatch,useEffect} from \"reactn\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n    useLocation\n} from \"react-router-dom\";\nimport Login from \"./Auth/Login\";\nimport Register from \"./Auth/Register\";\nimport PrivateRoute from \"./utilComp/PrivateRoute\";\nimport Chat from \"./Home/Home\";\nimport 'popper.js';\n\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport {initGlobal} from \"./global/global\";\n\ninitGlobal();\n\nexport default function App() {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const existingTokens = JSON.parse(localStorage.getItem(\"authTokens\"));\n        dispatch.initAuthTokens(existingTokens);\n    },[]);\n\n    return (\n        <Router>\n            <Switch>\n                <PrivateRoute path=\"/chat\" component={Chat}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/register\" component={Register}/>\n                <Route path={\"/about\"}>\n                    <h1>about</h1>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to={\"/chat\"}/>\n                </Route>\n                <Route path=\"*\">\n                    <NoMatch/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n      <div>\n        <h3>\n          No match for <code>{location.pathname}</code>\n        </h3>\n      </div>\n  );\n}\n","import {addReducer, setGlobal} from 'reactn';\nimport {infoHeaderCenter} from \"../Home/Header/HeaderLeft\";\nimport {initChats} from \"./initChats\";\nimport {initChatReducers} from \"./chats\";\nimport {authTokens} from \"./authTokens\";\n\nexport function initGlobal(){\n\n    setGlobal({\n        /*\n            is the page ready to be shown?\n         */\n        loaded: false,\n        /*\n            the authentication token\n         */\n        authTokens: undefined,\n        /*\n            info about the user self\n         */\n        userSelf: {},\n        /*\n            what info should be shown at the left center of the header?\n         */\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        /*\n            the chat that is currently selected\n         */\n        currentChat: {\n            type: '',\n            id: 0,\n            /*\n                unread messages inside the currentChat\n             */\n            newMessages: 0,\n            /*\n                the messages in the currentChat, displayed in chatContainer\n             */\n            messages: []\n        },\n        /*\n            the shown tempChat\n         */\n        tempChat: null,\n        /*\n            all chats of the user are stored here\n         */\n        chats: [],\n        /*\n            number of chats with new messages\n         */\n        newMessages: 0\n        /*\n            TODO: notifications\n         */\n    });\n\n    initChats();\n\n    /*\n        the userSelf gets set\n     */\n    addReducer('setUserSelf',(global,dispatch,uid,username) => {\n\n        return {\n            userSelf: {\n                uid: uid,\n                username: username\n            }\n        }\n    });\n    /*\n        userSelf is deleted\n     */\n    addReducer('deleteUserSelf',(global,dispatch) => {\n\n       return {\n           userSelf: {}\n       }\n    });\n    /*\n        // eslint-disable-next-line no-unused-vars\n        global gets reseted\n     */\n    addReducer('resetGlobal',(global,dispatch) => ({\n        infoHeaderCenter: infoHeaderCenter.none,\n        ihcData: null,\n        currentChat: {\n            type: '',\n            id: 0,\n            newMessages: 0,\n            messages: []\n        },\n        tempChat: null,\n        chats: [],\n        newMessages: 0\n    }));\n    /*\n        chat reducers are initialized\n     */\n    initChatReducers();\n    /*\n        authTokens reducers are initialized\n     */\n    authTokens();\n}","import chatSocket from \"../chatData/chatSocket\";\nimport {setGlobal} from \"reactn\";\n\nexport function initChats(){\n\n    function chatsLoaded(chats){\n        setGlobal({\n            chats: chats\n        });\n    }\n    /*\n       chats get initialized\n       is loading of chats already finished?\n           --> chatArray gets requested immediately\n    */\n    if(chatSocket.finishedLoading){\n        chatsLoaded(chatSocket.getChatArraySortedByDate());\n        /*\n            otherwise --> event handler that gets triggered when loading finished\n         */\n    }else{\n        chatSocket.event.on('chats loaded',chatsLoaded);\n    }\n}","import {addReducer} from \"reactn\";\nimport chatSocket from \"../chatData/chatSocket\";\n\nexport function initChatReducers(){\n\n    /*\n        is the chat the current chat?\n     */\n    function isSelected(global,chat){\n\n        const currentChat = global.currentChat;\n        return currentChat.type === chat.type\n            && currentChat.id === chat.id;\n    }\n    /*\n        index of the chat is searched\n     */\n    function findIndex(global,chat){\n\n        return global.chats.findIndex(\n            element => (\n                element.id === chat.id\n                && element.type === chat.type)\n        );\n    }\n    /*\n        is called when there is a new message\n     */\n    addReducer('newMsg',(global,dispatch,chat,unreadMessages,message) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1){\n            /*\n                is the chat selected?\n             */\n            if(isSelected(global,chat)) {\n                /*\n                    chat is selected\n                        latestMessageObject is updated\n                        newMessage counter is set to 0\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                chatObject.unreadMessages = 0;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n                /*\n                    message is added to messages in currentChat\n                 */\n                const currentChat = {\n                    ...global.currentChat,\n                    messages: global.currentChat.messages.concat(message),\n                    newMessages: global.currentChat.newMessages + 1\n                };\n                return {\n                    chats: chatsClone,\n                    currentChat: currentChat\n                };\n            }else{\n                /*\n                    chat is not selected\n                        latestMessageObject is updated\n                        newMessage counter gets incremented\n                 */\n                const chatsClone = global.chats.splice(0);\n                const chatObject = chatsClone[index];\n                chatObject.latestMessage = chat.getLatestMessageObject();\n                /*\n                    if the unread messages of the chat have been 0 until now, newMessages is incremented\n                 */\n                let newMessages = global.newMessages;\n                if(chatObject.unreadMessages === 0){\n                    newMessages++;\n                }\n\n                chatObject.unreadMessages = unreadMessages + 1;\n                /*\n                    item is deleted from array\n                 */\n                chatsClone.splice(index,1);\n                /*\n                    item is added to start of the array\n                 */\n                chatsClone.unshift(chatObject);\n\n                return {\n                    chats: chatsClone,\n                    newMessages: newMessages\n                };\n            }\n        }\n    });\n    /*\n        gets called out of changeCurrentChat in chatSocket\n     */\n    addReducer('selectChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            if the index is -1, the chat does not exist\n         */\n        if(index !== -1) {\n            /*\n                chats is cloned\n             */\n            const chatsClone = global.chats.splice(0);\n            const item = chatsClone[index];\n            /*\n                if there where unread messages, newMessages counter is decremented by 1\n             */\n            let newMessages = global.newMessages;\n            if(item.unreadMessages > 0){\n                newMessages--;\n            }\n            /*\n                unreadMessages is set to 0\n             */\n            item.unreadMessages = 0;\n            chatsClone[index] = item;\n            /*\n                change is emitted to server\n             */\n            chatSocket.socket.emit('change chat', {\n                type: chat.type,\n                id: chat.id\n            });\n\n            return {\n                currentChat: {\n                    type: chat.type,\n                    id: chat.id,\n                    messages: chat.getMessages(),\n                    newMessages: 0\n                },\n                chats: chatsClone,\n                tempChat: null,\n                newMessages: newMessages\n            }\n        }\n    });\n    /*\n        is called when no chat should be selected\n     */\n    addReducer('selectNoChat',(global,dispatch) => {\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            currentChat: {\n                type: '',\n                id: 0,\n                messages: []\n            },\n        }\n    });\n    /*\n        loaded messages are added\n     */\n    addReducer('addLoadedMessages',(global,dispatch,messages) => {\n\n        return {\n            currentChat: {\n                ...global.currentChat,\n                messages: messages ?\n                    messages.concat(global.currentChat.messages)\n                    : global.currentChat.messages\n            }\n        };\n    });\n    /*\n        new chat is added\n     */\n    addReducer('addChat',(global,dispatch,chat) => {\n\n        function isDateBefore(chat1,chat2){\n            /*\n                do latestMessages exist?\n             */\n            if(!chat1.latestMessage)\n                return true;\n            else if(!chat2.latestMessage)\n                return false;\n            else\n                return chat1.latestMessage.date.getTime() < chat2.latestMessage.date.getTime();\n        }\n        /*\n            place the chat at the right position\n            chats is cloned\n         */\n        const chatsClone = global.chats.splice(0);\n        const chatObject = chat.getChatObject();\n\n        if(chatsClone.length === 0)\n            return {\n                chats: [chatObject]\n            };\n\n        for (let i = 0; i < chatsClone.length; i++) {\n            if (isDateBefore(chatsClone[i], chatObject)) {\n                chatsClone.splice(i, 0, chatObject);\n                break;\n            }\n        }\n\n        return {\n            chats: chatsClone\n        }\n\n    });\n    /*\n        chat is removed\n     */\n    addReducer('removeChat',(global,dispatch,chat) => {\n\n        const index = findIndex(global,chat);\n        /*\n            chats is cloned\n         */\n        const chatsClone = this.state.chats.splice(0);\n        /*\n            item is deleted from array\n         */\n        chatsClone.splice(index,1);\n\n        return {\n            chats: chatsClone\n        }\n    });\n    /*\n        tempChat is shown\n     */\n    addReducer('showTempChat',(global,dispatch) => {\n\n        const chat = chatSocket.temporaryChat.chatNow;\n        /*\n            change is emitted to server\n         */\n        chatSocket.socket.emit('change chat', null);\n\n        return {\n            tempChat: chat.getChatObject(),\n            currentChat: {\n                type: 'tempChat',\n                id: 0,\n                messages: []\n            }\n        }\n    });\n    /*\n        tempChat is updated\n     */\n    addReducer('updateTempChat',(global,dispatch,chat) => ({\n        tempChat: chat.getChatObject(),\n        currentChat: {\n            type: 'tempChat',\n            id: 0,\n            messages: []\n        }\n    }));\n    /*\n        tempChat is hidden\n     */\n    addReducer('hideTempChat',(global,dispatch) => ({\n        tempChat: null\n    }));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}